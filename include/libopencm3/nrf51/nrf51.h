/*
 * Copyright (c) 2010 - 2018, Nordic Semiconductor ASA
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form, except as embedded into a Nordic
 * Semiconductor ASA integrated circuit in a product or a software update for
 * such product, must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 * 
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 * 
 * 4. This software, with or without modification, must only be used with a
 * Nordic Semiconductor ASA integrated circuit.
 * 
 * 5. Any software provided in binary form under this license must not be reverse
 * engineered, decompiled, modified and/or disassembled.
 * 
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     nrf51.h
 * @brief    CMSIS HeaderFile
 * @version  522
 * @date     19. November 2019
 * @note     Generated by SVDConv V3.3.27 on Tuesday, 19.11.2019 14:49:14
 *           from File 'nrf51.svd',
 *           last modified on Friday, 18.10.2019 15:34:54
 */



/** @addtogroup Nordic Semiconductor
  * @{
  */


/** @addtogroup nrf51
  * @{
  */


#ifndef NRF51_H
#define NRF51_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ===========================================  nrf51 Specific Interrupt Numbers  ============================================ */
  POWER_CLOCK_IRQn          =   0,              /*!< 0  POWER_CLOCK                                                            */
  RADIO_IRQn                =   1,              /*!< 1  RADIO                                                                  */
  UART0_IRQn                =   2,              /*!< 2  UART0                                                                  */
  SPI0_TWI0_IRQn            =   3,              /*!< 3  SPI0_TWI0                                                              */
  SPI1_TWI1_IRQn            =   4,              /*!< 4  SPI1_TWI1                                                              */
  GPIOTE_IRQn               =   6,              /*!< 6  GPIOTE                                                                 */
  ADC_IRQn                  =   7,              /*!< 7  ADC                                                                    */
  TIMER0_IRQn               =   8,              /*!< 8  TIMER0                                                                 */
  TIMER1_IRQn               =   9,              /*!< 9  TIMER1                                                                 */
  TIMER2_IRQn               =  10,              /*!< 10 TIMER2                                                                 */
  RTC0_IRQn                 =  11,              /*!< 11 RTC0                                                                   */
  TEMP_IRQn                 =  12,              /*!< 12 TEMP                                                                   */
  RNG_IRQn                  =  13,              /*!< 13 RNG                                                                    */
  ECB_IRQn                  =  14,              /*!< 14 ECB                                                                    */
  CCM_AAR_IRQn              =  15,              /*!< 15 CCM_AAR                                                                */
  WDT_IRQn                  =  16,              /*!< 16 WDT                                                                    */
  RTC1_IRQn                 =  17,              /*!< 17 RTC1                                                                   */
  QDEC_IRQn                 =  18,              /*!< 18 QDEC                                                                   */
  LPCOMP_IRQn               =  19,              /*!< 19 LPCOMP                                                                 */
  SWI0_IRQn                 =  20,              /*!< 20 SWI0                                                                   */
  SWI1_IRQn                 =  21,              /*!< 21 SWI1                                                                   */
  SWI2_IRQn                 =  22,              /*!< 22 SWI2                                                                   */
  SWI3_IRQn                 =  23,              /*!< 23 SWI3                                                                   */
  SWI4_IRQn                 =  24,              /*!< 24 SWI4                                                                   */
  SWI5_IRQn                 =  25               /*!< 25 SWI5                                                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M0 Processor and Core Peripherals  =========================== */
#define __CM0_REV                 0x0301U       /*!< CM0 Core Revision                                                         */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0.h"                           /*!< ARM Cortex-M0 processor and core peripherals                              */
#include "system_nrf51.h"                       /*!< nrf51 System                                                              */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief PPI_TASKS_CHG [TASKS_CHG] (Channel group tasks.)
  */
typedef struct {
  __OM  uint32_t  EN;                           /*!< (@ 0x00000000) Enable channel group.                                      */
  __OM  uint32_t  DIS;                          /*!< (@ 0x00000004) Disable channel group.                                     */
} PPI_TASKS_CHG_Type;                           /*!< Size = 8 (0x8)                                                            */


/**
  * @brief PPI_CH [CH] (PPI Channel.)
  */
typedef struct {
  __IOM uint32_t  EEP;                          /*!< (@ 0x00000000) Channel event end-point.                                   */
  __IOM uint32_t  TEP;                          /*!< (@ 0x00000004) Channel task end-point.                                    */
} PPI_CH_Type;                                  /*!< Size = 8 (0x8)                                                            */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Control. (POWER)
  */

typedef struct {                                /*!< (@ 0x40000000) POWER Structure                                            */
  __IM  uint32_t  RESERVED[30];
  __OM  uint32_t  TASKS_CONSTLAT;               /*!< (@ 0x00000078) Enable constant latency mode.                              */
  __OM  uint32_t  TASKS_LOWPWR;                 /*!< (@ 0x0000007C) Enable low power mode (variable latency).                  */
  __IM  uint32_t  RESERVED1[34];
  __IOM uint32_t  EVENTS_POFWARN;               /*!< (@ 0x00000108) Power failure warning.                                     */
  __IM  uint32_t  RESERVED2[126];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t POFWARN    : 1;            /*!< [2..2] Enable interrupt on POFWARN event.                                 */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t POFWARN    : 1;            /*!< [2..2] Disable interrupt on POFWARN event.                                */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[61];
  
  union {
    __IOM uint32_t RESETREAS;                   /*!< (@ 0x00000400) Reset reason.                                              */
    
    struct {
      __IOM uint32_t RESETPIN   : 1;            /*!< [0..0] Reset from pin-reset detected.                                     */
      __IOM uint32_t DOG        : 1;            /*!< [1..1] Reset from watchdog detected.                                      */
      __IOM uint32_t SREQ       : 1;            /*!< [2..2] Reset from AIRCR.SYSRESETREQ detected.                             */
      __IOM uint32_t LOCKUP     : 1;            /*!< [3..3] Reset from CPU lock-up detected.                                   */
      __IM  uint32_t            : 12;
      __IOM uint32_t OFF        : 1;            /*!< [16..16] Reset from wake-up from OFF mode detected by the use
                                                     of DETECT signal from GPIO.                                               */
      __IOM uint32_t LPCOMP     : 1;            /*!< [17..17] Reset from wake-up from OFF mode detected by the use
                                                     of ANADETECT signal from LPCOMP.                                          */
      __IOM uint32_t DIF        : 1;            /*!< [18..18] Reset from wake-up from OFF mode detected by entering
                                                     into debug interface mode.                                                */
    } RESETREAS_b;
  } ;
  __IM  uint32_t  RESERVED4[9];
  
  union {
    __IM  uint32_t RAMSTATUS;                   /*!< (@ 0x00000428) Ram status register.                                       */
    
    struct {
      __IM  uint32_t RAMBLOCK0  : 1;            /*!< [0..0] RAM block 0 status.                                                */
      __IM  uint32_t RAMBLOCK1  : 1;            /*!< [1..1] RAM block 1 status.                                                */
      __IM  uint32_t RAMBLOCK2  : 1;            /*!< [2..2] RAM block 2 status.                                                */
      __IM  uint32_t RAMBLOCK3  : 1;            /*!< [3..3] RAM block 3 status.                                                */
    } RAMSTATUS_b;
  } ;
  __IM  uint32_t  RESERVED5[53];
  
  union {
    __OM  uint32_t SYSTEMOFF;                   /*!< (@ 0x00000500) System off register.                                       */
    
    struct {
      __OM  uint32_t SYSTEMOFF  : 1;            /*!< [0..0] Enter system off mode.                                             */
    } SYSTEMOFF_b;
  } ;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t POFCON;                      /*!< (@ 0x00000510) Power failure configuration.                               */
    
    struct {
      __IOM uint32_t POF        : 1;            /*!< [0..0] Power failure comparator enable.                                   */
      __IOM uint32_t THRESHOLD  : 2;            /*!< [2..1] Set threshold level.                                               */
    } POFCON_b;
  } ;
  __IM  uint32_t  RESERVED7[2];
  
  union {
    __IOM uint32_t GPREGRET;                    /*!< (@ 0x0000051C) General purpose retention register. This register
                                                                    is a retained register.                                    */
    
    struct {
      __IOM uint32_t GPREGRET   : 8;            /*!< [7..0] General purpose retention register.                                */
    } GPREGRET_b;
  } ;
  __IM  uint32_t  RESERVED8;
  
  union {
    __IOM uint32_t RAMON;                       /*!< (@ 0x00000524) Ram on/off.                                                */
    
    struct {
      __IOM uint32_t ONRAM0     : 1;            /*!< [0..0] RAM block 0 behaviour in ON mode.                                  */
      __IOM uint32_t ONRAM1     : 1;            /*!< [1..1] RAM block 1 behaviour in ON mode.                                  */
      __IM  uint32_t            : 14;
      __IOM uint32_t OFFRAM0    : 1;            /*!< [16..16] RAM block 0 behaviour in OFF mode.                               */
      __IOM uint32_t OFFRAM1    : 1;            /*!< [17..17] RAM block 1 behaviour in OFF mode.                               */
    } RAMON_b;
  } ;
  __IM  uint32_t  RESERVED9[7];
  
  union {
    __IOM uint32_t RESET;                       /*!< (@ 0x00000544) Pin reset functionality configuration register.
                                                                    This register is a retained register.                      */
    
    struct {
      __IOM uint32_t RESET      : 1;            /*!< [0..0] Enable or disable pin reset in debug interface mode.               */
    } RESET_b;
  } ;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t RAMONB;                      /*!< (@ 0x00000554) Ram on/off.                                                */
    
    struct {
      __IOM uint32_t ONRAM2     : 1;            /*!< [0..0] RAM block 2 behaviour in ON mode.                                  */
      __IOM uint32_t ONRAM3     : 1;            /*!< [1..1] RAM block 3 behaviour in ON mode.                                  */
      __IM  uint32_t            : 14;
      __IOM uint32_t OFFRAM2    : 1;            /*!< [16..16] RAM block 2 behaviour in OFF mode.                               */
      __IOM uint32_t OFFRAM3    : 1;            /*!< [17..17] RAM block 3 behaviour in OFF mode.                               */
    } RAMONB_b;
  } ;
  __IM  uint32_t  RESERVED11[8];
  
  union {
    __IOM uint32_t DCDCEN;                      /*!< (@ 0x00000578) DCDC converter enable configuration register.              */
    
    struct {
      __IOM uint32_t DCDCEN     : 1;            /*!< [0..0] Enable DCDC converter.                                             */
    } DCDCEN_b;
  } ;
  __IM  uint32_t  RESERVED12[291];
  
  union {
    __IOM uint32_t DCDCFORCE;                   /*!< (@ 0x00000A08) DCDC power-up force register.                              */
    
    struct {
      __IOM uint32_t FORCEOFF   : 1;            /*!< [0..0] DCDC power-up force off.                                           */
      __IOM uint32_t FORCEON    : 1;            /*!< [1..1] DCDC power-up force on.                                            */
    } DCDCFORCE_b;
  } ;
} NRF_POWER_Type;                               /*!< Size = 2572 (0xa0c)                                                       */



/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock control. (CLOCK)
  */

typedef struct {                                /*!< (@ 0x40000000) CLOCK Structure                                            */
  __OM  uint32_t  TASKS_HFCLKSTART;             /*!< (@ 0x00000000) Start HFCLK clock source.                                  */
  __OM  uint32_t  TASKS_HFCLKSTOP;              /*!< (@ 0x00000004) Stop HFCLK clock source.                                   */
  __OM  uint32_t  TASKS_LFCLKSTART;             /*!< (@ 0x00000008) Start LFCLK clock source.                                  */
  __OM  uint32_t  TASKS_LFCLKSTOP;              /*!< (@ 0x0000000C) Stop LFCLK clock source.                                   */
  __OM  uint32_t  TASKS_CAL;                    /*!< (@ 0x00000010) Start calibration of LFCLK RC oscillator.                  */
  __OM  uint32_t  TASKS_CTSTART;                /*!< (@ 0x00000014) Start calibration timer.                                   */
  __OM  uint32_t  TASKS_CTSTOP;                 /*!< (@ 0x00000018) Stop calibration timer.                                    */
  __IM  uint32_t  RESERVED[57];
  __IOM uint32_t  EVENTS_HFCLKSTARTED;          /*!< (@ 0x00000100) HFCLK oscillator started.                                  */
  __IOM uint32_t  EVENTS_LFCLKSTARTED;          /*!< (@ 0x00000104) LFCLK oscillator started.                                  */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  EVENTS_DONE;                  /*!< (@ 0x0000010C) Calibration of LFCLK RC oscillator completed.              */
  __IOM uint32_t  EVENTS_CTTO;                  /*!< (@ 0x00000110) Calibration timer timeout.                                 */
  __IM  uint32_t  RESERVED2[124];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t HFCLKSTARTED : 1;          /*!< [0..0] Enable interrupt on HFCLKSTARTED event.                            */
      __IOM uint32_t LFCLKSTARTED : 1;          /*!< [1..1] Enable interrupt on LFCLKSTARTED event.                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t DONE       : 1;            /*!< [3..3] Enable interrupt on DONE event.                                    */
      __IOM uint32_t CTTO       : 1;            /*!< [4..4] Enable interrupt on CTTO event.                                    */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t HFCLKSTARTED : 1;          /*!< [0..0] Disable interrupt on HFCLKSTARTED event.                           */
      __IOM uint32_t LFCLKSTARTED : 1;          /*!< [1..1] Disable interrupt on LFCLKSTARTED event.                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t DONE       : 1;            /*!< [3..3] Disable interrupt on DONE event.                                   */
      __IOM uint32_t CTTO       : 1;            /*!< [4..4] Disable interrupt on CTTO event.                                   */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[63];
  
  union {
    __IM  uint32_t HFCLKRUN;                    /*!< (@ 0x00000408) Task HFCLKSTART trigger status.                            */
    
    struct {
      __IM  uint32_t STATUS     : 1;            /*!< [0..0] Task HFCLKSTART trigger status.                                    */
    } HFCLKRUN_b;
  } ;
  
  union {
    __IM  uint32_t HFCLKSTAT;                   /*!< (@ 0x0000040C) High frequency clock status.                               */
    
    struct {
      __IM  uint32_t SRC        : 1;            /*!< [0..0] Active clock source for the HF clock.                              */
      __IM  uint32_t            : 15;
      __IM  uint32_t STATE      : 1;            /*!< [16..16] State for the HFCLK.                                             */
    } HFCLKSTAT_b;
  } ;
  __IM  uint32_t  RESERVED4;
  
  union {
    __IM  uint32_t LFCLKRUN;                    /*!< (@ 0x00000414) Task LFCLKSTART triggered status.                          */
    
    struct {
      __IM  uint32_t STATUS     : 1;            /*!< [0..0] Task LFCLKSTART triggered status.                                  */
    } LFCLKRUN_b;
  } ;
  
  union {
    __IM  uint32_t LFCLKSTAT;                   /*!< (@ 0x00000418) Low frequency clock status.                                */
    
    struct {
      __IM  uint32_t SRC        : 2;            /*!< [1..0] Active clock source for the LF clock.                              */
      __IM  uint32_t            : 14;
      __IM  uint32_t STATE      : 1;            /*!< [16..16] State for the LF clock.                                          */
    } LFCLKSTAT_b;
  } ;
  
  union {
    __IM  uint32_t LFCLKSRCCOPY;                /*!< (@ 0x0000041C) Clock source for the LFCLK clock, set when task
                                                                    LKCLKSTART is triggered.                                   */
    
    struct {
      __IM  uint32_t SRC        : 2;            /*!< [1..0] Clock source for the LFCLK clock, set when task LKCLKSTART
                                                     is triggered.                                                             */
    } LFCLKSRCCOPY_b;
  } ;
  __IM  uint32_t  RESERVED5[62];
  
  union {
    __IOM uint32_t LFCLKSRC;                    /*!< (@ 0x00000518) Clock source for the LFCLK clock.                          */
    
    struct {
      __IOM uint32_t SRC        : 2;            /*!< [1..0] Clock source.                                                      */
    } LFCLKSRC_b;
  } ;
  __IM  uint32_t  RESERVED6[7];
  
  union {
    __IOM uint32_t CTIV;                        /*!< (@ 0x00000538) Calibration timer interval.                                */
    
    struct {
      __IOM uint32_t CTIV       : 7;            /*!< [6..0] Calibration timer interval in 0.25s resolution.                    */
    } CTIV_b;
  } ;
  __IM  uint32_t  RESERVED7[5];
  
  union {
    __IOM uint32_t XTALFREQ;                    /*!< (@ 0x00000550) Crystal frequency.                                         */
    
    struct {
      __IOM uint32_t XTALFREQ   : 8;            /*!< [7..0] External Xtal frequency selection.                                 */
    } XTALFREQ_b;
  } ;
} NRF_CLOCK_Type;                               /*!< Size = 1364 (0x554)                                                       */



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory Protection Unit. (MPU)
  */

typedef struct {                                /*!< (@ 0x40000000) MPU Structure                                              */
  __IM  uint32_t  RESERVED[330];
  
  union {
    __IOM uint32_t PERR0;                       /*!< (@ 0x00000528) Configuration of peripherals in mpu regions.               */
    
    struct {
      __IOM uint32_t POWER_CLOCK : 1;           /*!< [0..0] POWER_CLOCK region configuration.                                  */
      __IOM uint32_t RADIO      : 1;            /*!< [1..1] RADIO region configuration.                                        */
      __IOM uint32_t UART0      : 1;            /*!< [2..2] UART0 region configuration.                                        */
      __IOM uint32_t SPI0_TWI0  : 1;            /*!< [3..3] SPI0 and TWI0 region configuration.                                */
      __IOM uint32_t SPI1_TWI1  : 1;            /*!< [4..4] SPI1 and TWI1 region configuration.                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t GPIOTE     : 1;            /*!< [6..6] GPIOTE region configuration.                                       */
      __IOM uint32_t ADC        : 1;            /*!< [7..7] ADC region configuration.                                          */
      __IOM uint32_t TIMER0     : 1;            /*!< [8..8] TIMER0 region configuration.                                       */
      __IOM uint32_t TIMER1     : 1;            /*!< [9..9] TIMER1 region configuration.                                       */
      __IOM uint32_t TIMER2     : 1;            /*!< [10..10] TIMER2 region configuration.                                     */
      __IOM uint32_t RTC0       : 1;            /*!< [11..11] RTC0 region configuration.                                       */
      __IOM uint32_t TEMP       : 1;            /*!< [12..12] TEMP region configuration.                                       */
      __IOM uint32_t RNG        : 1;            /*!< [13..13] RNG region configuration.                                        */
      __IOM uint32_t ECB        : 1;            /*!< [14..14] ECB region configuration.                                        */
      __IOM uint32_t CCM_AAR    : 1;            /*!< [15..15] CCM and AAR region configuration.                                */
      __IOM uint32_t WDT        : 1;            /*!< [16..16] WDT region configuration.                                        */
      __IOM uint32_t RTC1       : 1;            /*!< [17..17] RTC1 region configuration.                                       */
      __IOM uint32_t QDEC       : 1;            /*!< [18..18] QDEC region configuration.                                       */
      __IOM uint32_t LPCOMP     : 1;            /*!< [19..19] LPCOMP region configuration.                                     */
      __IM  uint32_t            : 10;
      __IOM uint32_t NVMC       : 1;            /*!< [30..30] NVMC region configuration.                                       */
      __IOM uint32_t PPI        : 1;            /*!< [31..31] PPI region configuration.                                        */
    } PERR0_b;
  } ;
  __IOM uint32_t  RLENR0;                       /*!< (@ 0x0000052C) Length of RAM region 0.                                    */
  __IM  uint32_t  RESERVED1[52];
  
  union {
    __IOM uint32_t PROTENSET0;                  /*!< (@ 0x00000600) Erase and write protection bit enable set register.        */
    
    struct {
      __IOM uint32_t PROTREG0   : 1;            /*!< [0..0] Protection enable for region 0.                                    */
      __IOM uint32_t PROTREG1   : 1;            /*!< [1..1] Protection enable for region 1.                                    */
      __IOM uint32_t PROTREG2   : 1;            /*!< [2..2] Protection enable for region 2.                                    */
      __IOM uint32_t PROTREG3   : 1;            /*!< [3..3] Protection enable for region 3.                                    */
      __IOM uint32_t PROTREG4   : 1;            /*!< [4..4] Protection enable for region 4.                                    */
      __IOM uint32_t PROTREG5   : 1;            /*!< [5..5] Protection enable for region 5.                                    */
      __IOM uint32_t PROTREG6   : 1;            /*!< [6..6] Protection enable for region 6.                                    */
      __IOM uint32_t PROTREG7   : 1;            /*!< [7..7] Protection enable for region 7.                                    */
      __IOM uint32_t PROTREG8   : 1;            /*!< [8..8] Protection enable for region 8.                                    */
      __IOM uint32_t PROTREG9   : 1;            /*!< [9..9] Protection enable for region 9.                                    */
      __IOM uint32_t PROTREG10  : 1;            /*!< [10..10] Protection enable for region 10.                                 */
      __IOM uint32_t PROTREG11  : 1;            /*!< [11..11] Protection enable for region 11.                                 */
      __IOM uint32_t PROTREG12  : 1;            /*!< [12..12] Protection enable for region 12.                                 */
      __IOM uint32_t PROTREG13  : 1;            /*!< [13..13] Protection enable for region 13.                                 */
      __IOM uint32_t PROTREG14  : 1;            /*!< [14..14] Protection enable for region 14.                                 */
      __IOM uint32_t PROTREG15  : 1;            /*!< [15..15] Protection enable for region 15.                                 */
      __IOM uint32_t PROTREG16  : 1;            /*!< [16..16] Protection enable for region 16.                                 */
      __IOM uint32_t PROTREG17  : 1;            /*!< [17..17] Protection enable for region 17.                                 */
      __IOM uint32_t PROTREG18  : 1;            /*!< [18..18] Protection enable for region 18.                                 */
      __IOM uint32_t PROTREG19  : 1;            /*!< [19..19] Protection enable for region 19.                                 */
      __IOM uint32_t PROTREG20  : 1;            /*!< [20..20] Protection enable for region 20.                                 */
      __IOM uint32_t PROTREG21  : 1;            /*!< [21..21] Protection enable for region 21.                                 */
      __IOM uint32_t PROTREG22  : 1;            /*!< [22..22] Protection enable for region 22.                                 */
      __IOM uint32_t PROTREG23  : 1;            /*!< [23..23] Protection enable for region 23.                                 */
      __IOM uint32_t PROTREG24  : 1;            /*!< [24..24] Protection enable for region 24.                                 */
      __IOM uint32_t PROTREG25  : 1;            /*!< [25..25] Protection enable for region 25.                                 */
      __IOM uint32_t PROTREG26  : 1;            /*!< [26..26] Protection enable for region 26.                                 */
      __IOM uint32_t PROTREG27  : 1;            /*!< [27..27] Protection enable for region 27.                                 */
      __IOM uint32_t PROTREG28  : 1;            /*!< [28..28] Protection enable for region 28.                                 */
      __IOM uint32_t PROTREG29  : 1;            /*!< [29..29] Protection enable for region 29.                                 */
      __IOM uint32_t PROTREG30  : 1;            /*!< [30..30] Protection enable for region 30.                                 */
      __IOM uint32_t PROTREG31  : 1;            /*!< [31..31] Protection enable for region 31.                                 */
    } PROTENSET0_b;
  } ;
  
  union {
    __IOM uint32_t PROTENSET1;                  /*!< (@ 0x00000604) Erase and write protection bit enable set register.        */
    
    struct {
      __IOM uint32_t PROTREG32  : 1;            /*!< [0..0] Protection enable for region 32.                                   */
      __IOM uint32_t PROTREG33  : 1;            /*!< [1..1] Protection enable for region 33.                                   */
      __IOM uint32_t PROTREG34  : 1;            /*!< [2..2] Protection enable for region 34.                                   */
      __IOM uint32_t PROTREG35  : 1;            /*!< [3..3] Protection enable for region 35.                                   */
      __IOM uint32_t PROTREG36  : 1;            /*!< [4..4] Protection enable for region 36.                                   */
      __IOM uint32_t PROTREG37  : 1;            /*!< [5..5] Protection enable for region 37.                                   */
      __IOM uint32_t PROTREG38  : 1;            /*!< [6..6] Protection enable for region 38.                                   */
      __IOM uint32_t PROTREG39  : 1;            /*!< [7..7] Protection enable for region 39.                                   */
      __IOM uint32_t PROTREG40  : 1;            /*!< [8..8] Protection enable for region 40.                                   */
      __IOM uint32_t PROTREG41  : 1;            /*!< [9..9] Protection enable for region 41.                                   */
      __IOM uint32_t PROTREG42  : 1;            /*!< [10..10] Protection enable for region 42.                                 */
      __IOM uint32_t PROTREG43  : 1;            /*!< [11..11] Protection enable for region 43.                                 */
      __IOM uint32_t PROTREG44  : 1;            /*!< [12..12] Protection enable for region 44.                                 */
      __IOM uint32_t PROTREG45  : 1;            /*!< [13..13] Protection enable for region 45.                                 */
      __IOM uint32_t PROTREG46  : 1;            /*!< [14..14] Protection enable for region 46.                                 */
      __IOM uint32_t PROTREG47  : 1;            /*!< [15..15] Protection enable for region 47.                                 */
      __IOM uint32_t PROTREG48  : 1;            /*!< [16..16] Protection enable for region 48.                                 */
      __IOM uint32_t PROTREG49  : 1;            /*!< [17..17] Protection enable for region 49.                                 */
      __IOM uint32_t PROTREG50  : 1;            /*!< [18..18] Protection enable for region 50.                                 */
      __IOM uint32_t PROTREG51  : 1;            /*!< [19..19] Protection enable for region 51.                                 */
      __IOM uint32_t PROTREG52  : 1;            /*!< [20..20] Protection enable for region 52.                                 */
      __IOM uint32_t PROTREG53  : 1;            /*!< [21..21] Protection enable for region 53.                                 */
      __IOM uint32_t PROTREG54  : 1;            /*!< [22..22] Protection enable for region 54.                                 */
      __IOM uint32_t PROTREG55  : 1;            /*!< [23..23] Protection enable for region 55.                                 */
      __IOM uint32_t PROTREG56  : 1;            /*!< [24..24] Protection enable for region 56.                                 */
      __IOM uint32_t PROTREG57  : 1;            /*!< [25..25] Protection enable for region 57.                                 */
      __IOM uint32_t PROTREG58  : 1;            /*!< [26..26] Protection enable for region 58.                                 */
      __IOM uint32_t PROTREG59  : 1;            /*!< [27..27] Protection enable for region 59.                                 */
      __IOM uint32_t PROTREG60  : 1;            /*!< [28..28] Protection enable for region 60.                                 */
      __IOM uint32_t PROTREG61  : 1;            /*!< [29..29] Protection enable for region 61.                                 */
      __IOM uint32_t PROTREG62  : 1;            /*!< [30..30] Protection enable for region 62.                                 */
      __IOM uint32_t PROTREG63  : 1;            /*!< [31..31] Protection enable for region 63.                                 */
    } PROTENSET1_b;
  } ;
  
  union {
    __IOM uint32_t DISABLEINDEBUG;              /*!< (@ 0x00000608) Disable erase and write protection mechanism
                                                                    in debug mode.                                             */
    
    struct {
      __IOM uint32_t DISABLEINDEBUG : 1;        /*!< [0..0] Disable protection mechanism in debug mode.                        */
    } DISABLEINDEBUG_b;
  } ;
  
  union {
    __IOM uint32_t PROTBLOCKSIZE;               /*!< (@ 0x0000060C) Erase and write protection block size.                     */
    
    struct {
      __IOM uint32_t PROTBLOCKSIZE : 2;         /*!< [1..0] Erase and write protection block size.                             */
    } PROTBLOCKSIZE_b;
  } ;
} NRF_MPU_Type;                                 /*!< Size = 1552 (0x610)                                                       */



/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief The radio. (RADIO)
  */

typedef struct {                                /*!< (@ 0x40001000) RADIO Structure                                            */
  __OM  uint32_t  TASKS_TXEN;                   /*!< (@ 0x00000000) Enable radio in TX mode.                                   */
  __OM  uint32_t  TASKS_RXEN;                   /*!< (@ 0x00000004) Enable radio in RX mode.                                   */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000008) Start radio.                                               */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x0000000C) Stop radio.                                                */
  __OM  uint32_t  TASKS_DISABLE;                /*!< (@ 0x00000010) Disable radio.                                             */
  __OM  uint32_t  TASKS_RSSISTART;              /*!< (@ 0x00000014) Start the RSSI and take one sample of the receive
                                                                    signal strength.                                           */
  __OM  uint32_t  TASKS_RSSISTOP;               /*!< (@ 0x00000018) Stop the RSSI measurement.                                 */
  __OM  uint32_t  TASKS_BCSTART;                /*!< (@ 0x0000001C) Start the bit counter.                                     */
  __OM  uint32_t  TASKS_BCSTOP;                 /*!< (@ 0x00000020) Stop the bit counter.                                      */
  __IM  uint32_t  RESERVED[55];
  __IOM uint32_t  EVENTS_READY;                 /*!< (@ 0x00000100) Ready event.                                               */
  __IOM uint32_t  EVENTS_ADDRESS;               /*!< (@ 0x00000104) Address event.                                             */
  __IOM uint32_t  EVENTS_PAYLOAD;               /*!< (@ 0x00000108) Payload event.                                             */
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x0000010C) End event.                                                 */
  __IOM uint32_t  EVENTS_DISABLED;              /*!< (@ 0x00000110) Disable event.                                             */
  __IOM uint32_t  EVENTS_DEVMATCH;              /*!< (@ 0x00000114) A device address match occurred on the last received
                                                                    packet.                                                    */
  __IOM uint32_t  EVENTS_DEVMISS;               /*!< (@ 0x00000118) No device address match occurred on the last
                                                                    received packet.                                           */
  __IOM uint32_t  EVENTS_RSSIEND;               /*!< (@ 0x0000011C) Sampling of the receive signal strength complete.
                                                                    A new RSSI sample is ready for readout at
                                                                    the RSSISAMPLE register.                                   */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  EVENTS_BCMATCH;               /*!< (@ 0x00000128) Bit counter reached bit count value specified
                                                                    in BCC register.                                           */
  __IM  uint32_t  RESERVED2[53];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for the radio.                                   */
    
    struct {
      __IOM uint32_t READY_START : 1;           /*!< [0..0] Shortcut between READY event and START task.                       */
      __IOM uint32_t END_DISABLE : 1;           /*!< [1..1] Shortcut between END event and DISABLE task.                       */
      __IOM uint32_t DISABLED_TXEN : 1;         /*!< [2..2] Shortcut between DISABLED event and TXEN task.                     */
      __IOM uint32_t DISABLED_RXEN : 1;         /*!< [3..3] Shortcut between DISABLED event and RXEN task.                     */
      __IOM uint32_t ADDRESS_RSSISTART : 1;     /*!< [4..4] Shortcut between ADDRESS event and RSSISTART task.                 */
      __IOM uint32_t END_START  : 1;            /*!< [5..5] Shortcut between END event and START task.                         */
      __IOM uint32_t ADDRESS_BCSTART : 1;       /*!< [6..6] Shortcut between ADDRESS event and BCSTART task.                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t DISABLED_RSSISTOP : 1;     /*!< [8..8] Shortcut between DISABLED event and RSSISTOP task.                 */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED3[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t READY      : 1;            /*!< [0..0] Enable interrupt on READY event.                                   */
      __IOM uint32_t ADDRESS    : 1;            /*!< [1..1] Enable interrupt on ADDRESS event.                                 */
      __IOM uint32_t PAYLOAD    : 1;            /*!< [2..2] Enable interrupt on PAYLOAD event.                                 */
      __IOM uint32_t END        : 1;            /*!< [3..3] Enable interrupt on END event.                                     */
      __IOM uint32_t DISABLED   : 1;            /*!< [4..4] Enable interrupt on DISABLED event.                                */
      __IOM uint32_t DEVMATCH   : 1;            /*!< [5..5] Enable interrupt on DEVMATCH event.                                */
      __IOM uint32_t DEVMISS    : 1;            /*!< [6..6] Enable interrupt on DEVMISS event.                                 */
      __IOM uint32_t RSSIEND    : 1;            /*!< [7..7] Enable interrupt on RSSIEND event.                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t BCMATCH    : 1;            /*!< [10..10] Enable interrupt on BCMATCH event.                               */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t READY      : 1;            /*!< [0..0] Disable interrupt on READY event.                                  */
      __IOM uint32_t ADDRESS    : 1;            /*!< [1..1] Disable interrupt on ADDRESS event.                                */
      __IOM uint32_t PAYLOAD    : 1;            /*!< [2..2] Disable interrupt on PAYLOAD event.                                */
      __IOM uint32_t END        : 1;            /*!< [3..3] Disable interrupt on END event.                                    */
      __IOM uint32_t DISABLED   : 1;            /*!< [4..4] Disable interrupt on DISABLED event.                               */
      __IOM uint32_t DEVMATCH   : 1;            /*!< [5..5] Disable interrupt on DEVMATCH event.                               */
      __IOM uint32_t DEVMISS    : 1;            /*!< [6..6] Disable interrupt on DEVMISS event.                                */
      __IOM uint32_t RSSIEND    : 1;            /*!< [7..7] Disable interrupt on RSSIEND event.                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t BCMATCH    : 1;            /*!< [10..10] Disable interrupt on BCMATCH event.                              */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED4[61];
  
  union {
    __IM  uint32_t CRCSTATUS;                   /*!< (@ 0x00000400) CRC status of received packet.                             */
    
    struct {
      __IM  uint32_t CRCSTATUS  : 1;            /*!< [0..0] CRC status of received packet.                                     */
    } CRCSTATUS_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IM  uint32_t RXMATCH;                     /*!< (@ 0x00000408) Received address.                                          */
    
    struct {
      __IM  uint32_t RXMATCH    : 3;            /*!< [2..0] Logical address in which previous packet was received.             */
    } RXMATCH_b;
  } ;
  
  union {
    __IM  uint32_t RXCRC;                       /*!< (@ 0x0000040C) Received CRC.                                              */
    
    struct {
      __IM  uint32_t RXCRC      : 24;           /*!< [23..0] CRC field of previously received packet.                          */
    } RXCRC_b;
  } ;
  
  union {
    __IM  uint32_t DAI;                         /*!< (@ 0x00000410) Device address match index.                                */
    
    struct {
      __IM  uint32_t DAI        : 3;            /*!< [2..0] Index (n) of device address (see DAB[n] and DAP[n]) that
                                                     obtained an address match.                                                */
    } DAI_b;
  } ;
  __IM  uint32_t  RESERVED6[60];
  __IOM uint32_t  PACKETPTR;                    /*!< (@ 0x00000504) Packet pointer. Decision point: START task.                */
  
  union {
    __IOM uint32_t FREQUENCY;                   /*!< (@ 0x00000508) Frequency.                                                 */
    
    struct {
      __IOM uint32_t FREQUENCY  : 7;            /*!< [6..0] Radio channel frequency offset in MHz: RF Frequency =
                                                     2400 + FREQUENCY (MHz). Decision point: TXEN or RXEN task.                */
    } FREQUENCY_b;
  } ;
  
  union {
    __IOM uint32_t TXPOWER;                     /*!< (@ 0x0000050C) Output power.                                              */
    
    struct {
      __IOM uint32_t TXPOWER    : 8;            /*!< [7..0] Radio output power. Decision point: TXEN task.                     */
    } TXPOWER_b;
  } ;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000510) Data rate and modulation.                                  */
    
    struct {
      __IOM uint32_t MODE       : 2;            /*!< [1..0] Radio data rate and modulation setting. Decision point:
                                                     TXEN or RXEN task.                                                        */
    } MODE_b;
  } ;
  
  union {
    __IOM uint32_t PCNF0;                       /*!< (@ 0x00000514) Packet configuration 0.                                    */
    
    struct {
      __IOM uint32_t LFLEN      : 4;            /*!< [3..0] Length of length field in number of bits. Decision point:
                                                     START task.                                                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t S0LEN      : 1;            /*!< [8..8] Length of S0 field in number of bytes. Decision point:
                                                     START task.                                                               */
      __IM  uint32_t            : 7;
      __IOM uint32_t S1LEN      : 4;            /*!< [19..16] Length of S1 field in number of bits. Decision point:
                                                     START task.                                                               */
    } PCNF0_b;
  } ;
  
  union {
    __IOM uint32_t PCNF1;                       /*!< (@ 0x00000518) Packet configuration 1.                                    */
    
    struct {
      __IOM uint32_t MAXLEN     : 8;            /*!< [7..0] Maximum length of packet payload in number of bytes.               */
      __IOM uint32_t STATLEN    : 8;            /*!< [15..8] Static length in number of bytes. Decision point: START
                                                     task.                                                                     */
      __IOM uint32_t BALEN      : 3;            /*!< [18..16] Base address length in number of bytes. Decision point:
                                                     START task.                                                               */
      __IM  uint32_t            : 5;
      __IOM uint32_t ENDIAN     : 1;            /*!< [24..24] On air endianness of packet length field. Decision
                                                     point: START task.                                                        */
      __IOM uint32_t WHITEEN    : 1;            /*!< [25..25] Packet whitening enable.                                         */
    } PCNF1_b;
  } ;
  __IOM uint32_t  BASE0;                        /*!< (@ 0x0000051C) Radio base address 0. Decision point: START task.          */
  __IOM uint32_t  BASE1;                        /*!< (@ 0x00000520) Radio base address 1. Decision point: START task.          */
  
  union {
    __IOM uint32_t PREFIX0;                     /*!< (@ 0x00000524) Prefixes bytes for logical addresses 0 to 3.               */
    
    struct {
      __IOM uint32_t AP0        : 8;            /*!< [7..0] Address prefix 0. Decision point: START task.                      */
      __IOM uint32_t AP1        : 8;            /*!< [15..8] Address prefix 1. Decision point: START task.                     */
      __IOM uint32_t AP2        : 8;            /*!< [23..16] Address prefix 2. Decision point: START task.                    */
      __IOM uint32_t AP3        : 8;            /*!< [31..24] Address prefix 3. Decision point: START task.                    */
    } PREFIX0_b;
  } ;
  
  union {
    __IOM uint32_t PREFIX1;                     /*!< (@ 0x00000528) Prefixes bytes for logical addresses 4 to 7.               */
    
    struct {
      __IOM uint32_t AP4        : 8;            /*!< [7..0] Address prefix 4. Decision point: START task.                      */
      __IOM uint32_t AP5        : 8;            /*!< [15..8] Address prefix 5. Decision point: START task.                     */
      __IOM uint32_t AP6        : 8;            /*!< [23..16] Address prefix 6. Decision point: START task.                    */
      __IOM uint32_t AP7        : 8;            /*!< [31..24] Address prefix 7. Decision point: START task.                    */
    } PREFIX1_b;
  } ;
  
  union {
    __IOM uint32_t TXADDRESS;                   /*!< (@ 0x0000052C) Transmit address select.                                   */
    
    struct {
      __IOM uint32_t TXADDRESS  : 3;            /*!< [2..0] Logical address to be used when transmitting a packet.
                                                     Decision point: START task.                                               */
    } TXADDRESS_b;
  } ;
  
  union {
    __IOM uint32_t RXADDRESSES;                 /*!< (@ 0x00000530) Receive address select.                                    */
    
    struct {
      __IOM uint32_t ADDR0      : 1;            /*!< [0..0] Enable reception on logical address 0. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR1      : 1;            /*!< [1..1] Enable reception on logical address 1. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR2      : 1;            /*!< [2..2] Enable reception on logical address 2. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR3      : 1;            /*!< [3..3] Enable reception on logical address 3. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR4      : 1;            /*!< [4..4] Enable reception on logical address 4. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR5      : 1;            /*!< [5..5] Enable reception on logical address 5. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR6      : 1;            /*!< [6..6] Enable reception on logical address 6. Decision point:
                                                     START task.                                                               */
      __IOM uint32_t ADDR7      : 1;            /*!< [7..7] Enable reception on logical address 7. Decision point:
                                                     START task.                                                               */
    } RXADDRESSES_b;
  } ;
  
  union {
    __IOM uint32_t CRCCNF;                      /*!< (@ 0x00000534) CRC configuration.                                         */
    
    struct {
      __IOM uint32_t LEN        : 2;            /*!< [1..0] CRC length. Decision point: START task.                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t SKIPADDR   : 1;            /*!< [8..8] Leave packet address field out of the CRC calculation.
                                                     Decision point: START task.                                               */
    } CRCCNF_b;
  } ;
  
  union {
    __IOM uint32_t CRCPOLY;                     /*!< (@ 0x00000538) CRC polynomial.                                            */
    
    struct {
      __IOM uint32_t CRCPOLY    : 24;           /*!< [23..0] CRC polynomial. Decision point: START task.                       */
    } CRCPOLY_b;
  } ;
  
  union {
    __IOM uint32_t CRCINIT;                     /*!< (@ 0x0000053C) CRC initial value.                                         */
    
    struct {
      __IOM uint32_t CRCINIT    : 24;           /*!< [23..0] Initial value for CRC calculation. Decision point: START
                                                     task.                                                                     */
    } CRCINIT_b;
  } ;
  
  union {
    __IOM uint32_t TEST;                        /*!< (@ 0x00000540) Test features enable register.                             */
    
    struct {
      __IOM uint32_t CONSTCARRIER : 1;          /*!< [0..0] Constant carrier. Decision point: TXEN task.                       */
      __IOM uint32_t PLLLOCK    : 1;            /*!< [1..1] PLL lock. Decision point: TXEN or RXEN task.                       */
    } TEST_b;
  } ;
  
  union {
    __IOM uint32_t TIFS;                        /*!< (@ 0x00000544) Inter Frame Spacing in microseconds.                       */
    
    struct {
      __IOM uint32_t TIFS       : 8;            /*!< [7..0] Inter frame spacing in microseconds. Decision point:
                                                     START rask                                                                */
    } TIFS_b;
  } ;
  
  union {
    __IM  uint32_t RSSISAMPLE;                  /*!< (@ 0x00000548) RSSI sample.                                               */
    
    struct {
      __IM  uint32_t RSSISAMPLE : 7;            /*!< [6..0] RSSI sample result. The result is read as a positive
                                                     value so that ReceivedSignalStrength = -RSSISAMPLE dBm                    */
    } RSSISAMPLE_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IM  uint32_t STATE;                       /*!< (@ 0x00000550) Current radio state.                                       */
    
    struct {
      __IM  uint32_t STATE      : 4;            /*!< [3..0] Current radio state.                                               */
    } STATE_b;
  } ;
  
  union {
    __IOM uint32_t DATAWHITEIV;                 /*!< (@ 0x00000554) Data whitening initial value.                              */
    
    struct {
      __IOM uint32_t DATAWHITEIV : 7;           /*!< [6..0] Data whitening initial value. Bit 0 corresponds to Position
                                                     0 of the LSFR, Bit 1 to position 5... Decision point: TXEN
                                                     or RXEN task.                                                             */
    } DATAWHITEIV_b;
  } ;
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  BCC;                          /*!< (@ 0x00000560) Bit counter compare.                                       */
  __IM  uint32_t  RESERVED9[39];
  __IOM uint32_t  DAB[8];                       /*!< (@ 0x00000600) Device address base segment.                               */
  
  union {
    __IOM uint32_t DAP[8];                      /*!< (@ 0x00000620) Device address prefix.                                     */
    
    struct {
      __IOM uint32_t DAP        : 16;           /*!< [15..0] Device address prefix.                                            */
    } DAP_b[8];
  } ;
  
  union {
    __IOM uint32_t DACNF;                       /*!< (@ 0x00000640) Device address match configuration.                        */
    
    struct {
      __IOM uint32_t ENA0       : 1;            /*!< [0..0] Enable or disable device address matching using device
                                                     address 0.                                                                */
      __IOM uint32_t ENA1       : 1;            /*!< [1..1] Enable or disable device address matching using device
                                                     address 1.                                                                */
      __IOM uint32_t ENA2       : 1;            /*!< [2..2] Enable or disable device address matching using device
                                                     address 2.                                                                */
      __IOM uint32_t ENA3       : 1;            /*!< [3..3] Enable or disable device address matching using device
                                                     address 3.                                                                */
      __IOM uint32_t ENA4       : 1;            /*!< [4..4] Enable or disable device address matching using device
                                                     address 4.                                                                */
      __IOM uint32_t ENA5       : 1;            /*!< [5..5] Enable or disable device address matching using device
                                                     address 5.                                                                */
      __IOM uint32_t ENA6       : 1;            /*!< [6..6] Enable or disable device address matching using device
                                                     address 6.                                                                */
      __IOM uint32_t ENA7       : 1;            /*!< [7..7] Enable or disable device address matching using device
                                                     address 7.                                                                */
      __IOM uint32_t TXADD0     : 1;            /*!< [8..8] TxAdd for device address 0.                                        */
      __IOM uint32_t TXADD1     : 1;            /*!< [9..9] TxAdd for device address 1.                                        */
      __IOM uint32_t TXADD2     : 1;            /*!< [10..10] TxAdd for device address 2.                                      */
      __IOM uint32_t TXADD3     : 1;            /*!< [11..11] TxAdd for device address 3.                                      */
      __IOM uint32_t TXADD4     : 1;            /*!< [12..12] TxAdd for device address 4.                                      */
      __IOM uint32_t TXADD5     : 1;            /*!< [13..13] TxAdd for device address 5.                                      */
      __IOM uint32_t TXADD6     : 1;            /*!< [14..14] TxAdd for device address 6.                                      */
      __IOM uint32_t TXADD7     : 1;            /*!< [15..15] TxAdd for device address 7.                                      */
    } DACNF_b;
  } ;
  __IM  uint32_t  RESERVED10[56];
  
  union {
    __IOM uint32_t OVERRIDE0;                   /*!< (@ 0x00000724) Trim value override register 0.                            */
    
    struct {
      __IOM uint32_t OVERRIDE0  : 32;           /*!< [31..0] Trim value override 0.                                            */
    } OVERRIDE0_b;
  } ;
  
  union {
    __IOM uint32_t OVERRIDE1;                   /*!< (@ 0x00000728) Trim value override register 1.                            */
    
    struct {
      __IOM uint32_t OVERRIDE1  : 32;           /*!< [31..0] Trim value override 1.                                            */
    } OVERRIDE1_b;
  } ;
  
  union {
    __IOM uint32_t OVERRIDE2;                   /*!< (@ 0x0000072C) Trim value override register 2.                            */
    
    struct {
      __IOM uint32_t OVERRIDE2  : 32;           /*!< [31..0] Trim value override 2.                                            */
    } OVERRIDE2_b;
  } ;
  
  union {
    __IOM uint32_t OVERRIDE3;                   /*!< (@ 0x00000730) Trim value override register 3.                            */
    
    struct {
      __IOM uint32_t OVERRIDE3  : 32;           /*!< [31..0] Trim value override 3.                                            */
    } OVERRIDE3_b;
  } ;
  
  union {
    __IOM uint32_t OVERRIDE4;                   /*!< (@ 0x00000734) Trim value override register 4.                            */
    
    struct {
      __IOM uint32_t OVERRIDE4  : 28;           /*!< [27..0] Trim value override 4.                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t ENABLE     : 1;            /*!< [31..31] Enable or disable override of default trim values.               */
    } OVERRIDE4_b;
  } ;
  __IM  uint32_t  RESERVED11[561];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_RADIO_Type;                               /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal Asynchronous Receiver/Transmitter. (UART0)
  */

typedef struct {                                /*!< (@ 0x40002000) UART0 Structure                                            */
  __OM  uint32_t  TASKS_STARTRX;                /*!< (@ 0x00000000) Start UART receiver.                                       */
  __OM  uint32_t  TASKS_STOPRX;                 /*!< (@ 0x00000004) Stop UART receiver.                                        */
  __OM  uint32_t  TASKS_STARTTX;                /*!< (@ 0x00000008) Start UART transmitter.                                    */
  __OM  uint32_t  TASKS_STOPTX;                 /*!< (@ 0x0000000C) Stop UART transmitter.                                     */
  __IM  uint32_t  RESERVED[3];
  __OM  uint32_t  TASKS_SUSPEND;                /*!< (@ 0x0000001C) Suspend UART.                                              */
  __IM  uint32_t  RESERVED1[56];
  __IOM uint32_t  EVENTS_CTS;                   /*!< (@ 0x00000100) CTS activated.                                             */
  __IOM uint32_t  EVENTS_NCTS;                  /*!< (@ 0x00000104) CTS deactivated.                                           */
  __IOM uint32_t  EVENTS_RXDRDY;                /*!< (@ 0x00000108) Data received in RXD.                                      */
  __IM  uint32_t  RESERVED2[4];
  __IOM uint32_t  EVENTS_TXDRDY;                /*!< (@ 0x0000011C) Data sent from TXD.                                        */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000124) Error detected.                                            */
  __IM  uint32_t  RESERVED4[7];
  __IOM uint32_t  EVENTS_RXTO;                  /*!< (@ 0x00000144) Receiver timeout.                                          */
  __IM  uint32_t  RESERVED5[46];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for UART.                                        */
    
    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t CTS_STARTRX : 1;           /*!< [3..3] Shortcut between CTS event and STARTRX task.                       */
      __IOM uint32_t NCTS_STOPRX : 1;           /*!< [4..4] Shortcut between NCTS event and STOPRX task.                       */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED6[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t CTS        : 1;            /*!< [0..0] Enable interrupt on CTS event.                                     */
      __IOM uint32_t NCTS       : 1;            /*!< [1..1] Enable interrupt on NCTS event.                                    */
      __IOM uint32_t RXDRDY     : 1;            /*!< [2..2] Enable interrupt on RXRDY event.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t TXDRDY     : 1;            /*!< [7..7] Enable interrupt on TXRDY event.                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERROR      : 1;            /*!< [9..9] Enable interrupt on ERROR event.                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t RXTO       : 1;            /*!< [17..17] Enable interrupt on RXTO event.                                  */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t CTS        : 1;            /*!< [0..0] Disable interrupt on CTS event.                                    */
      __IOM uint32_t NCTS       : 1;            /*!< [1..1] Disable interrupt on NCTS event.                                   */
      __IOM uint32_t RXDRDY     : 1;            /*!< [2..2] Disable interrupt on RXRDY event.                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t TXDRDY     : 1;            /*!< [7..7] Disable interrupt on TXRDY event.                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERROR      : 1;            /*!< [9..9] Disable interrupt on ERROR event.                                  */
      __IM  uint32_t            : 7;
      __IOM uint32_t RXTO       : 1;            /*!< [17..17] Disable interrupt on RXTO event.                                 */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED7[93];
  
  union {
    __IOM uint32_t ERRORSRC;                    /*!< (@ 0x00000480) Error source. Write error field to 1 to clear
                                                                    error.                                                     */
    
    struct {
      __IOM uint32_t OVERRUN    : 1;            /*!< [0..0] A start bit is received while the previous data still
                                                     lies in RXD. (Data loss).                                                 */
      __IOM uint32_t PARITY     : 1;            /*!< [1..1] A character with bad parity is received. Only checked
                                                     if HW parity control is enabled.                                          */
      __IOM uint32_t FRAMING    : 1;            /*!< [2..2] A valid stop bit is not detected on the serial data input
                                                     after all bits in a character have been received.                         */
      __IOM uint32_t BREAK      : 1;            /*!< [3..3] The serial data input is '0' for longer than the length
                                                     of a data frame.                                                          */
    } ERRORSRC_b;
  } ;
  __IM  uint32_t  RESERVED8[31];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable UART and acquire IOs.                               */
    
    struct {
      __IOM uint32_t ENABLE     : 3;            /*!< [2..0] Enable or disable UART and acquire IOs.                            */
    } ENABLE_b;
  } ;
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  PSELRTS;                      /*!< (@ 0x00000508) Pin select for RTS.                                        */
  __IOM uint32_t  PSELTXD;                      /*!< (@ 0x0000050C) Pin select for TXD.                                        */
  __IOM uint32_t  PSELCTS;                      /*!< (@ 0x00000510) Pin select for CTS.                                        */
  __IOM uint32_t  PSELRXD;                      /*!< (@ 0x00000514) Pin select for RXD.                                        */
  
  union {
    __IM  uint32_t RXD;                         /*!< (@ 0x00000518) RXD register. On read action the buffer pointer
                                                                    is displaced. Once read the character is
                                                                    consumed. If read when no character available,
                                                                    the UART will stop working.                                */
    
    struct {
      __IM  uint32_t RXD        : 8;            /*!< [7..0] RX data from previous transfer. Double buffered.                   */
    } RXD_b;
  } ;
  
  union {
    __OM  uint32_t TXD;                         /*!< (@ 0x0000051C) TXD register.                                              */
    
    struct {
      __OM  uint32_t TXD        : 8;            /*!< [7..0] TX data for transfer.                                              */
    } TXD_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t BAUDRATE;                    /*!< (@ 0x00000524) UART Baudrate.                                             */
    
    struct {
      __IOM uint32_t BAUDRATE   : 32;           /*!< [31..0] UART baudrate.                                                    */
    } BAUDRATE_b;
  } ;
  __IM  uint32_t  RESERVED11[17];
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x0000056C) Configuration of parity and hardware flow control
                                                                    register.                                                  */
    
    struct {
      __IOM uint32_t HWFC       : 1;            /*!< [0..0] Hardware flow control.                                             */
      __IOM uint32_t PARITY     : 3;            /*!< [3..1] Include parity bit.                                                */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED12[675];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_UART_Type;                                /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI master 0. (SPI0)
  */

typedef struct {                                /*!< (@ 0x40003000) SPI0 Structure                                             */
  __IM  uint32_t  RESERVED[66];
  __IOM uint32_t  EVENTS_READY;                 /*!< (@ 0x00000108) TXD byte sent and RXD byte received.                       */
  __IM  uint32_t  RESERVED1[126];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t READY      : 1;            /*!< [2..2] Enable interrupt on READY event.                                   */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t READY      : 1;            /*!< [2..2] Disable interrupt on READY event.                                  */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED2[125];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable SPI.                                                */
    
    struct {
      __IOM uint32_t ENABLE     : 3;            /*!< [2..0] Enable or disable SPI.                                             */
    } ENABLE_b;
  } ;
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  PSELSCK;                      /*!< (@ 0x00000508) Pin select for SCK.                                        */
  __IOM uint32_t  PSELMOSI;                     /*!< (@ 0x0000050C) Pin select for MOSI.                                       */
  __IOM uint32_t  PSELMISO;                     /*!< (@ 0x00000510) Pin select for MISO.                                       */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IM  uint32_t RXD;                         /*!< (@ 0x00000518) RX data.                                                   */
    
    struct {
      __IM  uint32_t RXD        : 8;            /*!< [7..0] RX data from last transfer.                                        */
    } RXD_b;
  } ;
  
  union {
    __IOM uint32_t TXD;                         /*!< (@ 0x0000051C) TX data.                                                   */
    
    struct {
      __IOM uint32_t TXD        : 8;            /*!< [7..0] TX data for next transfer.                                         */
    } TXD_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t FREQUENCY;                   /*!< (@ 0x00000524) SPI frequency                                              */
    
    struct {
      __IOM uint32_t FREQUENCY  : 32;           /*!< [31..0] SPI data rate.                                                    */
    } FREQUENCY_b;
  } ;
  __IM  uint32_t  RESERVED6[11];
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000554) Configuration register.                                    */
    
    struct {
      __IOM uint32_t ORDER      : 1;            /*!< [0..0] Bit order.                                                         */
      __IOM uint32_t CPHA       : 1;            /*!< [1..1] Serial clock (SCK) phase.                                          */
      __IOM uint32_t CPOL       : 1;            /*!< [2..2] Serial clock (SCK) polarity.                                       */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED7[681];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_SPI_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           TWI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Two-wire interface master 0. (TWI0)
  */

typedef struct {                                /*!< (@ 0x40003000) TWI0 Structure                                             */
  __OM  uint32_t  TASKS_STARTRX;                /*!< (@ 0x00000000) Start 2-Wire master receive sequence.                      */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STARTTX;                /*!< (@ 0x00000008) Start 2-Wire master transmit sequence.                     */
  __IM  uint32_t  RESERVED1[2];
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000014) Stop 2-Wire transaction.                                   */
  __IM  uint32_t  RESERVED2;
  __OM  uint32_t  TASKS_SUSPEND;                /*!< (@ 0x0000001C) Suspend 2-Wire transaction.                                */
  __OM  uint32_t  TASKS_RESUME;                 /*!< (@ 0x00000020) Resume 2-Wire transaction.                                 */
  __IM  uint32_t  RESERVED3[56];
  __IOM uint32_t  EVENTS_STOPPED;               /*!< (@ 0x00000104) Two-wire stopped.                                          */
  __IOM uint32_t  EVENTS_RXDREADY;              /*!< (@ 0x00000108) Two-wire ready to deliver new RXD byte received.           */
  __IM  uint32_t  RESERVED4[4];
  __IOM uint32_t  EVENTS_TXDSENT;               /*!< (@ 0x0000011C) Two-wire finished sending last TXD byte.                   */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000124) Two-wire error detected.                                   */
  __IM  uint32_t  RESERVED6[4];
  __IOM uint32_t  EVENTS_BB;                    /*!< (@ 0x00000138) Two-wire byte boundary.                                    */
  __IM  uint32_t  RESERVED7[3];
  __IOM uint32_t  EVENTS_SUSPENDED;             /*!< (@ 0x00000148) Two-wire suspended.                                        */
  __IM  uint32_t  RESERVED8[45];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for TWI.                                         */
    
    struct {
      __IOM uint32_t BB_SUSPEND : 1;            /*!< [0..0] Shortcut between BB event and the SUSPEND task.                    */
      __IOM uint32_t BB_STOP    : 1;            /*!< [1..1] Shortcut between BB event and the STOP task.                       */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED9[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t STOPPED    : 1;            /*!< [1..1] Enable interrupt on STOPPED event.                                 */
      __IOM uint32_t RXDREADY   : 1;            /*!< [2..2] Enable interrupt on READY event.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t TXDSENT    : 1;            /*!< [7..7] Enable interrupt on TXDSENT event.                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERROR      : 1;            /*!< [9..9] Enable interrupt on ERROR event.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t BB         : 1;            /*!< [14..14] Enable interrupt on BB event.                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t SUSPENDED  : 1;            /*!< [18..18] Enable interrupt on SUSPENDED event.                             */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t STOPPED    : 1;            /*!< [1..1] Disable interrupt on STOPPED event.                                */
      __IOM uint32_t RXDREADY   : 1;            /*!< [2..2] Disable interrupt on RXDREADY event.                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t TXDSENT    : 1;            /*!< [7..7] Disable interrupt on TXDSENT event.                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERROR      : 1;            /*!< [9..9] Disable interrupt on ERROR event.                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t BB         : 1;            /*!< [14..14] Disable interrupt on BB event.                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t SUSPENDED  : 1;            /*!< [18..18] Disable interrupt on SUSPENDED event.                            */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED10[110];
  
  union {
    __IOM uint32_t ERRORSRC;                    /*!< (@ 0x000004C4) Two-wire error source. Write error field to 1
                                                                    to clear error.                                            */
    
    struct {
      __IOM uint32_t OVERRUN    : 1;            /*!< [0..0] Byte received in RXD register before read of the last
                                                     received byte (data loss).                                                */
      __IOM uint32_t ANACK      : 1;            /*!< [1..1] NACK received after sending the address.                           */
      __IOM uint32_t DNACK      : 1;            /*!< [2..2] NACK received after sending a data byte.                           */
    } ERRORSRC_b;
  } ;
  __IM  uint32_t  RESERVED11[14];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable two-wire master.                                    */
    
    struct {
      __IOM uint32_t ENABLE     : 3;            /*!< [2..0] Enable or disable W2M                                              */
    } ENABLE_b;
  } ;
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  PSELSCL;                      /*!< (@ 0x00000508) Pin select for SCL.                                        */
  __IOM uint32_t  PSELSDA;                      /*!< (@ 0x0000050C) Pin select for SDA.                                        */
  __IM  uint32_t  RESERVED13[2];
  
  union {
    __IM  uint32_t RXD;                         /*!< (@ 0x00000518) RX data register.                                          */
    
    struct {
      __IM  uint32_t RXD        : 8;            /*!< [7..0] RX data from last transfer.                                        */
    } RXD_b;
  } ;
  
  union {
    __IOM uint32_t TXD;                         /*!< (@ 0x0000051C) TX data register.                                          */
    
    struct {
      __IOM uint32_t TXD        : 8;            /*!< [7..0] TX data for next transfer.                                         */
    } TXD_b;
  } ;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint32_t FREQUENCY;                   /*!< (@ 0x00000524) Two-wire frequency.                                        */
    
    struct {
      __IOM uint32_t FREQUENCY  : 32;           /*!< [31..0] Two-wire master clock frequency.                                  */
    } FREQUENCY_b;
  } ;
  __IM  uint32_t  RESERVED15[24];
  
  union {
    __IOM uint32_t ADDRESS;                     /*!< (@ 0x00000588) Address used in the two-wire transfer.                     */
    
    struct {
      __IOM uint32_t ADDRESS    : 7;            /*!< [6..0] Two-wire address.                                                  */
    } ADDRESS_b;
  } ;
  __IM  uint32_t  RESERVED16[668];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_TWI_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           SPIS1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI slave 1. (SPIS1)
  */

typedef struct {                                /*!< (@ 0x40004000) SPIS1 Structure                                            */
  __IM  uint32_t  RESERVED[9];
  __OM  uint32_t  TASKS_ACQUIRE;                /*!< (@ 0x00000024) Acquire SPI semaphore.                                     */
  __OM  uint32_t  TASKS_RELEASE;                /*!< (@ 0x00000028) Release SPI semaphore.                                     */
  __IM  uint32_t  RESERVED1[54];
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000104) Granted transaction completed.                             */
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  EVENTS_ENDRX;                 /*!< (@ 0x00000110) End of RXD buffer reached                                  */
  __IM  uint32_t  RESERVED3[5];
  __IOM uint32_t  EVENTS_ACQUIRED;              /*!< (@ 0x00000128) Semaphore acquired.                                        */
  __IM  uint32_t  RESERVED4[53];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for SPIS.                                        */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t END_ACQUIRE : 1;           /*!< [2..2] Shortcut between END event and the ACQUIRE task.                   */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED5[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t END        : 1;            /*!< [1..1] Enable interrupt on END event.                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t ENDRX      : 1;            /*!< [4..4] enable interrupt on ENDRX event.                                   */
      __IM  uint32_t            : 5;
      __IOM uint32_t ACQUIRED   : 1;            /*!< [10..10] Enable interrupt on ACQUIRED event.                              */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t END        : 1;            /*!< [1..1] Disable interrupt on END event.                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t ENDRX      : 1;            /*!< [4..4] Disable interrupt on ENDRX event.                                  */
      __IM  uint32_t            : 5;
      __IOM uint32_t ACQUIRED   : 1;            /*!< [10..10] Disable interrupt on ACQUIRED event.                             */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED6[61];
  
  union {
    __IM  uint32_t SEMSTAT;                     /*!< (@ 0x00000400) Semaphore status.                                          */
    
    struct {
      __IM  uint32_t SEMSTAT    : 2;            /*!< [1..0] Semaphore status.                                                  */
    } SEMSTAT_b;
  } ;
  __IM  uint32_t  RESERVED7[15];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000440) Status from last transaction.                              */
    
    struct {
      __IOM uint32_t OVERREAD   : 1;            /*!< [0..0] TX buffer overread detected, and prevented.                        */
      __IOM uint32_t OVERFLOW   : 1;            /*!< [1..1] RX buffer overflow detected, and prevented.                        */
    } STATUS_b;
  } ;
  __IM  uint32_t  RESERVED8[47];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable SPIS.                                               */
    
    struct {
      __IOM uint32_t ENABLE     : 3;            /*!< [2..0] Enable or disable SPIS.                                            */
    } ENABLE_b;
  } ;
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  PSELSCK;                      /*!< (@ 0x00000508) Pin select for SCK.                                        */
  __IOM uint32_t  PSELMISO;                     /*!< (@ 0x0000050C) Pin select for MISO.                                       */
  __IOM uint32_t  PSELMOSI;                     /*!< (@ 0x00000510) Pin select for MOSI.                                       */
  __IOM uint32_t  PSELCSN;                      /*!< (@ 0x00000514) Pin select for CSN.                                        */
  __IM  uint32_t  RESERVED10[7];
  __IOM uint32_t  RXDPTR;                       /*!< (@ 0x00000534) RX data pointer.                                           */
  
  union {
    __IOM uint32_t MAXRX;                       /*!< (@ 0x00000538) Maximum number of bytes in the receive buffer.             */
    
    struct {
      __IOM uint32_t MAXRX      : 8;            /*!< [7..0] Maximum number of bytes in the receive buffer.                     */
    } MAXRX_b;
  } ;
  
  union {
    __IM  uint32_t AMOUNTRX;                    /*!< (@ 0x0000053C) Number of bytes received in last granted transaction.      */
    
    struct {
      __IM  uint32_t AMOUNTRX   : 8;            /*!< [7..0] Number of bytes received in last granted transaction.              */
    } AMOUNTRX_b;
  } ;
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  TXDPTR;                       /*!< (@ 0x00000544) TX data pointer.                                           */
  
  union {
    __IOM uint32_t MAXTX;                       /*!< (@ 0x00000548) Maximum number of bytes in the transmit buffer.            */
    
    struct {
      __IOM uint32_t MAXTX      : 8;            /*!< [7..0] Maximum number of bytes in the transmit buffer.                    */
    } MAXTX_b;
  } ;
  
  union {
    __IM  uint32_t AMOUNTTX;                    /*!< (@ 0x0000054C) Number of bytes transmitted in last granted transaction.   */
    
    struct {
      __IM  uint32_t AMOUNTTX   : 8;            /*!< [7..0] Number of bytes transmitted in last granted transaction.           */
    } AMOUNTTX_b;
  } ;
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000554) Configuration register.                                    */
    
    struct {
      __IOM uint32_t ORDER      : 1;            /*!< [0..0] Bit order.                                                         */
      __IOM uint32_t CPHA       : 1;            /*!< [1..1] Serial clock (SCK) phase.                                          */
      __IOM uint32_t CPOL       : 1;            /*!< [2..2] Serial clock (SCK) polarity.                                       */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t DEF;                         /*!< (@ 0x0000055C) Default character.                                         */
    
    struct {
      __IOM uint32_t DEF        : 8;            /*!< [7..0] Default character.                                                 */
    } DEF_b;
  } ;
  __IM  uint32_t  RESERVED14[24];
  
  union {
    __IOM uint32_t ORC;                         /*!< (@ 0x000005C0) Over-read character.                                       */
    
    struct {
      __IOM uint32_t ORC        : 8;            /*!< [7..0] Over-read character.                                               */
    } ORC_b;
  } ;
  __IM  uint32_t  RESERVED15[654];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_SPIS_Type;                                /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          GPIOTE                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO tasks and events. (GPIOTE)
  */

typedef struct {                                /*!< (@ 0x40006000) GPIOTE Structure                                           */
  __OM  uint32_t  TASKS_OUT[4];                 /*!< (@ 0x00000000) Tasks asssociated with GPIOTE channels.                    */
  __IM  uint32_t  RESERVED[60];
  __IOM uint32_t  EVENTS_IN[4];                 /*!< (@ 0x00000100) Tasks asssociated with GPIOTE channels.                    */
  __IM  uint32_t  RESERVED1[27];
  __IOM uint32_t  EVENTS_PORT;                  /*!< (@ 0x0000017C) Event generated from multiple pins.                        */
  __IM  uint32_t  RESERVED2[97];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t IN0        : 1;            /*!< [0..0] Enable interrupt on IN[0] event.                                   */
      __IOM uint32_t IN1        : 1;            /*!< [1..1] Enable interrupt on IN[1] event.                                   */
      __IOM uint32_t IN2        : 1;            /*!< [2..2] Enable interrupt on IN[2] event.                                   */
      __IOM uint32_t IN3        : 1;            /*!< [3..3] Enable interrupt on IN[3] event.                                   */
      __IM  uint32_t            : 27;
      __IOM uint32_t PORT       : 1;            /*!< [31..31] Enable interrupt on PORT event.                                  */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t IN0        : 1;            /*!< [0..0] Disable interrupt on IN[0] event.                                  */
      __IOM uint32_t IN1        : 1;            /*!< [1..1] Disable interrupt on IN[1] event.                                  */
      __IOM uint32_t IN2        : 1;            /*!< [2..2] Disable interrupt on IN[2] event.                                  */
      __IOM uint32_t IN3        : 1;            /*!< [3..3] Disable interrupt on IN[3] event.                                  */
      __IM  uint32_t            : 27;
      __IOM uint32_t PORT       : 1;            /*!< [31..31] Disable interrupt on PORT event.                                 */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[129];
  
  union {
    __IOM uint32_t CONFIG[4];                   /*!< (@ 0x00000510) Channel configuration registers.                           */
    
    struct {
      __IOM uint32_t MODE       : 2;            /*!< [1..0] Mode                                                               */
      __IM  uint32_t            : 6;
      __IOM uint32_t PSEL       : 5;            /*!< [12..8] Pin select.                                                       */
      __IM  uint32_t            : 3;
      __IOM uint32_t POLARITY   : 2;            /*!< [17..16] Effects on output when in Task mode, or events on input
                                                     that generates an event.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t OUTINIT    : 1;            /*!< [20..20] Initial value of the output when the GPIOTE channel
                                                     is configured as a Task.                                                  */
    } CONFIG_b[4];
  } ;
  __IM  uint32_t  RESERVED4[695];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_GPIOTE_Type;                              /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter. (ADC)
  */

typedef struct {                                /*!< (@ 0x40007000) ADC Structure                                              */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start an ADC conversion.                                   */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop ADC.                                                  */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000100) ADC conversion complete.                                   */
  __IM  uint32_t  RESERVED1[128];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t END        : 1;            /*!< [0..0] Enable interrupt on END event.                                     */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t END        : 1;            /*!< [0..0] Disable interrupt on END event.                                    */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED2[61];
  
  union {
    __IM  uint32_t BUSY;                        /*!< (@ 0x00000400) ADC busy register.                                         */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] ADC busy register.                                                 */
    } BUSY_b;
  } ;
  __IM  uint32_t  RESERVED3[63];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) ADC enable.                                                */
    
    struct {
      __IOM uint32_t ENABLE     : 2;            /*!< [1..0] ADC enable.                                                        */
    } ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000504) ADC configuration register.                                */
    
    struct {
      __IOM uint32_t RES        : 2;            /*!< [1..0] ADC resolution.                                                    */
      __IOM uint32_t INPSEL     : 3;            /*!< [4..2] ADC input selection.                                               */
      __IOM uint32_t REFSEL     : 2;            /*!< [6..5] ADC reference selection.                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t PSEL       : 8;            /*!< [15..8] ADC analog pin selection.                                         */
      __IOM uint32_t EXTREFSEL  : 2;            /*!< [17..16] ADC external reference pin selection.                            */
    } CONFIG_b;
  } ;
  
  union {
    __IM  uint32_t RESULT;                      /*!< (@ 0x00000508) Result of ADC conversion.                                  */
    
    struct {
      __IM  uint32_t RESULT     : 10;           /*!< [9..0] Result of ADC conversion.                                          */
    } RESULT_b;
  } ;
  __IM  uint32_t  RESERVED4[700];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_ADC_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer 0. (TIMER0)
  */

typedef struct {                                /*!< (@ 0x40008000) TIMER0 Structure                                           */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start Timer.                                               */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop Timer.                                                */
  __OM  uint32_t  TASKS_COUNT;                  /*!< (@ 0x00000008) Increment Timer (In counter mode).                         */
  __OM  uint32_t  TASKS_CLEAR;                  /*!< (@ 0x0000000C) Clear timer.                                               */
  __OM  uint32_t  TASKS_SHUTDOWN;               /*!< (@ 0x00000010) Shutdown timer.                                            */
  __IM  uint32_t  RESERVED[11];
  __OM  uint32_t  TASKS_CAPTURE[4];             /*!< (@ 0x00000040) Capture Timer value to CC[n] registers.                    */
  __IM  uint32_t  RESERVED1[60];
  __IOM uint32_t  EVENTS_COMPARE[4];            /*!< (@ 0x00000140) Compare event on CC[n] match.                              */
  __IM  uint32_t  RESERVED2[44];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for Timer.                                       */
    
    struct {
      __IOM uint32_t COMPARE0_CLEAR : 1;        /*!< [0..0] Shortcut between CC[0] event and the CLEAR task.                   */
      __IOM uint32_t COMPARE1_CLEAR : 1;        /*!< [1..1] Shortcut between CC[1] event and the CLEAR task.                   */
      __IOM uint32_t COMPARE2_CLEAR : 1;        /*!< [2..2] Shortcut between CC[2] event and the CLEAR task.                   */
      __IOM uint32_t COMPARE3_CLEAR : 1;        /*!< [3..3] Shortcut between CC[3] event and the CLEAR task.                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t COMPARE0_STOP : 1;         /*!< [8..8] Shortcut between CC[0] event and the STOP task.                    */
      __IOM uint32_t COMPARE1_STOP : 1;         /*!< [9..9] Shortcut between CC[1] event and the STOP task.                    */
      __IOM uint32_t COMPARE2_STOP : 1;         /*!< [10..10] Shortcut between CC[2] event and the STOP task.                  */
      __IOM uint32_t COMPARE3_STOP : 1;         /*!< [11..11] Shortcut between CC[3] event and the STOP task.                  */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED3[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Enable interrupt on COMPARE[0]                                   */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Enable interrupt on COMPARE[1]                                   */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Enable interrupt on COMPARE[2]                                   */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Enable interrupt on COMPARE[3]                                   */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Disable interrupt on COMPARE[0]                                  */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Disable interrupt on COMPARE[1]                                  */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Disable interrupt on COMPARE[2]                                  */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Disable interrupt on COMPARE[3]                                  */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED4[126];
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000504) Timer Mode selection.                                      */
    
    struct {
      __IOM uint32_t MODE       : 1;            /*!< [0..0] Select Normal or Counter mode.                                     */
    } MODE_b;
  } ;
  
  union {
    __IOM uint32_t BITMODE;                     /*!< (@ 0x00000508) Sets timer behaviour.                                      */
    
    struct {
      __IOM uint32_t BITMODE    : 2;            /*!< [1..0] Sets timer behaviour ro be like the implementation of
                                                     a timer with width as indicated.                                          */
    } BITMODE_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t PRESCALER;                   /*!< (@ 0x00000510) 4-bit prescaler to source clock frequency (max
                                                                    value 9). Source clock frequency is divided
                                                                    by 2^SCALE.                                                */
    
    struct {
      __IOM uint32_t PRESCALER  : 4;            /*!< [3..0] Timer PRESCALER value. Max value is 9.                             */
    } PRESCALER_b;
  } ;
  __IM  uint32_t  RESERVED6[11];
  __IOM uint32_t  CC[4];                        /*!< (@ 0x00000540) Capture/compare registers.                                 */
  __IM  uint32_t  RESERVED7[683];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_TIMER_Type;                               /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           RTC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real time counter 0. (RTC0)
  */

typedef struct {                                /*!< (@ 0x4000B000) RTC0 Structure                                             */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start RTC Counter.                                         */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop RTC Counter.                                          */
  __OM  uint32_t  TASKS_CLEAR;                  /*!< (@ 0x00000008) Clear RTC Counter.                                         */
  __OM  uint32_t  TASKS_TRIGOVRFLW;             /*!< (@ 0x0000000C) Set COUNTER to 0xFFFFFFF0.                                 */
  __IM  uint32_t  RESERVED[60];
  __IOM uint32_t  EVENTS_TICK;                  /*!< (@ 0x00000100) Event on COUNTER increment.                                */
  __IOM uint32_t  EVENTS_OVRFLW;                /*!< (@ 0x00000104) Event on COUNTER overflow.                                 */
  __IM  uint32_t  RESERVED1[14];
  __IOM uint32_t  EVENTS_COMPARE[4];            /*!< (@ 0x00000140) Compare event on CC[n] match.                              */
  __IM  uint32_t  RESERVED2[109];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t TICK       : 1;            /*!< [0..0] Enable interrupt on TICK event.                                    */
      __IOM uint32_t OVRFLW     : 1;            /*!< [1..1] Enable interrupt on OVRFLW event.                                  */
      __IM  uint32_t            : 14;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Enable interrupt on COMPARE[0] event.                            */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Enable interrupt on COMPARE[1] event.                            */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Enable interrupt on COMPARE[2] event.                            */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Enable interrupt on COMPARE[3] event.                            */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t TICK       : 1;            /*!< [0..0] Disable interrupt on TICK event.                                   */
      __IOM uint32_t OVRFLW     : 1;            /*!< [1..1] Disable interrupt on OVRFLW event.                                 */
      __IM  uint32_t            : 14;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Disable interrupt on COMPARE[0] event.                           */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Disable interrupt on COMPARE[1] event.                           */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Disable interrupt on COMPARE[2] event.                           */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Disable interrupt on COMPARE[3] event.                           */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[13];
  
  union {
    __IOM uint32_t EVTEN;                       /*!< (@ 0x00000340) Configures event enable routing to PPI for each
                                                                    RTC event.                                                 */
    
    struct {
      __IOM uint32_t TICK       : 1;            /*!< [0..0] TICK event enable.                                                 */
      __IOM uint32_t OVRFLW     : 1;            /*!< [1..1] OVRFLW event enable.                                               */
      __IM  uint32_t            : 14;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] COMPARE[0] event enable.                                         */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] COMPARE[1] event enable.                                         */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] COMPARE[2] event enable.                                         */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] COMPARE[3] event enable.                                         */
    } EVTEN_b;
  } ;
  
  union {
    __IOM uint32_t EVTENSET;                    /*!< (@ 0x00000344) Enable events routing to PPI. The reading of
                                                                    this register gives the value of EVTEN.                    */
    
    struct {
      __IOM uint32_t TICK       : 1;            /*!< [0..0] Enable routing to PPI of TICK event.                               */
      __IOM uint32_t OVRFLW     : 1;            /*!< [1..1] Enable routing to PPI of OVRFLW event.                             */
      __IM  uint32_t            : 14;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Enable routing to PPI of COMPARE[0] event.                       */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Enable routing to PPI of COMPARE[1] event.                       */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Enable routing to PPI of COMPARE[2] event.                       */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Enable routing to PPI of COMPARE[3] event.                       */
    } EVTENSET_b;
  } ;
  
  union {
    __IOM uint32_t EVTENCLR;                    /*!< (@ 0x00000348) Disable events routing to PPI. The reading of
                                                                    this register gives the value of EVTEN.                    */
    
    struct {
      __IOM uint32_t TICK       : 1;            /*!< [0..0] Disable routing to PPI of TICK event.                              */
      __IOM uint32_t OVRFLW     : 1;            /*!< [1..1] Disable routing to PPI of OVRFLW event.                            */
      __IM  uint32_t            : 14;
      __IOM uint32_t COMPARE0   : 1;            /*!< [16..16] Disable routing to PPI of COMPARE[0] event.                      */
      __IOM uint32_t COMPARE1   : 1;            /*!< [17..17] Disable routing to PPI of COMPARE[1] event.                      */
      __IOM uint32_t COMPARE2   : 1;            /*!< [18..18] Disable routing to PPI of COMPARE[2] event.                      */
      __IOM uint32_t COMPARE3   : 1;            /*!< [19..19] Disable routing to PPI of COMPARE[3] event.                      */
    } EVTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED4[110];
  
  union {
    __IM  uint32_t COUNTER;                     /*!< (@ 0x00000504) Current COUNTER value.                                     */
    
    struct {
      __IM  uint32_t COUNTER    : 24;           /*!< [23..0] Counter value.                                                    */
    } COUNTER_b;
  } ;
  
  union {
    __IOM uint32_t PRESCALER;                   /*!< (@ 0x00000508) 12-bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).
                                                                    Must be written when RTC is STOPed.                        */
    
    struct {
      __IOM uint32_t PRESCALER  : 12;           /*!< [11..0] RTC PRESCALER value.                                              */
    } PRESCALER_b;
  } ;
  __IM  uint32_t  RESERVED5[13];
  
  union {
    __IOM uint32_t CC[4];                       /*!< (@ 0x00000540) Capture/compare registers.                                 */
    
    struct {
      __IOM uint32_t COMPARE    : 24;           /*!< [23..0] Compare value.                                                    */
    } CC_b[4];
  } ;
  __IM  uint32_t  RESERVED6[683];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_RTC_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           TEMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Temperature Sensor. (TEMP)
  */

typedef struct {                                /*!< (@ 0x4000C000) TEMP Structure                                             */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start temperature measurement.                             */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop temperature measurement.                              */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_DATARDY;               /*!< (@ 0x00000100) Temperature measurement complete, data ready
                                                                    event.                                                     */
  __IM  uint32_t  RESERVED1[128];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t DATARDY    : 1;            /*!< [0..0] Enable interrupt on DATARDY event.                                 */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t DATARDY    : 1;            /*!< [0..0] Disable interrupt on DATARDY event.                                */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED2[127];
  __IM  int32_t   TEMP;                         /*!< (@ 0x00000508) Die temperature in degC, 2's complement format,
                                                                    0.25 degC pecision.                                        */
  __IM  uint32_t  RESERVED3[700];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_TEMP_Type;                                /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator. (RNG)
  */

typedef struct {                                /*!< (@ 0x4000D000) RNG Structure                                              */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the random number generator.                         */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop the random number generator.                          */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_VALRDY;                /*!< (@ 0x00000100) New random number generated and written to VALUE
                                                                    register.                                                  */
  __IM  uint32_t  RESERVED1[63];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for the RNG.                                     */
    
    struct {
      __IOM uint32_t VALRDY_STOP : 1;           /*!< [0..0] Shortcut between VALRDY event and STOP task.                       */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED2[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register                              */
    
    struct {
      __IOM uint32_t VALRDY     : 1;            /*!< [0..0] Enable interrupt on VALRDY event.                                  */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register                            */
    
    struct {
      __IOM uint32_t VALRDY     : 1;            /*!< [0..0] Disable interrupt on VALRDY event.                                 */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[126];
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000504) Configuration register.                                    */
    
    struct {
      __IOM uint32_t DERCEN     : 1;            /*!< [0..0] Digital error correction enable.                                   */
    } CONFIG_b;
  } ;
  
  union {
    __IM  uint32_t VALUE;                       /*!< (@ 0x00000508) RNG random number.                                         */
    
    struct {
      __IM  uint32_t VALUE      : 8;            /*!< [7..0] Generated random number.                                           */
    } VALUE_b;
  } ;
  __IM  uint32_t  RESERVED4[700];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_RNG_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES ECB Mode Encryption. (ECB)
  */

typedef struct {                                /*!< (@ 0x4000E000) ECB Structure                                              */
  __OM  uint32_t  TASKS_STARTECB;               /*!< (@ 0x00000000) Start ECB block encrypt. If a crypto operation
                                                                    is running, this will not initiate a new
                                                                    encryption and the ERRORECB event will be
                                                                    triggered.                                                 */
  __OM  uint32_t  TASKS_STOPECB;                /*!< (@ 0x00000004) Stop current ECB encryption. If a crypto operation
                                                                    is running, this will will trigger the ERRORECB
                                                                    event.                                                     */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_ENDECB;                /*!< (@ 0x00000100) ECB block encrypt complete.                                */
  __IOM uint32_t  EVENTS_ERRORECB;              /*!< (@ 0x00000104) ECB block encrypt aborted due to a STOPECB task
                                                                    or due to an error.                                        */
  __IM  uint32_t  RESERVED1[127];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t ENDECB     : 1;            /*!< [0..0] Enable interrupt on ENDECB event.                                  */
      __IOM uint32_t ERRORECB   : 1;            /*!< [1..1] Enable interrupt on ERRORECB event.                                */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t ENDECB     : 1;            /*!< [0..0] Disable interrupt on ENDECB event.                                 */
      __IOM uint32_t ERRORECB   : 1;            /*!< [1..1] Disable interrupt on ERRORECB event.                               */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED2[126];
  __IOM uint32_t  ECBDATAPTR;                   /*!< (@ 0x00000504) ECB block encrypt memory pointer.                          */
  __IM  uint32_t  RESERVED3[701];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_ECB_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Accelerated Address Resolver. (AAR)
  */

typedef struct {                                /*!< (@ 0x4000F000) AAR Structure                                              */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified
                                                                    in the IRK data structure.                                 */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop resolving addresses.                                  */
  __IM  uint32_t  RESERVED1[61];
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000100) Address resolution procedure completed.                    */
  __IOM uint32_t  EVENTS_RESOLVED;              /*!< (@ 0x00000104) Address resolved.                                          */
  __IOM uint32_t  EVENTS_NOTRESOLVED;           /*!< (@ 0x00000108) Address not resolved.                                      */
  __IM  uint32_t  RESERVED2[126];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t END        : 1;            /*!< [0..0] Enable interrupt on END event.                                     */
      __IOM uint32_t RESOLVED   : 1;            /*!< [1..1] Enable interrupt on RESOLVED event.                                */
      __IOM uint32_t NOTRESOLVED : 1;           /*!< [2..2] Enable interrupt on NOTRESOLVED event.                             */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t END        : 1;            /*!< [0..0] Disable interrupt on ENDKSGEN event.                               */
      __IOM uint32_t RESOLVED   : 1;            /*!< [1..1] Disable interrupt on RESOLVED event.                               */
      __IOM uint32_t NOTRESOLVED : 1;           /*!< [2..2] Disable interrupt on NOTRESOLVED event.                            */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[61];
  
  union {
    __IM  uint32_t STATUS;                      /*!< (@ 0x00000400) Resolution status.                                         */
    
    struct {
      __IM  uint32_t STATUS     : 4;            /*!< [3..0] The IRK used last time an address was resolved.                    */
    } STATUS_b;
  } ;
  __IM  uint32_t  RESERVED4[63];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable AAR.                                                */
    
    struct {
      __IOM uint32_t ENABLE     : 2;            /*!< [1..0] Enable AAR.                                                        */
    } ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t NIRK;                        /*!< (@ 0x00000504) Number of Identity root Keys in the IRK data
                                                                    structure.                                                 */
    
    struct {
      __IOM uint32_t NIRK       : 5;            /*!< [4..0] Number of Identity root Keys in the IRK data structure.            */
    } NIRK_b;
  } ;
  __IOM uint32_t  IRKPTR;                       /*!< (@ 0x00000508) Pointer to the IRK data structure.                         */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  ADDRPTR;                      /*!< (@ 0x00000510) Pointer to the resolvable address (6 bytes).               */
  __IOM uint32_t  SCRATCHPTR;                   /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
                                                                    storage during resolution. A minimum of
                                                                    3 bytes must be reserved.                                  */
  __IM  uint32_t  RESERVED6[697];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_AAR_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES CCM Mode Encryption. (CCM)
  */

typedef struct {                                /*!< (@ 0x4000F000) CCM Structure                                              */
  __OM  uint32_t  TASKS_KSGEN;                  /*!< (@ 0x00000000) Start generation of key-stream. This operation
                                                                    will stop by itself when completed.                        */
  __OM  uint32_t  TASKS_CRYPT;                  /*!< (@ 0x00000004) Start encrypt/decrypt. This operation will stop
                                                                    by itself when completed.                                  */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop encrypt/decrypt.                                      */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_ENDKSGEN;              /*!< (@ 0x00000100) Keystream generation completed.                            */
  __IOM uint32_t  EVENTS_ENDCRYPT;              /*!< (@ 0x00000104) Encrypt/decrypt completed.                                 */
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000108) Error happened.                                            */
  __IM  uint32_t  RESERVED1[61];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for the CCM.                                     */
    
    struct {
      __IOM uint32_t ENDKSGEN_CRYPT : 1;        /*!< [0..0] Shortcut between ENDKSGEN event and CRYPT task.                    */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED2[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t ENDKSGEN   : 1;            /*!< [0..0] Enable interrupt on ENDKSGEN event.                                */
      __IOM uint32_t ENDCRYPT   : 1;            /*!< [1..1] Enable interrupt on ENDCRYPT event.                                */
      __IOM uint32_t ERROR      : 1;            /*!< [2..2] Enable interrupt on ERROR event.                                   */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t ENDKSGEN   : 1;            /*!< [0..0] Disable interrupt on ENDKSGEN event.                               */
      __IOM uint32_t ENDCRYPT   : 1;            /*!< [1..1] Disable interrupt on ENDCRYPT event.                               */
      __IOM uint32_t ERROR      : 1;            /*!< [2..2] Disable interrupt on ERROR event.                                  */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[61];
  
  union {
    __IM  uint32_t MICSTATUS;                   /*!< (@ 0x00000400) CCM RX MIC check result.                                   */
    
    struct {
      __IM  uint32_t MICSTATUS  : 1;            /*!< [0..0] Result of the MIC check performed during the previous
                                                     CCM RX STARTCRYPT                                                         */
    } MICSTATUS_b;
  } ;
  __IM  uint32_t  RESERVED4[63];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) CCM enable.                                                */
    
    struct {
      __IOM uint32_t ENABLE     : 2;            /*!< [1..0] CCM enable.                                                        */
    } ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000504) Operation mode.                                            */
    
    struct {
      __IOM uint32_t MODE       : 1;            /*!< [0..0] CCM mode operation.                                                */
    } MODE_b;
  } ;
  __IOM uint32_t  CNFPTR;                       /*!< (@ 0x00000508) Pointer to a data structure holding AES key and
                                                                    NONCE vector.                                              */
  __IOM uint32_t  INPTR;                        /*!< (@ 0x0000050C) Pointer to the input packet.                               */
  __IOM uint32_t  OUTPTR;                       /*!< (@ 0x00000510) Pointer to the output packet.                              */
  __IOM uint32_t  SCRATCHPTR;                   /*!< (@ 0x00000514) Pointer to a scratch data area used for temporary
                                                                    storage during resolution. A minimum of
                                                                    43 bytes must be reserved.                                 */
  __IM  uint32_t  RESERVED5[697];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_CCM_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer. (WDT)
  */

typedef struct {                                /*!< (@ 0x40010000) WDT Structure                                              */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the watchdog.                                        */
  __IM  uint32_t  RESERVED[63];
  __IOM uint32_t  EVENTS_TIMEOUT;               /*!< (@ 0x00000100) Watchdog timeout.                                          */
  __IM  uint32_t  RESERVED1[128];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t TIMEOUT    : 1;            /*!< [0..0] Enable interrupt on TIMEOUT event.                                 */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t TIMEOUT    : 1;            /*!< [0..0] Disable interrupt on TIMEOUT event.                                */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED2[61];
  
  union {
    __IM  uint32_t RUNSTATUS;                   /*!< (@ 0x00000400) Watchdog running status.                                   */
    
    struct {
      __IM  uint32_t RUNSTATUS  : 1;            /*!< [0..0] Watchdog running status.                                           */
    } RUNSTATUS_b;
  } ;
  
  union {
    __IM  uint32_t REQSTATUS;                   /*!< (@ 0x00000404) Request status.                                            */
    
    struct {
      __IM  uint32_t RR0        : 1;            /*!< [0..0] Request status for RR[0].                                          */
      __IM  uint32_t RR1        : 1;            /*!< [1..1] Request status for RR[1].                                          */
      __IM  uint32_t RR2        : 1;            /*!< [2..2] Request status for RR[2].                                          */
      __IM  uint32_t RR3        : 1;            /*!< [3..3] Request status for RR[3].                                          */
      __IM  uint32_t RR4        : 1;            /*!< [4..4] Request status for RR[4].                                          */
      __IM  uint32_t RR5        : 1;            /*!< [5..5] Request status for RR[5].                                          */
      __IM  uint32_t RR6        : 1;            /*!< [6..6] Request status for RR[6].                                          */
      __IM  uint32_t RR7        : 1;            /*!< [7..7] Request status for RR[7].                                          */
    } REQSTATUS_b;
  } ;
  __IM  uint32_t  RESERVED3[63];
  __IOM uint32_t  CRV;                          /*!< (@ 0x00000504) Counter reload value in number of 32kiHz clock
                                                                    cycles.                                                    */
  
  union {
    __IOM uint32_t RREN;                        /*!< (@ 0x00000508) Reload request enable.                                     */
    
    struct {
      __IOM uint32_t RR0        : 1;            /*!< [0..0] Enable or disable RR[0] register.                                  */
      __IOM uint32_t RR1        : 1;            /*!< [1..1] Enable or disable RR[1] register.                                  */
      __IOM uint32_t RR2        : 1;            /*!< [2..2] Enable or disable RR[2] register.                                  */
      __IOM uint32_t RR3        : 1;            /*!< [3..3] Enable or disable RR[3] register.                                  */
      __IOM uint32_t RR4        : 1;            /*!< [4..4] Enable or disable RR[4] register.                                  */
      __IOM uint32_t RR5        : 1;            /*!< [5..5] Enable or disable RR[5] register.                                  */
      __IOM uint32_t RR6        : 1;            /*!< [6..6] Enable or disable RR[6] register.                                  */
      __IOM uint32_t RR7        : 1;            /*!< [7..7] Enable or disable RR[7] register.                                  */
    } RREN_b;
  } ;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x0000050C) Configuration register.                                    */
    
    struct {
      __IOM uint32_t SLEEP      : 1;            /*!< [0..0] Configure the watchdog to pause or not while the CPU
                                                     is sleeping.                                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t HALT       : 1;            /*!< [3..3] Configure the watchdog to pause or not while the CPU
                                                     is halted by the debugger.                                                */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED4[60];
  
  union {
    __OM  uint32_t RR[8];                       /*!< (@ 0x00000600) Reload requests registers.                                 */
    
    struct {
      __OM  uint32_t RR         : 32;           /*!< [31..0] Reload register.                                                  */
    } RR_b[8];
  } ;
  __IM  uint32_t  RESERVED5[631];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_WDT_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           QDEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Rotary decoder. (QDEC)
  */

typedef struct {                                /*!< (@ 0x40012000) QDEC Structure                                             */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the quadrature decoder.                              */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop the quadrature decoder.                               */
  __OM  uint32_t  TASKS_READCLRACC;             /*!< (@ 0x00000008) Transfers the content from ACC registers to ACCREAD
                                                                    registers, and clears the ACC registers.                   */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_SAMPLERDY;             /*!< (@ 0x00000100) A new sample is written to the sample register.            */
  __IOM uint32_t  EVENTS_REPORTRDY;             /*!< (@ 0x00000104) REPORTPER number of samples accumulated in ACC
                                                                    register, and ACC register different than
                                                                    zero.                                                      */
  __IOM uint32_t  EVENTS_ACCOF;                 /*!< (@ 0x00000108) ACC or ACCDBL register overflow.                           */
  __IM  uint32_t  RESERVED1[61];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for the QDEC.                                    */
    
    struct {
      __IOM uint32_t REPORTRDY_READCLRACC : 1;  /*!< [0..0] Shortcut between REPORTRDY event and READCLRACC task.              */
      __IOM uint32_t SAMPLERDY_STOP : 1;        /*!< [1..1] Shortcut between SAMPLERDY event and STOP task.                    */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED2[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t SAMPLERDY  : 1;            /*!< [0..0] Enable interrupt on SAMPLERDY event.                               */
      __IOM uint32_t REPORTRDY  : 1;            /*!< [1..1] Enable interrupt on REPORTRDY event.                               */
      __IOM uint32_t ACCOF      : 1;            /*!< [2..2] Enable interrupt on ACCOF event.                                   */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t SAMPLERDY  : 1;            /*!< [0..0] Disable interrupt on SAMPLERDY event.                              */
      __IOM uint32_t REPORTRDY  : 1;            /*!< [1..1] Disable interrupt on REPORTRDY event.                              */
      __IOM uint32_t ACCOF      : 1;            /*!< [2..2] Disable interrupt on ACCOF event.                                  */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[125];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable the QDEC.                                           */
    
    struct {
      __IOM uint32_t ENABLE     : 1;            /*!< [0..0] Enable or disable QDEC.                                            */
    } ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t LEDPOL;                      /*!< (@ 0x00000504) LED output pin polarity.                                   */
    
    struct {
      __IOM uint32_t LEDPOL     : 1;            /*!< [0..0] LED output pin polarity.                                           */
    } LEDPOL_b;
  } ;
  
  union {
    __IOM uint32_t SAMPLEPER;                   /*!< (@ 0x00000508) Sample period.                                             */
    
    struct {
      __IOM uint32_t SAMPLEPER  : 3;            /*!< [2..0] Sample period.                                                     */
    } SAMPLEPER_b;
  } ;
  
  union {
    __IM  int32_t SAMPLE;                       /*!< (@ 0x0000050C) Motion sample value.                                       */
    
    struct {
      __IM  uint32_t SAMPLE     : 32;           /*!< [31..0] Last sample taken in compliment to 2.                             */
    } SAMPLE_b;
  } ;
  
  union {
    __IOM uint32_t REPORTPER;                   /*!< (@ 0x00000510) Number of samples to generate an EVENT_REPORTRDY.          */
    
    struct {
      __IOM uint32_t REPORTPER  : 3;            /*!< [2..0] Number of samples to generate an EVENT_REPORTRDY.                  */
    } REPORTPER_b;
  } ;
  __IM  int32_t   ACC;                          /*!< (@ 0x00000514) Accumulated valid transitions register.                    */
  __IM  int32_t   ACCREAD;                      /*!< (@ 0x00000518) Snapshot of ACC register. Value generated by
                                                                    the TASKS_READCLEACC task.                                 */
  __IOM uint32_t  PSELLED;                      /*!< (@ 0x0000051C) Pin select for LED output.                                 */
  __IOM uint32_t  PSELA;                        /*!< (@ 0x00000520) Pin select for phase A input.                              */
  __IOM uint32_t  PSELB;                        /*!< (@ 0x00000524) Pin select for phase B input.                              */
  
  union {
    __IOM uint32_t DBFEN;                       /*!< (@ 0x00000528) Enable debouncer input filters.                            */
    
    struct {
      __IOM uint32_t DBFEN      : 1;            /*!< [0..0] Enable debounce input filters.                                     */
    } DBFEN_b;
  } ;
  __IM  uint32_t  RESERVED4[5];
  
  union {
    __IOM uint32_t LEDPRE;                      /*!< (@ 0x00000540) Time LED is switched ON before the sample.                 */
    
    struct {
      __IOM uint32_t LEDPRE     : 9;            /*!< [8..0] Period in us the LED in switched on prior to sampling.             */
    } LEDPRE_b;
  } ;
  
  union {
    __IM  uint32_t ACCDBL;                      /*!< (@ 0x00000544) Accumulated double (error) transitions register.           */
    
    struct {
      __IM  uint32_t ACCDBL     : 4;            /*!< [3..0] Accumulated double (error) transitions.                            */
    } ACCDBL_b;
  } ;
  
  union {
    __IM  uint32_t ACCDBLREAD;                  /*!< (@ 0x00000548) Snapshot of ACCDBL register. Value generated
                                                                    by the TASKS_READCLEACC task.                              */
    
    struct {
      __IM  uint32_t ACCDBLREAD : 4;            /*!< [3..0] Snapshot of accumulated double (error) transitions.                */
    } ACCDBLREAD_b;
  } ;
  __IM  uint32_t  RESERVED5[684];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_QDEC_Type;                                /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          LPCOMP                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Low power comparator. (LPCOMP)
  */

typedef struct {                                /*!< (@ 0x40013000) LPCOMP Structure                                           */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the comparator.                                      */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop the comparator.                                       */
  __OM  uint32_t  TASKS_SAMPLE;                 /*!< (@ 0x00000008) Sample comparator value.                                   */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_READY;                 /*!< (@ 0x00000100) LPCOMP is ready and output is valid.                       */
  __IOM uint32_t  EVENTS_DOWN;                  /*!< (@ 0x00000104) Input voltage crossed the threshold going down.            */
  __IOM uint32_t  EVENTS_UP;                    /*!< (@ 0x00000108) Input voltage crossed the threshold going up.              */
  __IOM uint32_t  EVENTS_CROSS;                 /*!< (@ 0x0000010C) Input voltage crossed the threshold in any direction.      */
  __IM  uint32_t  RESERVED1[60];
  
  union {
    __IOM uint32_t SHORTS;                      /*!< (@ 0x00000200) Shortcuts for the LPCOMP.                                  */
    
    struct {
      __IOM uint32_t READY_SAMPLE : 1;          /*!< [0..0] Shortcut between READY event and SAMPLE task.                      */
      __IOM uint32_t READY_STOP : 1;            /*!< [1..1] Shortcut between RADY event and STOP task.                         */
      __IOM uint32_t DOWN_STOP  : 1;            /*!< [2..2] Shortcut between DOWN event and STOP task.                         */
      __IOM uint32_t UP_STOP    : 1;            /*!< [3..3] Shortcut between UP event and STOP task.                           */
      __IOM uint32_t CROSS_STOP : 1;            /*!< [4..4] Shortcut between CROSS event and STOP task.                        */
    } SHORTS_b;
  } ;
  __IM  uint32_t  RESERVED2[64];
  
  union {
    __IOM uint32_t INTENSET;                    /*!< (@ 0x00000304) Interrupt enable set register.                             */
    
    struct {
      __IOM uint32_t READY      : 1;            /*!< [0..0] Enable interrupt on READY event.                                   */
      __IOM uint32_t DOWN       : 1;            /*!< [1..1] Enable interrupt on DOWN event.                                    */
      __IOM uint32_t UP         : 1;            /*!< [2..2] Enable interrupt on UP event.                                      */
      __IOM uint32_t CROSS      : 1;            /*!< [3..3] Enable interrupt on CROSS event.                                   */
    } INTENSET_b;
  } ;
  
  union {
    __IOM uint32_t INTENCLR;                    /*!< (@ 0x00000308) Interrupt enable clear register.                           */
    
    struct {
      __IOM uint32_t READY      : 1;            /*!< [0..0] Disable interrupt on READY event.                                  */
      __IOM uint32_t DOWN       : 1;            /*!< [1..1] Disable interrupt on DOWN event.                                   */
      __IOM uint32_t UP         : 1;            /*!< [2..2] Disable interrupt on UP event.                                     */
      __IOM uint32_t CROSS      : 1;            /*!< [3..3] Disable interrupt on CROSS event.                                  */
    } INTENCLR_b;
  } ;
  __IM  uint32_t  RESERVED3[61];
  
  union {
    __IM  uint32_t RESULT;                      /*!< (@ 0x00000400) Result of last compare.                                    */
    
    struct {
      __IM  uint32_t RESULT     : 1;            /*!< [0..0] Result of last compare. Decision point SAMPLE task.                */
    } RESULT_b;
  } ;
  __IM  uint32_t  RESERVED4[63];
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000500) Enable the LPCOMP.                                         */
    
    struct {
      __IOM uint32_t ENABLE     : 2;            /*!< [1..0] Enable or disable LPCOMP.                                          */
    } ENABLE_b;
  } ;
  
  union {
    __IOM uint32_t PSEL;                        /*!< (@ 0x00000504) Input pin select.                                          */
    
    struct {
      __IOM uint32_t PSEL       : 3;            /*!< [2..0] Analog input pin select.                                           */
    } PSEL_b;
  } ;
  
  union {
    __IOM uint32_t REFSEL;                      /*!< (@ 0x00000508) Reference select.                                          */
    
    struct {
      __IOM uint32_t REFSEL     : 3;            /*!< [2..0] Reference select.                                                  */
    } REFSEL_b;
  } ;
  
  union {
    __IOM uint32_t EXTREFSEL;                   /*!< (@ 0x0000050C) External reference select.                                 */
    
    struct {
      __IOM uint32_t EXTREFSEL  : 1;            /*!< [0..0] External analog reference pin selection.                           */
    } EXTREFSEL_b;
  } ;
  __IM  uint32_t  RESERVED5[4];
  
  union {
    __IOM uint32_t ANADETECT;                   /*!< (@ 0x00000520) Analog detect configuration.                               */
    
    struct {
      __IOM uint32_t ANADETECT  : 2;            /*!< [1..0] Analog detect configuration.                                       */
    } ANADETECT_b;
  } ;
  __IM  uint32_t  RESERVED6[694];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000FFC) Peripheral power control.                                  */
    
    struct {
      __IOM uint32_t POWER      : 1;            /*!< [0..0] Peripheral power control.                                          */
    } POWER_b;
  } ;
} NRF_LPCOMP_Type;                              /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SW Interrupts. (SWI)
  */

typedef struct {                                /*!< (@ 0x40014000) SWI Structure                                              */
  __IM  uint32_t  UNUSED;                       /*!< (@ 0x00000000) Unused.                                                    */
} NRF_SWI_Type;                                 /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           NVMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Non Volatile Memory Controller. (NVMC)
  */

typedef struct {                                /*!< (@ 0x4001E000) NVMC Structure                                             */
  __IM  uint32_t  RESERVED[256];
  
  union {
    __IM  uint32_t READY;                       /*!< (@ 0x00000400) Ready flag.                                                */
    
    struct {
      __IM  uint32_t READY      : 1;            /*!< [0..0] NVMC ready.                                                        */
    } READY_b;
  } ;
  __IM  uint32_t  RESERVED1[64];
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000504) Configuration register.                                    */
    
    struct {
      __IOM uint32_t WEN        : 2;            /*!< [1..0] Program write enable.                                              */
    } CONFIG_b;
  } ;
  
  union {
    __IOM uint32_t ERASEPAGE;                   /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
                                                                    memory page.                                               */
    __IOM uint32_t ERASEPCR1;                   /*!< (@ 0x00000508) Register for erasing a non-protected non-volatile
                                                                    memory page.                                               */
  };
  
  union {
    __IOM uint32_t ERASEALL;                    /*!< (@ 0x0000050C) Register for erasing all non-volatile user memory.         */
    
    struct {
      __IOM uint32_t ERASEALL   : 1;            /*!< [0..0] Starts the erasing of all user NVM (code region 0/1 and
                                                     UICR registers).                                                          */
    } ERASEALL_b;
  } ;
  __IOM uint32_t  ERASEPCR0;                    /*!< (@ 0x00000510) Register for erasing a protected non-volatile
                                                                    memory page.                                               */
  
  union {
    __IOM uint32_t ERASEUICR;                   /*!< (@ 0x00000514) Register for start erasing User Information Congfiguration
                                                                    Registers.                                                 */
    
    struct {
      __IOM uint32_t ERASEUICR  : 1;            /*!< [0..0] It can only be used when all contents of code region
                                                     1 are erased.                                                             */
    } ERASEUICR_b;
  } ;
} NRF_NVMC_Type;                                /*!< Size = 1304 (0x518)                                                       */



/* =========================================================================================================================== */
/* ================                                            PPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PPI controller. (PPI)
  */

typedef struct {                                /*!< (@ 0x4001F000) PPI Structure                                              */
  __IOM PPI_TASKS_CHG_Type TASKS_CHG[4];        /*!< (@ 0x00000000) Channel group tasks.                                       */
  __IM  uint32_t  RESERVED[312];
  
  union {
    __IOM uint32_t CHEN;                        /*!< (@ 0x00000500) Channel enable.                                            */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Enable PPI channel 0.                                              */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Enable PPI channel 1.                                              */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Enable PPI channel 2.                                              */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Enable PPI channel 3.                                              */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Enable PPI channel 4.                                              */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Enable PPI channel 5.                                              */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Enable PPI channel 6.                                              */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Enable PPI channel 7.                                              */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Enable PPI channel 8.                                              */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Enable PPI channel 9.                                              */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Enable PPI channel 10.                                           */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Enable PPI channel 11.                                           */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Enable PPI channel 12.                                           */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Enable PPI channel 13.                                           */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Enable PPI channel 14.                                           */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Enable PPI channel 15.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t CH20       : 1;            /*!< [20..20] Enable PPI channel 20.                                           */
      __IOM uint32_t CH21       : 1;            /*!< [21..21] Enable PPI channel 21.                                           */
      __IOM uint32_t CH22       : 1;            /*!< [22..22] Enable PPI channel 22.                                           */
      __IOM uint32_t CH23       : 1;            /*!< [23..23] Enable PPI channel 23.                                           */
      __IOM uint32_t CH24       : 1;            /*!< [24..24] Enable PPI channel 24.                                           */
      __IOM uint32_t CH25       : 1;            /*!< [25..25] Enable PPI channel 25.                                           */
      __IOM uint32_t CH26       : 1;            /*!< [26..26] Enable PPI channel 26.                                           */
      __IOM uint32_t CH27       : 1;            /*!< [27..27] Enable PPI channel 27.                                           */
      __IOM uint32_t CH28       : 1;            /*!< [28..28] Enable PPI channel 28.                                           */
      __IOM uint32_t CH29       : 1;            /*!< [29..29] Enable PPI channel 29.                                           */
      __IOM uint32_t CH30       : 1;            /*!< [30..30] Enable PPI channel 30.                                           */
      __IOM uint32_t CH31       : 1;            /*!< [31..31] Enable PPI channel 31.                                           */
    } CHEN_b;
  } ;
  
  union {
    __IOM uint32_t CHENSET;                     /*!< (@ 0x00000504) Channel enable set.                                        */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Enable PPI channel 0.                                              */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Enable PPI channel 1.                                              */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Enable PPI channel 2.                                              */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Enable PPI channel 3.                                              */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Enable PPI channel 4.                                              */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Enable PPI channel 5.                                              */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Enable PPI channel 6.                                              */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Enable PPI channel 7.                                              */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Enable PPI channel 8.                                              */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Enable PPI channel 9.                                              */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Enable PPI channel 10.                                           */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Enable PPI channel 11.                                           */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Enable PPI channel 12.                                           */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Enable PPI channel 13.                                           */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Enable PPI channel 14.                                           */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Enable PPI channel 15.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t CH20       : 1;            /*!< [20..20] Enable PPI channel 20.                                           */
      __IOM uint32_t CH21       : 1;            /*!< [21..21] Enable PPI channel 21.                                           */
      __IOM uint32_t CH22       : 1;            /*!< [22..22] Enable PPI channel 22.                                           */
      __IOM uint32_t CH23       : 1;            /*!< [23..23] Enable PPI channel 23.                                           */
      __IOM uint32_t CH24       : 1;            /*!< [24..24] Enable PPI channel 24.                                           */
      __IOM uint32_t CH25       : 1;            /*!< [25..25] Enable PPI channel 25.                                           */
      __IOM uint32_t CH26       : 1;            /*!< [26..26] Enable PPI channel 26.                                           */
      __IOM uint32_t CH27       : 1;            /*!< [27..27] Enable PPI channel 27.                                           */
      __IOM uint32_t CH28       : 1;            /*!< [28..28] Enable PPI channel 28.                                           */
      __IOM uint32_t CH29       : 1;            /*!< [29..29] Enable PPI channel 29.                                           */
      __IOM uint32_t CH30       : 1;            /*!< [30..30] Enable PPI channel 30.                                           */
      __IOM uint32_t CH31       : 1;            /*!< [31..31] Enable PPI channel 31.                                           */
    } CHENSET_b;
  } ;
  
  union {
    __IOM uint32_t CHENCLR;                     /*!< (@ 0x00000508) Channel enable clear.                                      */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Disable PPI channel 0.                                             */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Disable PPI channel 1.                                             */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Disable PPI channel 2.                                             */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Disable PPI channel 3.                                             */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Disable PPI channel 4.                                             */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Disable PPI channel 5.                                             */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Disable PPI channel 6.                                             */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Disable PPI channel 7.                                             */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Disable PPI channel 8.                                             */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Disable PPI channel 9.                                             */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Disable PPI channel 10.                                          */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Disable PPI channel 11.                                          */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Disable PPI channel 12.                                          */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Disable PPI channel 13.                                          */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Disable PPI channel 14.                                          */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Disable PPI channel 15.                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t CH20       : 1;            /*!< [20..20] Disable PPI channel 20.                                          */
      __IOM uint32_t CH21       : 1;            /*!< [21..21] Disable PPI channel 21.                                          */
      __IOM uint32_t CH22       : 1;            /*!< [22..22] Disable PPI channel 22.                                          */
      __IOM uint32_t CH23       : 1;            /*!< [23..23] Disable PPI channel 23.                                          */
      __IOM uint32_t CH24       : 1;            /*!< [24..24] Disable PPI channel 24.                                          */
      __IOM uint32_t CH25       : 1;            /*!< [25..25] Disable PPI channel 25.                                          */
      __IOM uint32_t CH26       : 1;            /*!< [26..26] Disable PPI channel 26.                                          */
      __IOM uint32_t CH27       : 1;            /*!< [27..27] Disable PPI channel 27.                                          */
      __IOM uint32_t CH28       : 1;            /*!< [28..28] Disable PPI channel 28.                                          */
      __IOM uint32_t CH29       : 1;            /*!< [29..29] Disable PPI channel 29.                                          */
      __IOM uint32_t CH30       : 1;            /*!< [30..30] Disable PPI channel 30.                                          */
      __IOM uint32_t CH31       : 1;            /*!< [31..31] Disable PPI channel 31.                                          */
    } CHENCLR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  __IOM PPI_CH_Type CH[16];                     /*!< (@ 0x00000510) PPI Channel.                                               */
  __IM  uint32_t  RESERVED2[156];
  
  union {
    __IOM uint32_t CHG[4];                      /*!< (@ 0x00000800) Channel group configuration.                               */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Include CH0 in channel group.                                      */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Include CH1 in channel group.                                      */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Include CH2 in channel group.                                      */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Include CH3 in channel group.                                      */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Include CH4 in channel group.                                      */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Include CH5 in channel group.                                      */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Include CH6 in channel group.                                      */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Include CH7 in channel group.                                      */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Include CH8 in channel group.                                      */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Include CH9 in channel group.                                      */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Include CH10 in channel group.                                   */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Include CH11 in channel group.                                   */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Include CH12 in channel group.                                   */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Include CH13 in channel group.                                   */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Include CH14 in channel group.                                   */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Include CH15 in channel group.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t CH20       : 1;            /*!< [20..20] Include CH20 in channel group.                                   */
      __IOM uint32_t CH21       : 1;            /*!< [21..21] Include CH21 in channel group.                                   */
      __IOM uint32_t CH22       : 1;            /*!< [22..22] Include CH22 in channel group.                                   */
      __IOM uint32_t CH23       : 1;            /*!< [23..23] Include CH23 in channel group.                                   */
      __IOM uint32_t CH24       : 1;            /*!< [24..24] Include CH24 in channel group.                                   */
      __IOM uint32_t CH25       : 1;            /*!< [25..25] Include CH25 in channel group.                                   */
      __IOM uint32_t CH26       : 1;            /*!< [26..26] Include CH26 in channel group.                                   */
      __IOM uint32_t CH27       : 1;            /*!< [27..27] Include CH27 in channel group.                                   */
      __IOM uint32_t CH28       : 1;            /*!< [28..28] Include CH28 in channel group.                                   */
      __IOM uint32_t CH29       : 1;            /*!< [29..29] Include CH29 in channel group.                                   */
      __IOM uint32_t CH30       : 1;            /*!< [30..30] Include CH30 in channel group.                                   */
      __IOM uint32_t CH31       : 1;            /*!< [31..31] Include CH31 in channel group.                                   */
    } CHG_b[4];
  } ;
} NRF_PPI_Type;                                 /*!< Size = 2064 (0x810)                                                       */



/* =========================================================================================================================== */
/* ================                                           FICR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Factory Information Configuration. (FICR)
  */

typedef struct {                                /*!< (@ 0x10000000) FICR Structure                                             */
  __IM  uint32_t  RESERVED[4];
  __IM  uint32_t  CODEPAGESIZE;                 /*!< (@ 0x00000010) Code memory page size in bytes.                            */
  __IM  uint32_t  CODESIZE;                     /*!< (@ 0x00000014) Code memory size in pages.                                 */
  __IM  uint32_t  RESERVED1[4];
  __IM  uint32_t  CLENR0;                       /*!< (@ 0x00000028) Length of code region 0 in bytes.                          */
  
  union {
    __IM  uint32_t PPFC;                        /*!< (@ 0x0000002C) Pre-programmed factory code present.                       */
    
    struct {
      __IM  uint32_t PPFC       : 8;            /*!< [7..0] Pre-programmed factory code present.                               */
    } PPFC_b;
  } ;
  __IM  uint32_t  RESERVED2;
  __IM  uint32_t  NUMRAMBLOCK;                  /*!< (@ 0x00000034) Number of individualy controllable RAM blocks.             */
  
  union {
    __IM  uint32_t SIZERAMBLOCKS;               /*!< (@ 0x00000038) Size of RAM blocks in bytes.                               */
    __IM  uint32_t SIZERAMBLOCK[4];             /*!< (@ 0x00000038) Deprecated array of size of RAM block in bytes.
                                                                    This name is kept for backward compatinility
                                                                    purposes. Use SIZERAMBLOCKS instead.                       */
  };
  __IM  uint32_t  RESERVED3[5];
  
  union {
    __IM  uint32_t CONFIGID;                    /*!< (@ 0x0000005C) Configuration identifier.                                  */
    
    struct {
      __IM  uint32_t HWID       : 16;           /*!< [15..0] Hardware Identification Number.                                   */
      __IM  uint32_t FWID       : 16;           /*!< [31..16] Firmware Identification Number pre-loaded into the
                                                     flash.                                                                    */
    } CONFIGID_b;
  } ;
  __IM  uint32_t  DEVICEID[2];                  /*!< (@ 0x00000060) Device identifier.                                         */
  __IM  uint32_t  RESERVED4[6];
  __IM  uint32_t  ER[4];                        /*!< (@ 0x00000080) Encryption root.                                           */
  __IM  uint32_t  IR[4];                        /*!< (@ 0x00000090) Identity root.                                             */
  
  union {
    __IM  uint32_t DEVICEADDRTYPE;              /*!< (@ 0x000000A0) Device address type.                                       */
    
    struct {
      __IM  uint32_t DEVICEADDRTYPE : 1;        /*!< [0..0] Device address type.                                               */
    } DEVICEADDRTYPE_b;
  } ;
  __IM  uint32_t  DEVICEADDR[2];                /*!< (@ 0x000000A4) Device address.                                            */
  
  union {
    __IM  uint32_t OVERRIDEEN;                  /*!< (@ 0x000000AC) Radio calibration override enable.                         */
    
    struct {
      __IM  uint32_t NRF_1MBIT  : 1;            /*!< [0..0] Override default values for NRF_1Mbit mode.                        */
      __IM  uint32_t            : 2;
      __IM  uint32_t BLE_1MBIT  : 1;            /*!< [3..3] Override default values for BLE_1Mbit mode.                        */
    } OVERRIDEEN_b;
  } ;
  __IM  uint32_t  NRF_1MBIT[5];                 /*!< (@ 0x000000B0) Override values for the OVERRIDEn registers in
                                                                    RADIO for NRF_1Mbit mode.                                  */
  __IM  uint32_t  RESERVED5[10];
  __IM  uint32_t  BLE_1MBIT[5];                 /*!< (@ 0x000000EC) Override values for the OVERRIDEn registers in
                                                                    RADIO for BLE_1Mbit mode.                                  */
} NRF_FICR_Type;                                /*!< Size = 256 (0x100)                                                        */



/* =========================================================================================================================== */
/* ================                                           UICR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief User Information Configuration. (UICR)
  */

typedef struct {                                /*!< (@ 0x10001000) UICR Structure                                             */
  __IOM uint32_t  CLENR0;                       /*!< (@ 0x00000000) Length of code region 0.                                   */
  
  union {
    __IOM uint32_t RBPCONF;                     /*!< (@ 0x00000004) Readback protection configuration.                         */
    
    struct {
      __IOM uint32_t PR0        : 8;            /*!< [7..0] Readback protect region 0. Will be ignored if pre-programmed
                                                     factory code is present on the chip.                                      */
      __IOM uint32_t PALL       : 8;            /*!< [15..8] Readback protect all code in the device.                          */
    } RBPCONF_b;
  } ;
  
  union {
    __IOM uint32_t XTALFREQ;                    /*!< (@ 0x00000008) Reset value for CLOCK XTALFREQ register.                   */
    
    struct {
      __IOM uint32_t XTALFREQ   : 8;            /*!< [7..0] Reset value for CLOCK XTALFREQ register.                           */
    } XTALFREQ_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t FWID;                        /*!< (@ 0x00000010) Firmware ID.                                               */
    
    struct {
      __IM  uint32_t FWID       : 16;           /*!< [15..0] Identification number for the firmware loaded into the
                                                     chip.                                                                     */
    } FWID_b;
  } ;
  
  union {
    __IOM uint32_t BOOTLOADERADDR;              /*!< (@ 0x00000014) Bootloader start address.                                  */
    __IOM uint32_t NRFFW[15];                   /*!< (@ 0x00000014) Reserved for Nordic firmware design.                       */
  };
  __IOM uint32_t  NRFHW[12];                    /*!< (@ 0x00000050) Reserved for Nordic hardware design.                       */
  __IOM uint32_t  CUSTOMER[32];                 /*!< (@ 0x00000080) Reserved for customer.                                     */
} NRF_UICR_Type;                                /*!< Size = 256 (0x100)                                                        */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose input and output. (GPIO)
  */

typedef struct {                                /*!< (@ 0x50000000) GPIO Structure                                             */
  __IM  uint32_t  RESERVED[321];
  
  union {
    __IOM uint32_t OUT;                         /*!< (@ 0x00000504) Write GPIO port.                                           */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Pin 0.                                                             */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Pin 1.                                                             */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Pin 2.                                                             */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Pin 3.                                                             */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Pin 4.                                                             */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Pin 5.                                                             */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Pin 6.                                                             */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Pin 7.                                                             */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Pin 8.                                                             */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Pin 9.                                                             */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Pin 10.                                                          */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Pin 11.                                                          */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Pin 12.                                                          */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Pin 13.                                                          */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Pin 14.                                                          */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Pin 15.                                                          */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Pin 16.                                                          */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Pin 17.                                                          */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Pin 18.                                                          */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Pin 19.                                                          */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Pin 20.                                                          */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Pin 21.                                                          */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Pin 22.                                                          */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Pin 23.                                                          */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Pin 24.                                                          */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Pin 25.                                                          */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Pin 26.                                                          */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Pin 27.                                                          */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Pin 28.                                                          */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Pin 29.                                                          */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Pin 30.                                                          */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Pin 31.                                                          */
    } OUT_b;
  } ;
  
  union {
    __IOM uint32_t OUTSET;                      /*!< (@ 0x00000508) Set individual bits in GPIO port.                          */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Pin 0.                                                             */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Pin 1.                                                             */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Pin 2.                                                             */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Pin 3.                                                             */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Pin 4.                                                             */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Pin 5.                                                             */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Pin 6.                                                             */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Pin 7.                                                             */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Pin 8.                                                             */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Pin 9.                                                             */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Pin 10.                                                          */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Pin 11.                                                          */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Pin 12.                                                          */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Pin 13.                                                          */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Pin 14.                                                          */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Pin 15.                                                          */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Pin 16.                                                          */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Pin 17.                                                          */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Pin 18.                                                          */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Pin 19.                                                          */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Pin 20.                                                          */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Pin 21.                                                          */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Pin 22.                                                          */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Pin 23.                                                          */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Pin 24.                                                          */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Pin 25.                                                          */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Pin 26.                                                          */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Pin 27.                                                          */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Pin 28.                                                          */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Pin 29.                                                          */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Pin 30.                                                          */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Pin 31.                                                          */
    } OUTSET_b;
  } ;
  
  union {
    __IOM uint32_t OUTCLR;                      /*!< (@ 0x0000050C) Clear individual bits in GPIO port.                        */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Pin 0.                                                             */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Pin 1.                                                             */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Pin 2.                                                             */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Pin 3.                                                             */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Pin 4.                                                             */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Pin 5.                                                             */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Pin 6.                                                             */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Pin 7.                                                             */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Pin 8.                                                             */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Pin 9.                                                             */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Pin 10.                                                          */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Pin 11.                                                          */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Pin 12.                                                          */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Pin 13.                                                          */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Pin 14.                                                          */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Pin 15.                                                          */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Pin 16.                                                          */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Pin 17.                                                          */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Pin 18.                                                          */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Pin 19.                                                          */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Pin 20.                                                          */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Pin 21.                                                          */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Pin 22.                                                          */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Pin 23.                                                          */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Pin 24.                                                          */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Pin 25.                                                          */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Pin 26.                                                          */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Pin 27.                                                          */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Pin 28.                                                          */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Pin 29.                                                          */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Pin 30.                                                          */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Pin 31.                                                          */
    } OUTCLR_b;
  } ;
  
  union {
    __IM  uint32_t IN;                          /*!< (@ 0x00000510) Read GPIO port.                                            */
    
    struct {
      __IM  uint32_t PIN0       : 1;            /*!< [0..0] Pin 0.                                                             */
      __IM  uint32_t PIN1       : 1;            /*!< [1..1] Pin 1.                                                             */
      __IM  uint32_t PIN2       : 1;            /*!< [2..2] Pin 2.                                                             */
      __IM  uint32_t PIN3       : 1;            /*!< [3..3] Pin 3.                                                             */
      __IM  uint32_t PIN4       : 1;            /*!< [4..4] Pin 4.                                                             */
      __IM  uint32_t PIN5       : 1;            /*!< [5..5] Pin 5.                                                             */
      __IM  uint32_t PIN6       : 1;            /*!< [6..6] Pin 6.                                                             */
      __IM  uint32_t PIN7       : 1;            /*!< [7..7] Pin 7.                                                             */
      __IM  uint32_t PIN8       : 1;            /*!< [8..8] Pin 8.                                                             */
      __IM  uint32_t PIN9       : 1;            /*!< [9..9] Pin 9.                                                             */
      __IM  uint32_t PIN10      : 1;            /*!< [10..10] Pin 10.                                                          */
      __IM  uint32_t PIN11      : 1;            /*!< [11..11] Pin 11.                                                          */
      __IM  uint32_t PIN12      : 1;            /*!< [12..12] Pin 12.                                                          */
      __IM  uint32_t PIN13      : 1;            /*!< [13..13] Pin 13.                                                          */
      __IM  uint32_t PIN14      : 1;            /*!< [14..14] Pin 14.                                                          */
      __IM  uint32_t PIN15      : 1;            /*!< [15..15] Pin 15.                                                          */
      __IM  uint32_t PIN16      : 1;            /*!< [16..16] Pin 16.                                                          */
      __IM  uint32_t PIN17      : 1;            /*!< [17..17] Pin 17.                                                          */
      __IM  uint32_t PIN18      : 1;            /*!< [18..18] Pin 18.                                                          */
      __IM  uint32_t PIN19      : 1;            /*!< [19..19] Pin 19.                                                          */
      __IM  uint32_t PIN20      : 1;            /*!< [20..20] Pin 20.                                                          */
      __IM  uint32_t PIN21      : 1;            /*!< [21..21] Pin 21.                                                          */
      __IM  uint32_t PIN22      : 1;            /*!< [22..22] Pin 22.                                                          */
      __IM  uint32_t PIN23      : 1;            /*!< [23..23] Pin 23.                                                          */
      __IM  uint32_t PIN24      : 1;            /*!< [24..24] Pin 24.                                                          */
      __IM  uint32_t PIN25      : 1;            /*!< [25..25] Pin 25.                                                          */
      __IM  uint32_t PIN26      : 1;            /*!< [26..26] Pin 26.                                                          */
      __IM  uint32_t PIN27      : 1;            /*!< [27..27] Pin 27.                                                          */
      __IM  uint32_t PIN28      : 1;            /*!< [28..28] Pin 28.                                                          */
      __IM  uint32_t PIN29      : 1;            /*!< [29..29] Pin 29.                                                          */
      __IM  uint32_t PIN30      : 1;            /*!< [30..30] Pin 30.                                                          */
      __IM  uint32_t PIN31      : 1;            /*!< [31..31] Pin 31.                                                          */
    } IN_b;
  } ;
  
  union {
    __IOM uint32_t DIR;                         /*!< (@ 0x00000514) Direction of GPIO pins.                                    */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Pin 0.                                                             */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Pin 1.                                                             */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Pin 2.                                                             */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Pin 3.                                                             */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Pin 4.                                                             */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Pin 5.                                                             */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Pin 6.                                                             */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Pin 7.                                                             */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Pin 8.                                                             */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Pin 9.                                                             */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Pin 10.                                                          */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Pin 11.                                                          */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Pin 12.                                                          */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Pin 13.                                                          */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Pin 14.                                                          */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Pin 15.                                                          */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Pin 16.                                                          */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Pin 17.                                                          */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Pin 18.                                                          */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Pin 19.                                                          */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Pin 20.                                                          */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Pin 21.                                                          */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Pin 22.                                                          */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Pin 23.                                                          */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Pin 24.                                                          */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Pin 25.                                                          */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Pin 26.                                                          */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Pin 27.                                                          */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Pin 28.                                                          */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Pin 29.                                                          */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Pin 30.                                                          */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Pin 31.                                                          */
    } DIR_b;
  } ;
  
  union {
    __IOM uint32_t DIRSET;                      /*!< (@ 0x00000518) DIR set register.                                          */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Set as output pin 0.                                               */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Set as output pin 1.                                               */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Set as output pin 2.                                               */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Set as output pin 3.                                               */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Set as output pin 4.                                               */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Set as output pin 5.                                               */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Set as output pin 6.                                               */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Set as output pin 7.                                               */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Set as output pin 8.                                               */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Set as output pin 9.                                               */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Set as output pin 10.                                            */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Set as output pin 11.                                            */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Set as output pin 12.                                            */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Set as output pin 13.                                            */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Set as output pin 14.                                            */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Set as output pin 15.                                            */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Set as output pin 16.                                            */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Set as output pin 17.                                            */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Set as output pin 18.                                            */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Set as output pin 19.                                            */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Set as output pin 20.                                            */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Set as output pin 21.                                            */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Set as output pin 22.                                            */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Set as output pin 23.                                            */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Set as output pin 24.                                            */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Set as output pin 25.                                            */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Set as output pin 26.                                            */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Set as output pin 27.                                            */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Set as output pin 28.                                            */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Set as output pin 29.                                            */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Set as output pin 30.                                            */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Set as output pin 31.                                            */
    } DIRSET_b;
  } ;
  
  union {
    __IOM uint32_t DIRCLR;                      /*!< (@ 0x0000051C) DIR clear register.                                        */
    
    struct {
      __IOM uint32_t PIN0       : 1;            /*!< [0..0] Set as input pin 0.                                                */
      __IOM uint32_t PIN1       : 1;            /*!< [1..1] Set as input pin 1.                                                */
      __IOM uint32_t PIN2       : 1;            /*!< [2..2] Set as input pin 2.                                                */
      __IOM uint32_t PIN3       : 1;            /*!< [3..3] Set as input pin 3.                                                */
      __IOM uint32_t PIN4       : 1;            /*!< [4..4] Set as input pin 4.                                                */
      __IOM uint32_t PIN5       : 1;            /*!< [5..5] Set as input pin 5.                                                */
      __IOM uint32_t PIN6       : 1;            /*!< [6..6] Set as input pin 6.                                                */
      __IOM uint32_t PIN7       : 1;            /*!< [7..7] Set as input pin 7.                                                */
      __IOM uint32_t PIN8       : 1;            /*!< [8..8] Set as input pin 8.                                                */
      __IOM uint32_t PIN9       : 1;            /*!< [9..9] Set as input pin 9.                                                */
      __IOM uint32_t PIN10      : 1;            /*!< [10..10] Set as input pin 10.                                             */
      __IOM uint32_t PIN11      : 1;            /*!< [11..11] Set as input pin 11.                                             */
      __IOM uint32_t PIN12      : 1;            /*!< [12..12] Set as input pin 12.                                             */
      __IOM uint32_t PIN13      : 1;            /*!< [13..13] Set as input pin 13.                                             */
      __IOM uint32_t PIN14      : 1;            /*!< [14..14] Set as input pin 14.                                             */
      __IOM uint32_t PIN15      : 1;            /*!< [15..15] Set as input pin 15.                                             */
      __IOM uint32_t PIN16      : 1;            /*!< [16..16] Set as input pin 16.                                             */
      __IOM uint32_t PIN17      : 1;            /*!< [17..17] Set as input pin 17.                                             */
      __IOM uint32_t PIN18      : 1;            /*!< [18..18] Set as input pin 18.                                             */
      __IOM uint32_t PIN19      : 1;            /*!< [19..19] Set as input pin 19.                                             */
      __IOM uint32_t PIN20      : 1;            /*!< [20..20] Set as input pin 20.                                             */
      __IOM uint32_t PIN21      : 1;            /*!< [21..21] Set as input pin 21.                                             */
      __IOM uint32_t PIN22      : 1;            /*!< [22..22] Set as input pin 22.                                             */
      __IOM uint32_t PIN23      : 1;            /*!< [23..23] Set as input pin 23.                                             */
      __IOM uint32_t PIN24      : 1;            /*!< [24..24] Set as input pin 24.                                             */
      __IOM uint32_t PIN25      : 1;            /*!< [25..25] Set as input pin 25.                                             */
      __IOM uint32_t PIN26      : 1;            /*!< [26..26] Set as input pin 26.                                             */
      __IOM uint32_t PIN27      : 1;            /*!< [27..27] Set as input pin 27.                                             */
      __IOM uint32_t PIN28      : 1;            /*!< [28..28] Set as input pin 28.                                             */
      __IOM uint32_t PIN29      : 1;            /*!< [29..29] Set as input pin 29.                                             */
      __IOM uint32_t PIN30      : 1;            /*!< [30..30] Set as input pin 30.                                             */
      __IOM uint32_t PIN31      : 1;            /*!< [31..31] Set as input pin 31.                                             */
    } DIRCLR_b;
  } ;
  __IM  uint32_t  RESERVED1[120];
  
  union {
    __IOM uint32_t PIN_CNF[32];                 /*!< (@ 0x00000700) Configuration of GPIO pins.                                */
    
    struct {
      __IOM uint32_t DIR        : 1;            /*!< [0..0] Pin direction.                                                     */
      __IOM uint32_t INPUT      : 1;            /*!< [1..1] Connect or disconnect input path.                                  */
      __IOM uint32_t PULL       : 2;            /*!< [3..2] Pull-up or -down configuration.                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t DRIVE      : 3;            /*!< [10..8] Drive configuration.                                              */
      __IM  uint32_t            : 5;
      __IOM uint32_t SENSE      : 2;            /*!< [17..16] Pin sensing mechanism.                                           */
    } PIN_CNF_b[32];
  } ;
} NRF_GPIO_Type;                                /*!< Size = 1920 (0x780)                                                       */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define NRF_POWER_BASE              0x40000000UL
#define NRF_CLOCK_BASE              0x40000000UL
#define NRF_MPU_BASE                0x40000000UL
#define NRF_RADIO_BASE              0x40001000UL
#define NRF_UART0_BASE              0x40002000UL
#define NRF_SPI0_BASE               0x40003000UL
#define NRF_TWI0_BASE               0x40003000UL
#define NRF_SPI1_BASE               0x40004000UL
#define NRF_TWI1_BASE               0x40004000UL
#define NRF_SPIS1_BASE              0x40004000UL
#define NRF_GPIOTE_BASE             0x40006000UL
#define NRF_ADC_BASE                0x40007000UL
#define NRF_TIMER0_BASE             0x40008000UL
#define NRF_TIMER1_BASE             0x40009000UL
#define NRF_TIMER2_BASE             0x4000A000UL
#define NRF_RTC0_BASE               0x4000B000UL
#define NRF_TEMP_BASE               0x4000C000UL
#define NRF_RNG_BASE                0x4000D000UL
#define NRF_ECB_BASE                0x4000E000UL
#define NRF_AAR_BASE                0x4000F000UL
#define NRF_CCM_BASE                0x4000F000UL
#define NRF_WDT_BASE                0x40010000UL
#define NRF_RTC1_BASE               0x40011000UL
#define NRF_QDEC_BASE               0x40012000UL
#define NRF_LPCOMP_BASE             0x40013000UL
#define NRF_SWI_BASE                0x40014000UL
#define NRF_NVMC_BASE               0x4001E000UL
#define NRF_PPI_BASE                0x4001F000UL
#define NRF_FICR_BASE               0x10000000UL
#define NRF_UICR_BASE               0x10001000UL
#define NRF_GPIO_BASE               0x50000000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define NRF_POWER                   ((NRF_POWER_Type*)         NRF_POWER_BASE)
#define NRF_CLOCK                   ((NRF_CLOCK_Type*)         NRF_CLOCK_BASE)
#define NRF_MPU                     ((NRF_MPU_Type*)           NRF_MPU_BASE)
#define NRF_RADIO                   ((NRF_RADIO_Type*)         NRF_RADIO_BASE)
#define NRF_UART0                   ((NRF_UART_Type*)          NRF_UART0_BASE)
#define NRF_SPI0                    ((NRF_SPI_Type*)           NRF_SPI0_BASE)
#define NRF_TWI0                    ((NRF_TWI_Type*)           NRF_TWI0_BASE)
#define NRF_SPI1                    ((NRF_SPI_Type*)           NRF_SPI1_BASE)
#define NRF_TWI1                    ((NRF_TWI_Type*)           NRF_TWI1_BASE)
#define NRF_SPIS1                   ((NRF_SPIS_Type*)          NRF_SPIS1_BASE)
#define NRF_GPIOTE                  ((NRF_GPIOTE_Type*)        NRF_GPIOTE_BASE)
#define NRF_ADC                     ((NRF_ADC_Type*)           NRF_ADC_BASE)
#define NRF_TIMER0                  ((NRF_TIMER_Type*)         NRF_TIMER0_BASE)
#define NRF_TIMER1                  ((NRF_TIMER_Type*)         NRF_TIMER1_BASE)
#define NRF_TIMER2                  ((NRF_TIMER_Type*)         NRF_TIMER2_BASE)
#define NRF_RTC0                    ((NRF_RTC_Type*)           NRF_RTC0_BASE)
#define NRF_TEMP                    ((NRF_TEMP_Type*)          NRF_TEMP_BASE)
#define NRF_RNG                     ((NRF_RNG_Type*)           NRF_RNG_BASE)
#define NRF_ECB                     ((NRF_ECB_Type*)           NRF_ECB_BASE)
#define NRF_AAR                     ((NRF_AAR_Type*)           NRF_AAR_BASE)
#define NRF_CCM                     ((NRF_CCM_Type*)           NRF_CCM_BASE)
#define NRF_WDT                     ((NRF_WDT_Type*)           NRF_WDT_BASE)
#define NRF_RTC1                    ((NRF_RTC_Type*)           NRF_RTC1_BASE)
#define NRF_QDEC                    ((NRF_QDEC_Type*)          NRF_QDEC_BASE)
#define NRF_LPCOMP                  ((NRF_LPCOMP_Type*)        NRF_LPCOMP_BASE)
#define NRF_SWI                     ((NRF_SWI_Type*)           NRF_SWI_BASE)
#define NRF_NVMC                    ((NRF_NVMC_Type*)          NRF_NVMC_BASE)
#define NRF_PPI                     ((NRF_PPI_Type*)           NRF_PPI_BASE)
#define NRF_FICR                    ((NRF_FICR_Type*)          NRF_FICR_BASE)
#define NRF_UICR                    ((NRF_UICR_Type*)          NRF_UICR_BASE)
#define NRF_GPIO                    ((NRF_GPIO_Type*)          NRF_GPIO_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         TASKS_CHG                                         ================ */
/* =========================================================================================================================== */

/* ==========================================================  EN  =========================================================== */
/* ==========================================================  DIS  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            CH                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  EEP  ========================================================== */
/* ==========================================================  TEP  ========================================================== */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */

/* ====================================================  TASKS_CONSTLAT  ===================================================== */
/* =====================================================  TASKS_LOWPWR  ====================================================== */
/* ====================================================  EVENTS_POFWARN  ===================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* =============================================  POWER INTENSET POFWARN [2..2]  ============================================= */
typedef enum {                                  /*!< POWER_INTENSET_POFWARN                                                    */
  POWER_INTENSET_POFWARN_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  POWER_INTENSET_POFWARN_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} POWER_INTENSET_POFWARN_R_Enum;

typedef enum {                                  /*!< POWER_INTENSET_POFWARN                                                    */
  POWER_INTENSET_POFWARN_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} POWER_INTENSET_POFWARN_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* =============================================  POWER INTENCLR POFWARN [2..2]  ============================================= */
typedef enum {                                  /*!< POWER_INTENCLR_POFWARN                                                    */
  POWER_INTENCLR_POFWARN_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  POWER_INTENCLR_POFWARN_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} POWER_INTENCLR_POFWARN_R_Enum;

typedef enum {                                  /*!< POWER_INTENCLR_POFWARN                                                    */
  POWER_INTENCLR_POFWARN_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} POWER_INTENCLR_POFWARN_W_Enum;

/* =======================================================  RESETREAS  ======================================================= */
/* ============================================  POWER RESETREAS RESETPIN [0..0]  ============================================ */
typedef enum {                                  /*!< POWER_RESETREAS_RESETPIN                                                  */
  POWER_RESETREAS_RESETPIN_NotDetected = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_RESETPIN_Detected    = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_RESETPIN_Enum;

/* ==============================================  POWER RESETREAS DOG [1..1]  =============================================== */
typedef enum {                                  /*!< POWER_RESETREAS_DOG                                                       */
  POWER_RESETREAS_DOG_NotDetected      = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_DOG_Detected         = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_DOG_Enum;

/* ==============================================  POWER RESETREAS SREQ [2..2]  ============================================== */
typedef enum {                                  /*!< POWER_RESETREAS_SREQ                                                      */
  POWER_RESETREAS_SREQ_NotDetected     = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_SREQ_Detected        = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_SREQ_Enum;

/* =============================================  POWER RESETREAS LOCKUP [3..3]  ============================================= */
typedef enum {                                  /*!< POWER_RESETREAS_LOCKUP                                                    */
  POWER_RESETREAS_LOCKUP_NotDetected   = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_LOCKUP_Detected      = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_LOCKUP_Enum;

/* =============================================  POWER RESETREAS OFF [16..16]  ============================================== */
typedef enum {                                  /*!< POWER_RESETREAS_OFF                                                       */
  POWER_RESETREAS_OFF_NotDetected      = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_OFF_Detected         = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_OFF_Enum;

/* ============================================  POWER RESETREAS LPCOMP [17..17]  ============================================ */
typedef enum {                                  /*!< POWER_RESETREAS_LPCOMP                                                    */
  POWER_RESETREAS_LPCOMP_NotDetected   = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_LPCOMP_Detected      = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_LPCOMP_Enum;

/* =============================================  POWER RESETREAS DIF [18..18]  ============================================== */
typedef enum {                                  /*!< POWER_RESETREAS_DIF                                                       */
  POWER_RESETREAS_DIF_NotDetected      = 0,     /*!< NotDetected : Reset not detected.                                         */
  POWER_RESETREAS_DIF_Detected         = 1,     /*!< Detected : Reset detected.                                                */
} POWER_RESETREAS_DIF_Enum;

/* =======================================================  RAMSTATUS  ======================================================= */
/* ===========================================  POWER RAMSTATUS RAMBLOCK0 [0..0]  ============================================ */
typedef enum {                                  /*!< POWER_RAMSTATUS_RAMBLOCK0                                                 */
  POWER_RAMSTATUS_RAMBLOCK0_Off        = 0,     /*!< Off : RAM block 0 is off or powering up.                                  */
  POWER_RAMSTATUS_RAMBLOCK0_On         = 1,     /*!< On : RAM block 0 is on.                                                   */
} POWER_RAMSTATUS_RAMBLOCK0_Enum;

/* ===========================================  POWER RAMSTATUS RAMBLOCK1 [1..1]  ============================================ */
typedef enum {                                  /*!< POWER_RAMSTATUS_RAMBLOCK1                                                 */
  POWER_RAMSTATUS_RAMBLOCK1_Off        = 0,     /*!< Off : RAM block 1 is off or powering up.                                  */
  POWER_RAMSTATUS_RAMBLOCK1_On         = 1,     /*!< On : RAM block 1 is on.                                                   */
} POWER_RAMSTATUS_RAMBLOCK1_Enum;

/* ===========================================  POWER RAMSTATUS RAMBLOCK2 [2..2]  ============================================ */
typedef enum {                                  /*!< POWER_RAMSTATUS_RAMBLOCK2                                                 */
  POWER_RAMSTATUS_RAMBLOCK2_Off        = 0,     /*!< Off : RAM block 2 is off or powering up.                                  */
  POWER_RAMSTATUS_RAMBLOCK2_On         = 1,     /*!< On : RAM block 2 is on.                                                   */
} POWER_RAMSTATUS_RAMBLOCK2_Enum;

/* ===========================================  POWER RAMSTATUS RAMBLOCK3 [3..3]  ============================================ */
typedef enum {                                  /*!< POWER_RAMSTATUS_RAMBLOCK3                                                 */
  POWER_RAMSTATUS_RAMBLOCK3_Off        = 0,     /*!< Off : RAM block 3 is off or powering up.                                  */
  POWER_RAMSTATUS_RAMBLOCK3_On         = 1,     /*!< On : RAM block 3 is on.                                                   */
} POWER_RAMSTATUS_RAMBLOCK3_Enum;

/* =======================================================  SYSTEMOFF  ======================================================= */
/* ===========================================  POWER SYSTEMOFF SYSTEMOFF [0..0]  ============================================ */
typedef enum {                                  /*!< POWER_SYSTEMOFF_SYSTEMOFF                                                 */
  POWER_SYSTEMOFF_SYSTEMOFF_Enter      = 1,     /*!< Enter : Enter system off mode.                                            */
} POWER_SYSTEMOFF_SYSTEMOFF_Enum;

/* ========================================================  POFCON  ========================================================= */
/* ================================================  POWER POFCON POF [0..0]  ================================================ */
typedef enum {                                  /*!< POWER_POFCON_POF                                                          */
  POWER_POFCON_POF_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  POWER_POFCON_POF_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} POWER_POFCON_POF_Enum;

/* =============================================  POWER POFCON THRESHOLD [1..2]  ============================================= */
typedef enum {                                  /*!< POWER_POFCON_THRESHOLD                                                    */
  POWER_POFCON_THRESHOLD_V21           = 0,     /*!< V21 : Set threshold to 2.1Volts.                                          */
  POWER_POFCON_THRESHOLD_V23           = 1,     /*!< V23 : Set threshold to 2.3Volts.                                          */
  POWER_POFCON_THRESHOLD_V25           = 2,     /*!< V25 : Set threshold to 2.5Volts.                                          */
  POWER_POFCON_THRESHOLD_V27           = 3,     /*!< V27 : Set threshold to 2.7Volts.                                          */
} POWER_POFCON_THRESHOLD_Enum;

/* =======================================================  GPREGRET  ======================================================== */
/* =========================================================  RAMON  ========================================================= */
/* ===============================================  POWER RAMON ONRAM0 [0..0]  =============================================== */
typedef enum {                                  /*!< POWER_RAMON_ONRAM0                                                        */
  POWER_RAMON_ONRAM0_RAM0Off           = 0,     /*!< RAM0Off : RAM block 0 OFF in ON mode.                                     */
  POWER_RAMON_ONRAM0_RAM0On            = 1,     /*!< RAM0On : RAM block 0 ON in ON mode.                                       */
} POWER_RAMON_ONRAM0_Enum;

/* ===============================================  POWER RAMON ONRAM1 [1..1]  =============================================== */
typedef enum {                                  /*!< POWER_RAMON_ONRAM1                                                        */
  POWER_RAMON_ONRAM1_RAM1Off           = 0,     /*!< RAM1Off : RAM block 1 OFF in ON mode.                                     */
  POWER_RAMON_ONRAM1_RAM1On            = 1,     /*!< RAM1On : RAM block 1 ON in ON mode.                                       */
} POWER_RAMON_ONRAM1_Enum;

/* =============================================  POWER RAMON OFFRAM0 [16..16]  ============================================== */
typedef enum {                                  /*!< POWER_RAMON_OFFRAM0                                                       */
  POWER_RAMON_OFFRAM0_RAM0Off          = 0,     /*!< RAM0Off : RAM block 0 OFF in OFF mode.                                    */
  POWER_RAMON_OFFRAM0_RAM0On           = 1,     /*!< RAM0On : RAM block 0 ON in OFF mode.                                      */
} POWER_RAMON_OFFRAM0_Enum;

/* =============================================  POWER RAMON OFFRAM1 [17..17]  ============================================== */
typedef enum {                                  /*!< POWER_RAMON_OFFRAM1                                                       */
  POWER_RAMON_OFFRAM1_RAM1Off          = 0,     /*!< RAM1Off : RAM block 1 OFF in OFF mode.                                    */
  POWER_RAMON_OFFRAM1_RAM1On           = 1,     /*!< RAM1On : RAM block 1 ON in OFF mode.                                      */
} POWER_RAMON_OFFRAM1_Enum;

/* =========================================================  RESET  ========================================================= */
/* ===============================================  POWER RESET RESET [0..0]  ================================================ */
typedef enum {                                  /*!< POWER_RESET_RESET                                                         */
  POWER_RESET_RESET_Disabled           = 0,     /*!< Disabled : Pin reset in debug interface mode disabled.                    */
  POWER_RESET_RESET_Enabled            = 1,     /*!< Enabled : Pin reset in debug interface mode enabled.                      */
} POWER_RESET_RESET_Enum;

/* ========================================================  RAMONB  ========================================================= */
/* ==============================================  POWER RAMONB ONRAM2 [0..0]  =============================================== */
typedef enum {                                  /*!< POWER_RAMONB_ONRAM2                                                       */
  POWER_RAMONB_ONRAM2_RAM2Off          = 0,     /*!< RAM2Off : RAM block 2 OFF in ON mode.                                     */
  POWER_RAMONB_ONRAM2_RAM2On           = 1,     /*!< RAM2On : RAM block 2 ON in ON mode.                                       */
} POWER_RAMONB_ONRAM2_Enum;

/* ==============================================  POWER RAMONB ONRAM3 [1..1]  =============================================== */
typedef enum {                                  /*!< POWER_RAMONB_ONRAM3                                                       */
  POWER_RAMONB_ONRAM3_RAM3Off          = 0,     /*!< RAM3Off : RAM block 33 OFF in ON mode.                                    */
  POWER_RAMONB_ONRAM3_RAM3On           = 1,     /*!< RAM3On : RAM block 3 ON in ON mode.                                       */
} POWER_RAMONB_ONRAM3_Enum;

/* =============================================  POWER RAMONB OFFRAM2 [16..16]  ============================================= */
typedef enum {                                  /*!< POWER_RAMONB_OFFRAM2                                                      */
  POWER_RAMONB_OFFRAM2_RAM2Off         = 0,     /*!< RAM2Off : RAM block 2 OFF in OFF mode.                                    */
  POWER_RAMONB_OFFRAM2_RAM2On          = 1,     /*!< RAM2On : RAM block 2 ON in OFF mode.                                      */
} POWER_RAMONB_OFFRAM2_Enum;

/* =============================================  POWER RAMONB OFFRAM3 [17..17]  ============================================= */
typedef enum {                                  /*!< POWER_RAMONB_OFFRAM3                                                      */
  POWER_RAMONB_OFFRAM3_RAM3Off         = 0,     /*!< RAM3Off : RAM block 3 OFF in OFF mode.                                    */
  POWER_RAMONB_OFFRAM3_RAM3On          = 1,     /*!< RAM3On : RAM block 3 ON in OFF mode.                                      */
} POWER_RAMONB_OFFRAM3_Enum;

/* ========================================================  DCDCEN  ========================================================= */
/* ==============================================  POWER DCDCEN DCDCEN [0..0]  =============================================== */
typedef enum {                                  /*!< POWER_DCDCEN_DCDCEN                                                       */
  POWER_DCDCEN_DCDCEN_Disabled         = 0,     /*!< Disabled : DCDC converter disabled.                                       */
  POWER_DCDCEN_DCDCEN_Enabled          = 1,     /*!< Enabled : DCDC converter enabled.                                         */
} POWER_DCDCEN_DCDCEN_Enum;

/* =======================================================  DCDCFORCE  ======================================================= */
/* ============================================  POWER DCDCFORCE FORCEOFF [0..0]  ============================================ */
typedef enum {                                  /*!< POWER_DCDCFORCE_FORCEOFF                                                  */
  POWER_DCDCFORCE_FORCEOFF_NoForce     = 0,     /*!< NoForce : No force.                                                       */
  POWER_DCDCFORCE_FORCEOFF_Force       = 1,     /*!< Force : Force.                                                            */
} POWER_DCDCFORCE_FORCEOFF_Enum;

/* ============================================  POWER DCDCFORCE FORCEON [1..1]  ============================================= */
typedef enum {                                  /*!< POWER_DCDCFORCE_FORCEON                                                   */
  POWER_DCDCFORCE_FORCEON_NoForce      = 0,     /*!< NoForce : No force.                                                       */
  POWER_DCDCFORCE_FORCEON_Force        = 1,     /*!< Force : Force.                                                            */
} POWER_DCDCFORCE_FORCEON_Enum;



/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */

/* ===================================================  TASKS_HFCLKSTART  ==================================================== */
/* ====================================================  TASKS_HFCLKSTOP  ==================================================== */
/* ===================================================  TASKS_LFCLKSTART  ==================================================== */
/* ====================================================  TASKS_LFCLKSTOP  ==================================================== */
/* =======================================================  TASKS_CAL  ======================================================= */
/* =====================================================  TASKS_CTSTART  ===================================================== */
/* =====================================================  TASKS_CTSTOP  ====================================================== */
/* ==================================================  EVENTS_HFCLKSTARTED  ================================================== */
/* ==================================================  EVENTS_LFCLKSTARTED  ================================================== */
/* ======================================================  EVENTS_DONE  ====================================================== */
/* ======================================================  EVENTS_CTTO  ====================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ==========================================  CLOCK INTENSET HFCLKSTARTED [0..0]  =========================================== */
typedef enum {                                  /*!< CLOCK_INTENSET_HFCLKSTARTED                                               */
  CLOCK_INTENSET_HFCLKSTARTED_Disabled = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENSET_HFCLKSTARTED_Enabled  = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENSET_HFCLKSTARTED_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENSET_HFCLKSTARTED                                               */
  CLOCK_INTENSET_HFCLKSTARTED_Set      = 1,     /*!< Set : Enable interrupt on write.                                          */
} CLOCK_INTENSET_HFCLKSTARTED_W_Enum;

/* ==========================================  CLOCK INTENSET LFCLKSTARTED [1..1]  =========================================== */
typedef enum {                                  /*!< CLOCK_INTENSET_LFCLKSTARTED                                               */
  CLOCK_INTENSET_LFCLKSTARTED_Disabled = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENSET_LFCLKSTARTED_Enabled  = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENSET_LFCLKSTARTED_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENSET_LFCLKSTARTED                                               */
  CLOCK_INTENSET_LFCLKSTARTED_Set      = 1,     /*!< Set : Enable interrupt on write.                                          */
} CLOCK_INTENSET_LFCLKSTARTED_W_Enum;

/* ==============================================  CLOCK INTENSET DONE [3..3]  =============================================== */
typedef enum {                                  /*!< CLOCK_INTENSET_DONE                                                       */
  CLOCK_INTENSET_DONE_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENSET_DONE_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENSET_DONE_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENSET_DONE                                                       */
  CLOCK_INTENSET_DONE_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} CLOCK_INTENSET_DONE_W_Enum;

/* ==============================================  CLOCK INTENSET CTTO [4..4]  =============================================== */
typedef enum {                                  /*!< CLOCK_INTENSET_CTTO                                                       */
  CLOCK_INTENSET_CTTO_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENSET_CTTO_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENSET_CTTO_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENSET_CTTO                                                       */
  CLOCK_INTENSET_CTTO_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} CLOCK_INTENSET_CTTO_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==========================================  CLOCK INTENCLR HFCLKSTARTED [0..0]  =========================================== */
typedef enum {                                  /*!< CLOCK_INTENCLR_HFCLKSTARTED                                               */
  CLOCK_INTENCLR_HFCLKSTARTED_Disabled = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENCLR_HFCLKSTARTED_Enabled  = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENCLR_HFCLKSTARTED_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENCLR_HFCLKSTARTED                                               */
  CLOCK_INTENCLR_HFCLKSTARTED_Clear    = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CLOCK_INTENCLR_HFCLKSTARTED_W_Enum;

/* ==========================================  CLOCK INTENCLR LFCLKSTARTED [1..1]  =========================================== */
typedef enum {                                  /*!< CLOCK_INTENCLR_LFCLKSTARTED                                               */
  CLOCK_INTENCLR_LFCLKSTARTED_Disabled = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENCLR_LFCLKSTARTED_Enabled  = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENCLR_LFCLKSTARTED_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENCLR_LFCLKSTARTED                                               */
  CLOCK_INTENCLR_LFCLKSTARTED_Clear    = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CLOCK_INTENCLR_LFCLKSTARTED_W_Enum;

/* ==============================================  CLOCK INTENCLR DONE [3..3]  =============================================== */
typedef enum {                                  /*!< CLOCK_INTENCLR_DONE                                                       */
  CLOCK_INTENCLR_DONE_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENCLR_DONE_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENCLR_DONE_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENCLR_DONE                                                       */
  CLOCK_INTENCLR_DONE_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CLOCK_INTENCLR_DONE_W_Enum;

/* ==============================================  CLOCK INTENCLR CTTO [4..4]  =============================================== */
typedef enum {                                  /*!< CLOCK_INTENCLR_CTTO                                                       */
  CLOCK_INTENCLR_CTTO_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CLOCK_INTENCLR_CTTO_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CLOCK_INTENCLR_CTTO_R_Enum;

typedef enum {                                  /*!< CLOCK_INTENCLR_CTTO                                                       */
  CLOCK_INTENCLR_CTTO_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CLOCK_INTENCLR_CTTO_W_Enum;

/* =======================================================  HFCLKRUN  ======================================================== */
/* =============================================  CLOCK HFCLKRUN STATUS [0..0]  ============================================== */
typedef enum {                                  /*!< CLOCK_HFCLKRUN_STATUS                                                     */
  CLOCK_HFCLKRUN_STATUS_NotTriggered   = 0,     /*!< NotTriggered : Task HFCLKSTART has not been triggered.                    */
  CLOCK_HFCLKRUN_STATUS_Triggered      = 1,     /*!< Triggered : Task HFCLKSTART has been triggered.                           */
} CLOCK_HFCLKRUN_STATUS_Enum;

/* =======================================================  HFCLKSTAT  ======================================================= */
/* ==============================================  CLOCK HFCLKSTAT SRC [0..0]  =============================================== */
typedef enum {                                  /*!< CLOCK_HFCLKSTAT_SRC                                                       */
  CLOCK_HFCLKSTAT_SRC_RC               = 0,     /*!< RC : Internal 16MHz RC oscillator running and generating the
                                                                    HFCLK clock.                                               */
  CLOCK_HFCLKSTAT_SRC_Xtal             = 1,     /*!< Xtal : External 16MHz/32MHz crystal oscillator running and generating
                                                     the HFCLK clock.                                                          */
} CLOCK_HFCLKSTAT_SRC_Enum;

/* ============================================  CLOCK HFCLKSTAT STATE [16..16]  ============================================= */
typedef enum {                                  /*!< CLOCK_HFCLKSTAT_STATE                                                     */
  CLOCK_HFCLKSTAT_STATE_NotRunning     = 0,     /*!< NotRunning : HFCLK clock not running.                                     */
  CLOCK_HFCLKSTAT_STATE_Running        = 1,     /*!< Running : HFCLK clock running.                                            */
} CLOCK_HFCLKSTAT_STATE_Enum;

/* =======================================================  LFCLKRUN  ======================================================== */
/* =============================================  CLOCK LFCLKRUN STATUS [0..0]  ============================================== */
typedef enum {                                  /*!< CLOCK_LFCLKRUN_STATUS                                                     */
  CLOCK_LFCLKRUN_STATUS_NotTriggered   = 0,     /*!< NotTriggered : Task LFCLKSTART has not been triggered.                    */
  CLOCK_LFCLKRUN_STATUS_Triggered      = 1,     /*!< Triggered : Task LFCLKSTART has been triggered.                           */
} CLOCK_LFCLKRUN_STATUS_Enum;

/* =======================================================  LFCLKSTAT  ======================================================= */
/* ==============================================  CLOCK LFCLKSTAT SRC [0..1]  =============================================== */
typedef enum {                                  /*!< CLOCK_LFCLKSTAT_SRC                                                       */
  CLOCK_LFCLKSTAT_SRC_RC               = 0,     /*!< RC : Internal 32KiHz RC oscillator running and generating the
                                                     LFCLK clock.                                                              */
  CLOCK_LFCLKSTAT_SRC_Xtal             = 1,     /*!< Xtal : External 32KiHz crystal oscillator running and generating
                                                     the LFCLK clock.                                                          */
  CLOCK_LFCLKSTAT_SRC_Synth            = 2,     /*!< Synth : Internal 32KiHz synthesizer from the HFCLK running and
                                                     generating the LFCLK clock.                                               */
} CLOCK_LFCLKSTAT_SRC_Enum;

/* ============================================  CLOCK LFCLKSTAT STATE [16..16]  ============================================= */
typedef enum {                                  /*!< CLOCK_LFCLKSTAT_STATE                                                     */
  CLOCK_LFCLKSTAT_STATE_NotRunning     = 0,     /*!< NotRunning : LFCLK clock not running.                                     */
  CLOCK_LFCLKSTAT_STATE_Running        = 1,     /*!< Running : LFCLK clock running.                                            */
} CLOCK_LFCLKSTAT_STATE_Enum;

/* =====================================================  LFCLKSRCCOPY  ====================================================== */
/* =============================================  CLOCK LFCLKSRCCOPY SRC [0..1]  ============================================= */
typedef enum {                                  /*!< CLOCK_LFCLKSRCCOPY_SRC                                                    */
  CLOCK_LFCLKSRCCOPY_SRC_RC            = 0,     /*!< RC : Internal 32KiHz RC oscillator.                                       */
  CLOCK_LFCLKSRCCOPY_SRC_Xtal          = 1,     /*!< Xtal : External 32KiHz crystal.                                           */
  CLOCK_LFCLKSRCCOPY_SRC_Synth         = 2,     /*!< Synth : Internal 32KiHz synthesizer from HFCLK system clock.              */
} CLOCK_LFCLKSRCCOPY_SRC_Enum;

/* =======================================================  LFCLKSRC  ======================================================== */
/* ===============================================  CLOCK LFCLKSRC SRC [0..1]  =============================================== */
typedef enum {                                  /*!< CLOCK_LFCLKSRC_SRC                                                        */
  CLOCK_LFCLKSRC_SRC_RC                = 0,     /*!< RC : Internal 32KiHz RC oscillator.                                       */
  CLOCK_LFCLKSRC_SRC_Xtal              = 1,     /*!< Xtal : External 32KiHz crystal.                                           */
  CLOCK_LFCLKSRC_SRC_Synth             = 2,     /*!< Synth : Internal 32KiHz synthesizer from HFCLK system clock.              */
} CLOCK_LFCLKSRC_SRC_Enum;

/* =========================================================  CTIV  ========================================================== */
/* =======================================================  XTALFREQ  ======================================================== */
/* ============================================  CLOCK XTALFREQ XTALFREQ [0..7]  ============================================= */
typedef enum {                                  /*!< CLOCK_XTALFREQ_XTALFREQ                                                   */
  CLOCK_XTALFREQ_XTALFREQ_16MHz        = 255,   /*!< 16MHz : 16MHz xtal is used as source for the HFCLK oscillator.            */
  CLOCK_XTALFREQ_XTALFREQ_32MHz        = 0,     /*!< 32MHz : 32MHz xtal is used as source for the HFCLK oscillator.            */
} CLOCK_XTALFREQ_XTALFREQ_Enum;



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  PERR0  ========================================================= */
/* =============================================  MPU PERR0 POWER_CLOCK [0..0]  ============================================== */
typedef enum {                                  /*!< MPU_PERR0_POWER_CLOCK                                                     */
  MPU_PERR0_POWER_CLOCK_InRegion0      = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_POWER_CLOCK_InRegion1      = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_POWER_CLOCK_Enum;

/* ================================================  MPU PERR0 RADIO [1..1]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_RADIO                                                           */
  MPU_PERR0_RADIO_InRegion0            = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_RADIO_InRegion1            = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_RADIO_Enum;

/* ================================================  MPU PERR0 UART0 [2..2]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_UART0                                                           */
  MPU_PERR0_UART0_InRegion0            = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_UART0_InRegion1            = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_UART0_Enum;

/* ==============================================  MPU PERR0 SPI0_TWI0 [3..3]  =============================================== */
typedef enum {                                  /*!< MPU_PERR0_SPI0_TWI0                                                       */
  MPU_PERR0_SPI0_TWI0_InRegion0        = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_SPI0_TWI0_InRegion1        = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_SPI0_TWI0_Enum;

/* ==============================================  MPU PERR0 SPI1_TWI1 [4..4]  =============================================== */
typedef enum {                                  /*!< MPU_PERR0_SPI1_TWI1                                                       */
  MPU_PERR0_SPI1_TWI1_InRegion0        = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_SPI1_TWI1_InRegion1        = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_SPI1_TWI1_Enum;

/* ================================================  MPU PERR0 GPIOTE [6..6]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_GPIOTE                                                          */
  MPU_PERR0_GPIOTE_InRegion0           = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_GPIOTE_InRegion1           = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_GPIOTE_Enum;

/* =================================================  MPU PERR0 ADC [7..7]  ================================================== */
typedef enum {                                  /*!< MPU_PERR0_ADC                                                             */
  MPU_PERR0_ADC_InRegion0              = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_ADC_InRegion1              = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_ADC_Enum;

/* ================================================  MPU PERR0 TIMER0 [8..8]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_TIMER0                                                          */
  MPU_PERR0_TIMER0_InRegion0           = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_TIMER0_InRegion1           = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_TIMER0_Enum;

/* ================================================  MPU PERR0 TIMER1 [9..9]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_TIMER1                                                          */
  MPU_PERR0_TIMER1_InRegion0           = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_TIMER1_InRegion1           = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_TIMER1_Enum;

/* ===============================================  MPU PERR0 TIMER2 [10..10]  =============================================== */
typedef enum {                                  /*!< MPU_PERR0_TIMER2                                                          */
  MPU_PERR0_TIMER2_InRegion0           = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_TIMER2_InRegion1           = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_TIMER2_Enum;

/* ================================================  MPU PERR0 RTC0 [11..11]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_RTC0                                                            */
  MPU_PERR0_RTC0_InRegion0             = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_RTC0_InRegion1             = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_RTC0_Enum;

/* ================================================  MPU PERR0 TEMP [12..12]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_TEMP                                                            */
  MPU_PERR0_TEMP_InRegion0             = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_TEMP_InRegion1             = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_TEMP_Enum;

/* ================================================  MPU PERR0 RNG [13..13]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_RNG                                                             */
  MPU_PERR0_RNG_InRegion0              = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_RNG_InRegion1              = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_RNG_Enum;

/* ================================================  MPU PERR0 ECB [14..14]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_ECB                                                             */
  MPU_PERR0_ECB_InRegion0              = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_ECB_InRegion1              = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_ECB_Enum;

/* ==============================================  MPU PERR0 CCM_AAR [15..15]  =============================================== */
typedef enum {                                  /*!< MPU_PERR0_CCM_AAR                                                         */
  MPU_PERR0_CCM_AAR_InRegion0          = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_CCM_AAR_InRegion1          = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_CCM_AAR_Enum;

/* ================================================  MPU PERR0 WDT [16..16]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_WDT                                                             */
  MPU_PERR0_WDT_InRegion0              = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_WDT_InRegion1              = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_WDT_Enum;

/* ================================================  MPU PERR0 RTC1 [17..17]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_RTC1                                                            */
  MPU_PERR0_RTC1_InRegion0             = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_RTC1_InRegion1             = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_RTC1_Enum;

/* ================================================  MPU PERR0 QDEC [18..18]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_QDEC                                                            */
  MPU_PERR0_QDEC_InRegion0             = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_QDEC_InRegion1             = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_QDEC_Enum;

/* ===============================================  MPU PERR0 LPCOMP [19..19]  =============================================== */
typedef enum {                                  /*!< MPU_PERR0_LPCOMP                                                          */
  MPU_PERR0_LPCOMP_InRegion0           = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_LPCOMP_InRegion1           = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_LPCOMP_Enum;

/* ================================================  MPU PERR0 NVMC [30..30]  ================================================ */
typedef enum {                                  /*!< MPU_PERR0_NVMC                                                            */
  MPU_PERR0_NVMC_InRegion0             = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_NVMC_InRegion1             = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_NVMC_Enum;

/* ================================================  MPU PERR0 PPI [31..31]  ================================================= */
typedef enum {                                  /*!< MPU_PERR0_PPI                                                             */
  MPU_PERR0_PPI_InRegion0              = 1,     /*!< InRegion0 : Peripheral configured in region 0.                            */
  MPU_PERR0_PPI_InRegion1              = 0,     /*!< InRegion1 : Peripheral configured in region 1.                            */
} MPU_PERR0_PPI_Enum;

/* ========================================================  RLENR0  ========================================================= */
/* ======================================================  PROTENSET0  ======================================================= */
/* ============================================  MPU PROTENSET0 PROTREG0 [0..0]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG0                                                   */
  MPU_PROTENSET0_PROTREG0_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG0_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG0_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG0                                                   */
  MPU_PROTENSET0_PROTREG0_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG0_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG1 [1..1]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG1                                                   */
  MPU_PROTENSET0_PROTREG1_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG1_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG1_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG1                                                   */
  MPU_PROTENSET0_PROTREG1_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG1_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG2 [2..2]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG2                                                   */
  MPU_PROTENSET0_PROTREG2_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG2_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG2_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG2                                                   */
  MPU_PROTENSET0_PROTREG2_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG2_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG3 [3..3]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG3                                                   */
  MPU_PROTENSET0_PROTREG3_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG3_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG3_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG3                                                   */
  MPU_PROTENSET0_PROTREG3_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG3_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG4 [4..4]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG4                                                   */
  MPU_PROTENSET0_PROTREG4_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG4_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG4_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG4                                                   */
  MPU_PROTENSET0_PROTREG4_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG4_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG5 [5..5]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG5                                                   */
  MPU_PROTENSET0_PROTREG5_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG5_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG5_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG5                                                   */
  MPU_PROTENSET0_PROTREG5_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG5_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG6 [6..6]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG6                                                   */
  MPU_PROTENSET0_PROTREG6_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG6_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG6_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG6                                                   */
  MPU_PROTENSET0_PROTREG6_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG6_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG7 [7..7]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG7                                                   */
  MPU_PROTENSET0_PROTREG7_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG7_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG7_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG7                                                   */
  MPU_PROTENSET0_PROTREG7_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG7_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG8 [8..8]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG8                                                   */
  MPU_PROTENSET0_PROTREG8_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG8_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG8_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG8                                                   */
  MPU_PROTENSET0_PROTREG8_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG8_W_Enum;

/* ============================================  MPU PROTENSET0 PROTREG9 [9..9]  ============================================= */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG9                                                   */
  MPU_PROTENSET0_PROTREG9_Disabled     = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG9_Enabled      = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG9_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG9                                                   */
  MPU_PROTENSET0_PROTREG9_Set          = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG9_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG10 [10..10]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG10                                                  */
  MPU_PROTENSET0_PROTREG10_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG10_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG10_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG10                                                  */
  MPU_PROTENSET0_PROTREG10_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG10_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG11 [11..11]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG11                                                  */
  MPU_PROTENSET0_PROTREG11_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG11_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG11_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG11                                                  */
  MPU_PROTENSET0_PROTREG11_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG11_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG12 [12..12]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG12                                                  */
  MPU_PROTENSET0_PROTREG12_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG12_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG12_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG12                                                  */
  MPU_PROTENSET0_PROTREG12_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG12_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG13 [13..13]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG13                                                  */
  MPU_PROTENSET0_PROTREG13_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG13_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG13_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG13                                                  */
  MPU_PROTENSET0_PROTREG13_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG13_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG14 [14..14]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG14                                                  */
  MPU_PROTENSET0_PROTREG14_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG14_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG14_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG14                                                  */
  MPU_PROTENSET0_PROTREG14_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG14_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG15 [15..15]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG15                                                  */
  MPU_PROTENSET0_PROTREG15_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG15_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG15_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG15                                                  */
  MPU_PROTENSET0_PROTREG15_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG15_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG16 [16..16]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG16                                                  */
  MPU_PROTENSET0_PROTREG16_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG16_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG16_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG16                                                  */
  MPU_PROTENSET0_PROTREG16_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG16_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG17 [17..17]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG17                                                  */
  MPU_PROTENSET0_PROTREG17_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG17_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG17_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG17                                                  */
  MPU_PROTENSET0_PROTREG17_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG17_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG18 [18..18]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG18                                                  */
  MPU_PROTENSET0_PROTREG18_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG18_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG18_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG18                                                  */
  MPU_PROTENSET0_PROTREG18_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG18_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG19 [19..19]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG19                                                  */
  MPU_PROTENSET0_PROTREG19_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG19_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG19_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG19                                                  */
  MPU_PROTENSET0_PROTREG19_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG19_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG20 [20..20]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG20                                                  */
  MPU_PROTENSET0_PROTREG20_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG20_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG20_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG20                                                  */
  MPU_PROTENSET0_PROTREG20_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG20_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG21 [21..21]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG21                                                  */
  MPU_PROTENSET0_PROTREG21_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG21_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG21_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG21                                                  */
  MPU_PROTENSET0_PROTREG21_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG21_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG22 [22..22]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG22                                                  */
  MPU_PROTENSET0_PROTREG22_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG22_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG22_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG22                                                  */
  MPU_PROTENSET0_PROTREG22_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG22_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG23 [23..23]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG23                                                  */
  MPU_PROTENSET0_PROTREG23_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG23_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG23_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG23                                                  */
  MPU_PROTENSET0_PROTREG23_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG23_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG24 [24..24]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG24                                                  */
  MPU_PROTENSET0_PROTREG24_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG24_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG24_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG24                                                  */
  MPU_PROTENSET0_PROTREG24_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG24_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG25 [25..25]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG25                                                  */
  MPU_PROTENSET0_PROTREG25_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG25_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG25_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG25                                                  */
  MPU_PROTENSET0_PROTREG25_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG25_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG26 [26..26]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG26                                                  */
  MPU_PROTENSET0_PROTREG26_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG26_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG26_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG26                                                  */
  MPU_PROTENSET0_PROTREG26_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG26_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG27 [27..27]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG27                                                  */
  MPU_PROTENSET0_PROTREG27_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG27_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG27_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG27                                                  */
  MPU_PROTENSET0_PROTREG27_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG27_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG28 [28..28]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG28                                                  */
  MPU_PROTENSET0_PROTREG28_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG28_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG28_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG28                                                  */
  MPU_PROTENSET0_PROTREG28_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG28_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG29 [29..29]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG29                                                  */
  MPU_PROTENSET0_PROTREG29_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG29_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG29_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG29                                                  */
  MPU_PROTENSET0_PROTREG29_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG29_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG30 [30..30]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG30                                                  */
  MPU_PROTENSET0_PROTREG30_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG30_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG30_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG30                                                  */
  MPU_PROTENSET0_PROTREG30_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG30_W_Enum;

/* ===========================================  MPU PROTENSET0 PROTREG31 [31..31]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG31                                                  */
  MPU_PROTENSET0_PROTREG31_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET0_PROTREG31_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET0_PROTREG31_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET0_PROTREG31                                                  */
  MPU_PROTENSET0_PROTREG31_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET0_PROTREG31_W_Enum;

/* ======================================================  PROTENSET1  ======================================================= */
/* ============================================  MPU PROTENSET1 PROTREG32 [0..0]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG32                                                  */
  MPU_PROTENSET1_PROTREG32_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG32_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG32_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG32                                                  */
  MPU_PROTENSET1_PROTREG32_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG32_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG33 [1..1]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG33                                                  */
  MPU_PROTENSET1_PROTREG33_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG33_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG33_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG33                                                  */
  MPU_PROTENSET1_PROTREG33_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG33_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG34 [2..2]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG34                                                  */
  MPU_PROTENSET1_PROTREG34_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG34_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG34_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG34                                                  */
  MPU_PROTENSET1_PROTREG34_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG34_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG35 [3..3]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG35                                                  */
  MPU_PROTENSET1_PROTREG35_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG35_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG35_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG35                                                  */
  MPU_PROTENSET1_PROTREG35_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG35_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG36 [4..4]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG36                                                  */
  MPU_PROTENSET1_PROTREG36_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG36_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG36_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG36                                                  */
  MPU_PROTENSET1_PROTREG36_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG36_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG37 [5..5]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG37                                                  */
  MPU_PROTENSET1_PROTREG37_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG37_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG37_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG37                                                  */
  MPU_PROTENSET1_PROTREG37_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG37_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG38 [6..6]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG38                                                  */
  MPU_PROTENSET1_PROTREG38_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG38_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG38_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG38                                                  */
  MPU_PROTENSET1_PROTREG38_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG38_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG39 [7..7]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG39                                                  */
  MPU_PROTENSET1_PROTREG39_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG39_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG39_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG39                                                  */
  MPU_PROTENSET1_PROTREG39_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG39_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG40 [8..8]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG40                                                  */
  MPU_PROTENSET1_PROTREG40_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG40_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG40_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG40                                                  */
  MPU_PROTENSET1_PROTREG40_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG40_W_Enum;

/* ============================================  MPU PROTENSET1 PROTREG41 [9..9]  ============================================ */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG41                                                  */
  MPU_PROTENSET1_PROTREG41_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG41_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG41_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG41                                                  */
  MPU_PROTENSET1_PROTREG41_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG41_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG42 [10..10]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG42                                                  */
  MPU_PROTENSET1_PROTREG42_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG42_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG42_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG42                                                  */
  MPU_PROTENSET1_PROTREG42_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG42_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG43 [11..11]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG43                                                  */
  MPU_PROTENSET1_PROTREG43_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG43_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG43_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG43                                                  */
  MPU_PROTENSET1_PROTREG43_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG43_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG44 [12..12]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG44                                                  */
  MPU_PROTENSET1_PROTREG44_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG44_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG44_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG44                                                  */
  MPU_PROTENSET1_PROTREG44_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG44_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG45 [13..13]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG45                                                  */
  MPU_PROTENSET1_PROTREG45_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG45_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG45_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG45                                                  */
  MPU_PROTENSET1_PROTREG45_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG45_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG46 [14..14]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG46                                                  */
  MPU_PROTENSET1_PROTREG46_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG46_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG46_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG46                                                  */
  MPU_PROTENSET1_PROTREG46_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG46_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG47 [15..15]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG47                                                  */
  MPU_PROTENSET1_PROTREG47_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG47_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG47_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG47                                                  */
  MPU_PROTENSET1_PROTREG47_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG47_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG48 [16..16]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG48                                                  */
  MPU_PROTENSET1_PROTREG48_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG48_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG48_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG48                                                  */
  MPU_PROTENSET1_PROTREG48_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG48_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG49 [17..17]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG49                                                  */
  MPU_PROTENSET1_PROTREG49_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG49_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG49_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG49                                                  */
  MPU_PROTENSET1_PROTREG49_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG49_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG50 [18..18]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG50                                                  */
  MPU_PROTENSET1_PROTREG50_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG50_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG50_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG50                                                  */
  MPU_PROTENSET1_PROTREG50_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG50_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG51 [19..19]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG51                                                  */
  MPU_PROTENSET1_PROTREG51_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG51_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG51_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG51                                                  */
  MPU_PROTENSET1_PROTREG51_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG51_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG52 [20..20]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG52                                                  */
  MPU_PROTENSET1_PROTREG52_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG52_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG52_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG52                                                  */
  MPU_PROTENSET1_PROTREG52_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG52_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG53 [21..21]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG53                                                  */
  MPU_PROTENSET1_PROTREG53_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG53_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG53_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG53                                                  */
  MPU_PROTENSET1_PROTREG53_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG53_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG54 [22..22]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG54                                                  */
  MPU_PROTENSET1_PROTREG54_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG54_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG54_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG54                                                  */
  MPU_PROTENSET1_PROTREG54_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG54_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG55 [23..23]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG55                                                  */
  MPU_PROTENSET1_PROTREG55_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG55_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG55_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG55                                                  */
  MPU_PROTENSET1_PROTREG55_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG55_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG56 [24..24]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG56                                                  */
  MPU_PROTENSET1_PROTREG56_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG56_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG56_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG56                                                  */
  MPU_PROTENSET1_PROTREG56_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG56_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG57 [25..25]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG57                                                  */
  MPU_PROTENSET1_PROTREG57_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG57_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG57_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG57                                                  */
  MPU_PROTENSET1_PROTREG57_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG57_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG58 [26..26]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG58                                                  */
  MPU_PROTENSET1_PROTREG58_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG58_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG58_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG58                                                  */
  MPU_PROTENSET1_PROTREG58_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG58_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG59 [27..27]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG59                                                  */
  MPU_PROTENSET1_PROTREG59_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG59_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG59_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG59                                                  */
  MPU_PROTENSET1_PROTREG59_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG59_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG60 [28..28]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG60                                                  */
  MPU_PROTENSET1_PROTREG60_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG60_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG60_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG60                                                  */
  MPU_PROTENSET1_PROTREG60_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG60_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG61 [29..29]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG61                                                  */
  MPU_PROTENSET1_PROTREG61_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG61_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG61_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG61                                                  */
  MPU_PROTENSET1_PROTREG61_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG61_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG62 [30..30]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG62                                                  */
  MPU_PROTENSET1_PROTREG62_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG62_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG62_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG62                                                  */
  MPU_PROTENSET1_PROTREG62_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG62_W_Enum;

/* ===========================================  MPU PROTENSET1 PROTREG63 [31..31]  =========================================== */
typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG63                                                  */
  MPU_PROTENSET1_PROTREG63_Disabled    = 0,     /*!< Disabled : Protection disabled.                                           */
  MPU_PROTENSET1_PROTREG63_Enabled     = 1,     /*!< Enabled : Protection enabled.                                             */
} MPU_PROTENSET1_PROTREG63_R_Enum;

typedef enum {                                  /*!< MPU_PROTENSET1_PROTREG63                                                  */
  MPU_PROTENSET1_PROTREG63_Set         = 1,     /*!< Set : Enable protection on write.                                         */
} MPU_PROTENSET1_PROTREG63_W_Enum;

/* ====================================================  DISABLEINDEBUG  ===================================================== */
/* =======================================  MPU DISABLEINDEBUG DISABLEINDEBUG [0..0]  ======================================== */
typedef enum {                                  /*!< MPU_DISABLEINDEBUG_DISABLEINDEBUG                                         */
  MPU_DISABLEINDEBUG_DISABLEINDEBUG_Enabled = 0,/*!< Enabled : Protection enabled.                                             */
  MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled = 1,/*!< Disabled : Protection disabled.                                          */
} MPU_DISABLEINDEBUG_DISABLEINDEBUG_Enum;

/* =====================================================  PROTBLOCKSIZE  ===================================================== */
/* ========================================  MPU PROTBLOCKSIZE PROTBLOCKSIZE [0..1]  ========================================= */
typedef enum {                                  /*!< MPU_PROTBLOCKSIZE_PROTBLOCKSIZE                                           */
  MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_4k   = 0,     /*!< 4k : Erase and write protection block size is 4k.                         */
} MPU_PROTBLOCKSIZE_PROTBLOCKSIZE_Enum;



/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_TXEN  ======================================================= */
/* ======================================================  TASKS_RXEN  ======================================================= */
/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* =====================================================  TASKS_DISABLE  ===================================================== */
/* ====================================================  TASKS_RSSISTART  ==================================================== */
/* ====================================================  TASKS_RSSISTOP  ===================================================== */
/* =====================================================  TASKS_BCSTART  ===================================================== */
/* =====================================================  TASKS_BCSTOP  ====================================================== */
/* =====================================================  EVENTS_READY  ====================================================== */
/* ====================================================  EVENTS_ADDRESS  ===================================================== */
/* ====================================================  EVENTS_PAYLOAD  ===================================================== */
/* ======================================================  EVENTS_END  ======================================================= */
/* ====================================================  EVENTS_DISABLED  ==================================================== */
/* ====================================================  EVENTS_DEVMATCH  ==================================================== */
/* ====================================================  EVENTS_DEVMISS  ===================================================== */
/* ====================================================  EVENTS_RSSIEND  ===================================================== */
/* ====================================================  EVENTS_BCMATCH  ===================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ============================================  RADIO SHORTS READY_START [0..0]  ============================================ */
typedef enum {                                  /*!< RADIO_SHORTS_READY_START                                                  */
  RADIO_SHORTS_READY_START_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_READY_START_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_READY_START_Enum;

/* ============================================  RADIO SHORTS END_DISABLE [1..1]  ============================================ */
typedef enum {                                  /*!< RADIO_SHORTS_END_DISABLE                                                  */
  RADIO_SHORTS_END_DISABLE_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_END_DISABLE_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_END_DISABLE_Enum;

/* ===========================================  RADIO SHORTS DISABLED_TXEN [2..2]  =========================================== */
typedef enum {                                  /*!< RADIO_SHORTS_DISABLED_TXEN                                                */
  RADIO_SHORTS_DISABLED_TXEN_Disabled  = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_DISABLED_TXEN_Enabled   = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_DISABLED_TXEN_Enum;

/* ===========================================  RADIO SHORTS DISABLED_RXEN [3..3]  =========================================== */
typedef enum {                                  /*!< RADIO_SHORTS_DISABLED_RXEN                                                */
  RADIO_SHORTS_DISABLED_RXEN_Disabled  = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_DISABLED_RXEN_Enabled   = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_DISABLED_RXEN_Enum;

/* =========================================  RADIO SHORTS ADDRESS_RSSISTART [4..4]  ========================================= */
typedef enum {                                  /*!< RADIO_SHORTS_ADDRESS_RSSISTART                                            */
  RADIO_SHORTS_ADDRESS_RSSISTART_Disabled = 0,  /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_ADDRESS_RSSISTART_Enabled = 1,   /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_ADDRESS_RSSISTART_Enum;

/* =============================================  RADIO SHORTS END_START [5..5]  ============================================= */
typedef enum {                                  /*!< RADIO_SHORTS_END_START                                                    */
  RADIO_SHORTS_END_START_Disabled      = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_END_START_Enabled       = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_END_START_Enum;

/* ==========================================  RADIO SHORTS ADDRESS_BCSTART [6..6]  ========================================== */
typedef enum {                                  /*!< RADIO_SHORTS_ADDRESS_BCSTART                                              */
  RADIO_SHORTS_ADDRESS_BCSTART_Disabled = 0,    /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_ADDRESS_BCSTART_Enabled = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_ADDRESS_BCSTART_Enum;

/* =========================================  RADIO SHORTS DISABLED_RSSISTOP [8..8]  ========================================= */
typedef enum {                                  /*!< RADIO_SHORTS_DISABLED_RSSISTOP                                            */
  RADIO_SHORTS_DISABLED_RSSISTOP_Disabled = 0,  /*!< Disabled : Shortcut disabled.                                             */
  RADIO_SHORTS_DISABLED_RSSISTOP_Enabled = 1,   /*!< Enabled : Shortcut enabled.                                               */
} RADIO_SHORTS_DISABLED_RSSISTOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  RADIO INTENSET READY [0..0]  ============================================== */
typedef enum {                                  /*!< RADIO_INTENSET_READY                                                      */
  RADIO_INTENSET_READY_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_READY_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_READY_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_READY                                                      */
  RADIO_INTENSET_READY_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_READY_W_Enum;

/* =============================================  RADIO INTENSET ADDRESS [1..1]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_ADDRESS                                                    */
  RADIO_INTENSET_ADDRESS_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_ADDRESS_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_ADDRESS_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_ADDRESS                                                    */
  RADIO_INTENSET_ADDRESS_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_ADDRESS_W_Enum;

/* =============================================  RADIO INTENSET PAYLOAD [2..2]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_PAYLOAD                                                    */
  RADIO_INTENSET_PAYLOAD_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_PAYLOAD_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_PAYLOAD_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_PAYLOAD                                                    */
  RADIO_INTENSET_PAYLOAD_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_PAYLOAD_W_Enum;

/* ===============================================  RADIO INTENSET END [3..3]  =============================================== */
typedef enum {                                  /*!< RADIO_INTENSET_END                                                        */
  RADIO_INTENSET_END_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_END_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_END_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_END                                                        */
  RADIO_INTENSET_END_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_END_W_Enum;

/* ============================================  RADIO INTENSET DISABLED [4..4]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_DISABLED                                                   */
  RADIO_INTENSET_DISABLED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_DISABLED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_DISABLED_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_DISABLED                                                   */
  RADIO_INTENSET_DISABLED_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_DISABLED_W_Enum;

/* ============================================  RADIO INTENSET DEVMATCH [5..5]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_DEVMATCH                                                   */
  RADIO_INTENSET_DEVMATCH_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_DEVMATCH_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_DEVMATCH_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_DEVMATCH                                                   */
  RADIO_INTENSET_DEVMATCH_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_DEVMATCH_W_Enum;

/* =============================================  RADIO INTENSET DEVMISS [6..6]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_DEVMISS                                                    */
  RADIO_INTENSET_DEVMISS_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_DEVMISS_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_DEVMISS_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_DEVMISS                                                    */
  RADIO_INTENSET_DEVMISS_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_DEVMISS_W_Enum;

/* =============================================  RADIO INTENSET RSSIEND [7..7]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENSET_RSSIEND                                                    */
  RADIO_INTENSET_RSSIEND_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_RSSIEND_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_RSSIEND_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_RSSIEND                                                    */
  RADIO_INTENSET_RSSIEND_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_RSSIEND_W_Enum;

/* ============================================  RADIO INTENSET BCMATCH [10..10]  ============================================ */
typedef enum {                                  /*!< RADIO_INTENSET_BCMATCH                                                    */
  RADIO_INTENSET_BCMATCH_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENSET_BCMATCH_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENSET_BCMATCH_R_Enum;

typedef enum {                                  /*!< RADIO_INTENSET_BCMATCH                                                    */
  RADIO_INTENSET_BCMATCH_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RADIO_INTENSET_BCMATCH_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  RADIO INTENCLR READY [0..0]  ============================================== */
typedef enum {                                  /*!< RADIO_INTENCLR_READY                                                      */
  RADIO_INTENCLR_READY_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_READY_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_READY_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_READY                                                      */
  RADIO_INTENCLR_READY_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_READY_W_Enum;

/* =============================================  RADIO INTENCLR ADDRESS [1..1]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_ADDRESS                                                    */
  RADIO_INTENCLR_ADDRESS_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_ADDRESS_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_ADDRESS_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_ADDRESS                                                    */
  RADIO_INTENCLR_ADDRESS_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_ADDRESS_W_Enum;

/* =============================================  RADIO INTENCLR PAYLOAD [2..2]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_PAYLOAD                                                    */
  RADIO_INTENCLR_PAYLOAD_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_PAYLOAD_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_PAYLOAD_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_PAYLOAD                                                    */
  RADIO_INTENCLR_PAYLOAD_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_PAYLOAD_W_Enum;

/* ===============================================  RADIO INTENCLR END [3..3]  =============================================== */
typedef enum {                                  /*!< RADIO_INTENCLR_END                                                        */
  RADIO_INTENCLR_END_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_END_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_END_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_END                                                        */
  RADIO_INTENCLR_END_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_END_W_Enum;

/* ============================================  RADIO INTENCLR DISABLED [4..4]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_DISABLED                                                   */
  RADIO_INTENCLR_DISABLED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_DISABLED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_DISABLED_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_DISABLED                                                   */
  RADIO_INTENCLR_DISABLED_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_DISABLED_W_Enum;

/* ============================================  RADIO INTENCLR DEVMATCH [5..5]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_DEVMATCH                                                   */
  RADIO_INTENCLR_DEVMATCH_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_DEVMATCH_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_DEVMATCH_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_DEVMATCH                                                   */
  RADIO_INTENCLR_DEVMATCH_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_DEVMATCH_W_Enum;

/* =============================================  RADIO INTENCLR DEVMISS [6..6]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_DEVMISS                                                    */
  RADIO_INTENCLR_DEVMISS_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_DEVMISS_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_DEVMISS_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_DEVMISS                                                    */
  RADIO_INTENCLR_DEVMISS_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_DEVMISS_W_Enum;

/* =============================================  RADIO INTENCLR RSSIEND [7..7]  ============================================= */
typedef enum {                                  /*!< RADIO_INTENCLR_RSSIEND                                                    */
  RADIO_INTENCLR_RSSIEND_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_RSSIEND_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_RSSIEND_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_RSSIEND                                                    */
  RADIO_INTENCLR_RSSIEND_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_RSSIEND_W_Enum;

/* ============================================  RADIO INTENCLR BCMATCH [10..10]  ============================================ */
typedef enum {                                  /*!< RADIO_INTENCLR_BCMATCH                                                    */
  RADIO_INTENCLR_BCMATCH_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RADIO_INTENCLR_BCMATCH_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RADIO_INTENCLR_BCMATCH_R_Enum;

typedef enum {                                  /*!< RADIO_INTENCLR_BCMATCH                                                    */
  RADIO_INTENCLR_BCMATCH_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RADIO_INTENCLR_BCMATCH_W_Enum;

/* =======================================================  CRCSTATUS  ======================================================= */
/* ===========================================  RADIO CRCSTATUS CRCSTATUS [0..0]  ============================================ */
typedef enum {                                  /*!< RADIO_CRCSTATUS_CRCSTATUS                                                 */
  RADIO_CRCSTATUS_CRCSTATUS_CRCError   = 0,     /*!< CRCError : Packet received with CRC error.                                */
  RADIO_CRCSTATUS_CRCSTATUS_CRCOk      = 1,     /*!< CRCOk : Packet received with CRC ok.                                      */
} RADIO_CRCSTATUS_CRCSTATUS_Enum;

/* ========================================================  RXMATCH  ======================================================== */
/* =========================================================  RXCRC  ========================================================= */
/* ==========================================================  DAI  ========================================================== */
/* =======================================================  PACKETPTR  ======================================================= */
/* =======================================================  FREQUENCY  ======================================================= */
/* ========================================================  TXPOWER  ======================================================== */
/* =============================================  RADIO TXPOWER TXPOWER [0..7]  ============================================== */
typedef enum {                                  /*!< RADIO_TXPOWER_TXPOWER                                                     */
  RADIO_TXPOWER_TXPOWER_Pos4dBm        = 4,     /*!< Pos4dBm : +4dBm.                                                          */
  RADIO_TXPOWER_TXPOWER_0dBm           = 0,     /*!< 0dBm : 0dBm.                                                              */
  RADIO_TXPOWER_TXPOWER_Neg4dBm        = 252,   /*!< Neg4dBm : -4dBm.                                                          */
  RADIO_TXPOWER_TXPOWER_Neg8dBm        = 248,   /*!< Neg8dBm : -8dBm.                                                          */
  RADIO_TXPOWER_TXPOWER_Neg12dBm       = 244,   /*!< Neg12dBm : -12dBm.                                                        */
  RADIO_TXPOWER_TXPOWER_Neg16dBm       = 240,   /*!< Neg16dBm : -16dBm.                                                        */
  RADIO_TXPOWER_TXPOWER_Neg20dBm       = 236,   /*!< Neg20dBm : -20dBm.                                                        */
  RADIO_TXPOWER_TXPOWER_Neg30dBm       = 216,   /*!< Neg30dBm : -30dBm.                                                        */
} RADIO_TXPOWER_TXPOWER_Enum;

/* =========================================================  MODE  ========================================================== */
/* ================================================  RADIO MODE MODE [0..1]  ================================================= */
typedef enum {                                  /*!< RADIO_MODE_MODE                                                           */
  RADIO_MODE_MODE_Nrf_1Mbit            = 0,     /*!< Nrf_1Mbit : 1Mbit/s Nordic propietary radio mode.                         */
  RADIO_MODE_MODE_Nrf_2Mbit            = 1,     /*!< Nrf_2Mbit : 2Mbit/s Nordic propietary radio mode.                         */
  RADIO_MODE_MODE_Nrf_250Kbit          = 2,     /*!< Nrf_250Kbit : 250kbit/s Nordic propietary radio mode.                     */
  RADIO_MODE_MODE_Ble_1Mbit            = 3,     /*!< Ble_1Mbit : 1Mbit/s Bluetooth Low Energy                                  */
} RADIO_MODE_MODE_Enum;

/* =========================================================  PCNF0  ========================================================= */
/* =========================================================  PCNF1  ========================================================= */
/* ==============================================  RADIO PCNF1 ENDIAN [24..24]  ============================================== */
typedef enum {                                  /*!< RADIO_PCNF1_ENDIAN                                                        */
  RADIO_PCNF1_ENDIAN_Little            = 0,     /*!< Little : Least significant bit on air first                               */
  RADIO_PCNF1_ENDIAN_Big               = 1,     /*!< Big : Most significant bit on air first                                   */
} RADIO_PCNF1_ENDIAN_Enum;

/* =============================================  RADIO PCNF1 WHITEEN [25..25]  ============================================== */
typedef enum {                                  /*!< RADIO_PCNF1_WHITEEN                                                       */
  RADIO_PCNF1_WHITEEN_Disabled         = 0,     /*!< Disabled : Whitening disabled.                                            */
  RADIO_PCNF1_WHITEEN_Enabled          = 1,     /*!< Enabled : Whitening enabled.                                              */
} RADIO_PCNF1_WHITEEN_Enum;

/* =========================================================  BASE0  ========================================================= */
/* =========================================================  BASE1  ========================================================= */
/* ========================================================  PREFIX0  ======================================================== */
/* ========================================================  PREFIX1  ======================================================== */
/* =======================================================  TXADDRESS  ======================================================= */
/* ======================================================  RXADDRESSES  ====================================================== */
/* ============================================  RADIO RXADDRESSES ADDR0 [0..0]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR0                                                   */
  RADIO_RXADDRESSES_ADDR0_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR0_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR0_Enum;

/* ============================================  RADIO RXADDRESSES ADDR1 [1..1]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR1                                                   */
  RADIO_RXADDRESSES_ADDR1_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR1_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR1_Enum;

/* ============================================  RADIO RXADDRESSES ADDR2 [2..2]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR2                                                   */
  RADIO_RXADDRESSES_ADDR2_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR2_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR2_Enum;

/* ============================================  RADIO RXADDRESSES ADDR3 [3..3]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR3                                                   */
  RADIO_RXADDRESSES_ADDR3_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR3_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR3_Enum;

/* ============================================  RADIO RXADDRESSES ADDR4 [4..4]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR4                                                   */
  RADIO_RXADDRESSES_ADDR4_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR4_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR4_Enum;

/* ============================================  RADIO RXADDRESSES ADDR5 [5..5]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR5                                                   */
  RADIO_RXADDRESSES_ADDR5_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR5_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR5_Enum;

/* ============================================  RADIO RXADDRESSES ADDR6 [6..6]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR6                                                   */
  RADIO_RXADDRESSES_ADDR6_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR6_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR6_Enum;

/* ============================================  RADIO RXADDRESSES ADDR7 [7..7]  ============================================= */
typedef enum {                                  /*!< RADIO_RXADDRESSES_ADDR7                                                   */
  RADIO_RXADDRESSES_ADDR7_Disabled     = 0,     /*!< Disabled : Reception disabled.                                            */
  RADIO_RXADDRESSES_ADDR7_Enabled      = 1,     /*!< Enabled : Reception enabled.                                              */
} RADIO_RXADDRESSES_ADDR7_Enum;

/* ========================================================  CRCCNF  ========================================================= */
/* ================================================  RADIO CRCCNF LEN [0..1]  ================================================ */
typedef enum {                                  /*!< RADIO_CRCCNF_LEN                                                          */
  RADIO_CRCCNF_LEN_Disabled            = 0,     /*!< Disabled : CRC calculation disabled.                                      */
  RADIO_CRCCNF_LEN_One                 = 1,     /*!< One : One byte long CRC.                                                  */
  RADIO_CRCCNF_LEN_Two                 = 2,     /*!< Two : Two bytes long CRC.                                                 */
  RADIO_CRCCNF_LEN_Three               = 3,     /*!< Three : Three bytes long CRC.                                             */
} RADIO_CRCCNF_LEN_Enum;

/* =============================================  RADIO CRCCNF SKIPADDR [8..8]  ============================================== */
typedef enum {                                  /*!< RADIO_CRCCNF_SKIPADDR                                                     */
  RADIO_CRCCNF_SKIPADDR_Include        = 0,     /*!< Include : Include packet address in CRC calculation.                      */
  RADIO_CRCCNF_SKIPADDR_Skip           = 1,     /*!< Skip : Packet address is skipped in CRC calculation. The CRC
                                                     calculation will start at the first byte after the address.               */
} RADIO_CRCCNF_SKIPADDR_Enum;

/* ========================================================  CRCPOLY  ======================================================== */
/* ========================================================  CRCINIT  ======================================================== */
/* =========================================================  TEST  ========================================================== */
/* ============================================  RADIO TEST CONSTCARRIER [0..0]  ============================================= */
typedef enum {                                  /*!< RADIO_TEST_CONSTCARRIER                                                   */
  RADIO_TEST_CONSTCARRIER_Disabled     = 0,     /*!< Disabled : Constant carrier disabled.                                     */
  RADIO_TEST_CONSTCARRIER_Enabled      = 1,     /*!< Enabled : Constant carrier enabled.                                       */
} RADIO_TEST_CONSTCARRIER_Enum;

/* ===============================================  RADIO TEST PLLLOCK [1..1]  =============================================== */
typedef enum {                                  /*!< RADIO_TEST_PLLLOCK                                                        */
  RADIO_TEST_PLLLOCK_Disabled          = 0,     /*!< Disabled : PLL lock disabled.                                             */
  RADIO_TEST_PLLLOCK_Enabled           = 1,     /*!< Enabled : PLL lock enabled.                                               */
} RADIO_TEST_PLLLOCK_Enum;

/* =========================================================  TIFS  ========================================================== */
/* ======================================================  RSSISAMPLE  ======================================================= */
/* =========================================================  STATE  ========================================================= */
/* ===============================================  RADIO STATE STATE [0..3]  ================================================ */
typedef enum {                                  /*!< RADIO_STATE_STATE                                                         */
  RADIO_STATE_STATE_Disabled           = 0,     /*!< Disabled : Radio is in the Disabled state.                                */
  RADIO_STATE_STATE_RxRu               = 1,     /*!< RxRu : Radio is in the Rx Ramp Up state.                                  */
  RADIO_STATE_STATE_RxIdle             = 2,     /*!< RxIdle : Radio is in the Rx Idle state.                                   */
  RADIO_STATE_STATE_Rx                 = 3,     /*!< Rx : Radio is in the Rx state.                                            */
  RADIO_STATE_STATE_RxDisable          = 4,     /*!< RxDisable : Radio is in the Rx Disable state.                             */
  RADIO_STATE_STATE_TxRu               = 9,     /*!< TxRu : Radio is in the Tx Ramp Up state.                                  */
  RADIO_STATE_STATE_TxIdle             = 10,    /*!< TxIdle : Radio is in the Tx Idle state.                                   */
  RADIO_STATE_STATE_Tx                 = 11,    /*!< Tx : Radio is in the Tx state.                                            */
  RADIO_STATE_STATE_TxDisable          = 12,    /*!< TxDisable : Radio is in the Tx Disable state.                             */
} RADIO_STATE_STATE_Enum;

/* ======================================================  DATAWHITEIV  ====================================================== */
/* ==========================================================  BCC  ========================================================== */
/* ==========================================================  DAB  ========================================================== */
/* ==========================================================  DAP  ========================================================== */
/* =========================================================  DACNF  ========================================================= */
/* ================================================  RADIO DACNF ENA0 [0..0]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA0                                                          */
  RADIO_DACNF_ENA0_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA0_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA0_Enum;

/* ================================================  RADIO DACNF ENA1 [1..1]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA1                                                          */
  RADIO_DACNF_ENA1_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA1_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA1_Enum;

/* ================================================  RADIO DACNF ENA2 [2..2]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA2                                                          */
  RADIO_DACNF_ENA2_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA2_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA2_Enum;

/* ================================================  RADIO DACNF ENA3 [3..3]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA3                                                          */
  RADIO_DACNF_ENA3_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA3_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA3_Enum;

/* ================================================  RADIO DACNF ENA4 [4..4]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA4                                                          */
  RADIO_DACNF_ENA4_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA4_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA4_Enum;

/* ================================================  RADIO DACNF ENA5 [5..5]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA5                                                          */
  RADIO_DACNF_ENA5_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA5_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA5_Enum;

/* ================================================  RADIO DACNF ENA6 [6..6]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA6                                                          */
  RADIO_DACNF_ENA6_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA6_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA6_Enum;

/* ================================================  RADIO DACNF ENA7 [7..7]  ================================================ */
typedef enum {                                  /*!< RADIO_DACNF_ENA7                                                          */
  RADIO_DACNF_ENA7_Disabled            = 0,     /*!< Disabled : Disabled.                                                      */
  RADIO_DACNF_ENA7_Enabled             = 1,     /*!< Enabled : Enabled.                                                        */
} RADIO_DACNF_ENA7_Enum;

/* =======================================================  OVERRIDE0  ======================================================= */
/* =======================================================  OVERRIDE1  ======================================================= */
/* =======================================================  OVERRIDE2  ======================================================= */
/* =======================================================  OVERRIDE3  ======================================================= */
/* =======================================================  OVERRIDE4  ======================================================= */
/* ============================================  RADIO OVERRIDE4 ENABLE [31..31]  ============================================ */
typedef enum {                                  /*!< RADIO_OVERRIDE4_ENABLE                                                    */
  RADIO_OVERRIDE4_ENABLE_Disabled      = 0,     /*!< Disabled : Override trim values disabled.                                 */
  RADIO_OVERRIDE4_ENABLE_Enabled       = 1,     /*!< Enabled : Override trim values enabled.                                   */
} RADIO_OVERRIDE4_ENABLE_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  RADIO POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< RADIO_POWER_POWER                                                         */
  RADIO_POWER_POWER_Disabled           = 0,     /*!< Disabled : Module power disabled.                                         */
  RADIO_POWER_POWER_Enabled            = 1,     /*!< Enabled : Module power enabled.                                           */
} RADIO_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* =====================================================  TASKS_STARTRX  ===================================================== */
/* =====================================================  TASKS_STOPRX  ====================================================== */
/* =====================================================  TASKS_STARTTX  ===================================================== */
/* =====================================================  TASKS_STOPTX  ====================================================== */
/* =====================================================  TASKS_SUSPEND  ===================================================== */
/* ======================================================  EVENTS_CTS  ======================================================= */
/* ======================================================  EVENTS_NCTS  ====================================================== */
/* =====================================================  EVENTS_RXDRDY  ===================================================== */
/* =====================================================  EVENTS_TXDRDY  ===================================================== */
/* =====================================================  EVENTS_ERROR  ====================================================== */
/* ======================================================  EVENTS_RXTO  ====================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ============================================  UART0 SHORTS CTS_STARTRX [3..3]  ============================================ */
typedef enum {                                  /*!< UART0_SHORTS_CTS_STARTRX                                                  */
  UART0_SHORTS_CTS_STARTRX_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  UART0_SHORTS_CTS_STARTRX_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} UART0_SHORTS_CTS_STARTRX_Enum;

/* ============================================  UART0 SHORTS NCTS_STOPRX [4..4]  ============================================ */
typedef enum {                                  /*!< UART0_SHORTS_NCTS_STOPRX                                                  */
  UART0_SHORTS_NCTS_STOPRX_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  UART0_SHORTS_NCTS_STOPRX_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} UART0_SHORTS_NCTS_STOPRX_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ===============================================  UART0 INTENSET CTS [0..0]  =============================================== */
typedef enum {                                  /*!< UART0_INTENSET_CTS                                                        */
  UART0_INTENSET_CTS_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_CTS_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_CTS_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_CTS                                                        */
  UART0_INTENSET_CTS_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_CTS_W_Enum;

/* ==============================================  UART0 INTENSET NCTS [1..1]  =============================================== */
typedef enum {                                  /*!< UART0_INTENSET_NCTS                                                       */
  UART0_INTENSET_NCTS_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_NCTS_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_NCTS_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_NCTS                                                       */
  UART0_INTENSET_NCTS_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_NCTS_W_Enum;

/* =============================================  UART0 INTENSET RXDRDY [2..2]  ============================================== */
typedef enum {                                  /*!< UART0_INTENSET_RXDRDY                                                     */
  UART0_INTENSET_RXDRDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_RXDRDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_RXDRDY_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_RXDRDY                                                     */
  UART0_INTENSET_RXDRDY_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_RXDRDY_W_Enum;

/* =============================================  UART0 INTENSET TXDRDY [7..7]  ============================================== */
typedef enum {                                  /*!< UART0_INTENSET_TXDRDY                                                     */
  UART0_INTENSET_TXDRDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_TXDRDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_TXDRDY_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_TXDRDY                                                     */
  UART0_INTENSET_TXDRDY_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_TXDRDY_W_Enum;

/* ==============================================  UART0 INTENSET ERROR [9..9]  ============================================== */
typedef enum {                                  /*!< UART0_INTENSET_ERROR                                                      */
  UART0_INTENSET_ERROR_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_ERROR_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_ERROR_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_ERROR                                                      */
  UART0_INTENSET_ERROR_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_ERROR_W_Enum;

/* =============================================  UART0 INTENSET RXTO [17..17]  ============================================== */
typedef enum {                                  /*!< UART0_INTENSET_RXTO                                                       */
  UART0_INTENSET_RXTO_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENSET_RXTO_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENSET_RXTO_R_Enum;

typedef enum {                                  /*!< UART0_INTENSET_RXTO                                                       */
  UART0_INTENSET_RXTO_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} UART0_INTENSET_RXTO_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ===============================================  UART0 INTENCLR CTS [0..0]  =============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_CTS                                                        */
  UART0_INTENCLR_CTS_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_CTS_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_CTS_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_CTS                                                        */
  UART0_INTENCLR_CTS_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_CTS_W_Enum;

/* ==============================================  UART0 INTENCLR NCTS [1..1]  =============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_NCTS                                                       */
  UART0_INTENCLR_NCTS_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_NCTS_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_NCTS_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_NCTS                                                       */
  UART0_INTENCLR_NCTS_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_NCTS_W_Enum;

/* =============================================  UART0 INTENCLR RXDRDY [2..2]  ============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_RXDRDY                                                     */
  UART0_INTENCLR_RXDRDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_RXDRDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_RXDRDY_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_RXDRDY                                                     */
  UART0_INTENCLR_RXDRDY_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_RXDRDY_W_Enum;

/* =============================================  UART0 INTENCLR TXDRDY [7..7]  ============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_TXDRDY                                                     */
  UART0_INTENCLR_TXDRDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_TXDRDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_TXDRDY_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_TXDRDY                                                     */
  UART0_INTENCLR_TXDRDY_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_TXDRDY_W_Enum;

/* ==============================================  UART0 INTENCLR ERROR [9..9]  ============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_ERROR                                                      */
  UART0_INTENCLR_ERROR_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_ERROR_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_ERROR_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_ERROR                                                      */
  UART0_INTENCLR_ERROR_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_ERROR_W_Enum;

/* =============================================  UART0 INTENCLR RXTO [17..17]  ============================================== */
typedef enum {                                  /*!< UART0_INTENCLR_RXTO                                                       */
  UART0_INTENCLR_RXTO_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  UART0_INTENCLR_RXTO_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} UART0_INTENCLR_RXTO_R_Enum;

typedef enum {                                  /*!< UART0_INTENCLR_RXTO                                                       */
  UART0_INTENCLR_RXTO_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} UART0_INTENCLR_RXTO_W_Enum;

/* =======================================================  ERRORSRC  ======================================================== */
/* =============================================  UART0 ERRORSRC OVERRUN [0..0]  ============================================= */
typedef enum {                                  /*!< UART0_ERRORSRC_OVERRUN                                                    */
  UART0_ERRORSRC_OVERRUN_NotPresent    = 0,     /*!< NotPresent : Error not present.                                           */
  UART0_ERRORSRC_OVERRUN_Present       = 1,     /*!< Present : Error present.                                                  */
} UART0_ERRORSRC_OVERRUN_R_Enum;

typedef enum {                                  /*!< UART0_ERRORSRC_OVERRUN                                                    */
  UART0_ERRORSRC_OVERRUN_Clear         = 1,     /*!< Clear : Clear error on write.                                             */
} UART0_ERRORSRC_OVERRUN_W_Enum;

/* =============================================  UART0 ERRORSRC PARITY [1..1]  ============================================== */
typedef enum {                                  /*!< UART0_ERRORSRC_PARITY                                                     */
  UART0_ERRORSRC_PARITY_NotPresent     = 0,     /*!< NotPresent : Error not present.                                           */
  UART0_ERRORSRC_PARITY_Present        = 1,     /*!< Present : Error present.                                                  */
} UART0_ERRORSRC_PARITY_R_Enum;

typedef enum {                                  /*!< UART0_ERRORSRC_PARITY                                                     */
  UART0_ERRORSRC_PARITY_Clear          = 1,     /*!< Clear : Clear error on write.                                             */
} UART0_ERRORSRC_PARITY_W_Enum;

/* =============================================  UART0 ERRORSRC FRAMING [2..2]  ============================================= */
typedef enum {                                  /*!< UART0_ERRORSRC_FRAMING                                                    */
  UART0_ERRORSRC_FRAMING_NotPresent    = 0,     /*!< NotPresent : Error not present.                                           */
  UART0_ERRORSRC_FRAMING_Present       = 1,     /*!< Present : Error present.                                                  */
} UART0_ERRORSRC_FRAMING_R_Enum;

typedef enum {                                  /*!< UART0_ERRORSRC_FRAMING                                                    */
  UART0_ERRORSRC_FRAMING_Clear         = 1,     /*!< Clear : Clear error on write.                                             */
} UART0_ERRORSRC_FRAMING_W_Enum;

/* ==============================================  UART0 ERRORSRC BREAK [3..3]  ============================================== */
typedef enum {                                  /*!< UART0_ERRORSRC_BREAK                                                      */
  UART0_ERRORSRC_BREAK_NotPresent      = 0,     /*!< NotPresent : Error not present.                                           */
  UART0_ERRORSRC_BREAK_Present         = 1,     /*!< Present : Error present.                                                  */
} UART0_ERRORSRC_BREAK_R_Enum;

typedef enum {                                  /*!< UART0_ERRORSRC_BREAK                                                      */
  UART0_ERRORSRC_BREAK_Clear           = 1,     /*!< Clear : Clear error on write.                                             */
} UART0_ERRORSRC_BREAK_W_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ==============================================  UART0 ENABLE ENABLE [0..2]  =============================================== */
typedef enum {                                  /*!< UART0_ENABLE_ENABLE                                                       */
  UART0_ENABLE_ENABLE_Disabled         = 0,     /*!< Disabled : UART disabled.                                                 */
  UART0_ENABLE_ENABLE_Enabled          = 4,     /*!< Enabled : UART enabled.                                                   */
} UART0_ENABLE_ENABLE_Enum;

/* ========================================================  PSELRTS  ======================================================== */
/* ========================================================  PSELTXD  ======================================================== */
/* ========================================================  PSELCTS  ======================================================== */
/* ========================================================  PSELRXD  ======================================================== */
/* ==========================================================  RXD  ========================================================== */
/* ==========================================================  TXD  ========================================================== */
/* =======================================================  BAUDRATE  ======================================================== */
/* ============================================  UART0 BAUDRATE BAUDRATE [0..31]  ============================================ */
typedef enum {                                  /*!< UART0_BAUDRATE_BAUDRATE                                                   */
  UART0_BAUDRATE_BAUDRATE_Baud1200     = 323584,/*!< Baud1200 : 1200 baud.                                                     */
  UART0_BAUDRATE_BAUDRATE_Baud2400     = 643072,/*!< Baud2400 : 2400 baud.                                                     */
  UART0_BAUDRATE_BAUDRATE_Baud4800     = 1290240,/*!< Baud4800 : 4800 baud.                                                    */
  UART0_BAUDRATE_BAUDRATE_Baud9600     = 2576384,/*!< Baud9600 : 9600 baud.                                                    */
  UART0_BAUDRATE_BAUDRATE_Baud14400    = 3866624,/*!< Baud14400 : 14400 baud.                                                  */
  UART0_BAUDRATE_BAUDRATE_Baud19200    = 5152768,/*!< Baud19200 : 19200 baud.                                                  */
  UART0_BAUDRATE_BAUDRATE_Baud28800    = 7729152,/*!< Baud28800 : 28800 baud.                                                  */
  UART0_BAUDRATE_BAUDRATE_Baud31250    = 8388608,/*!< Baud31250 : 31250 baud.                                                  */
  UART0_BAUDRATE_BAUDRATE_Baud38400    = 10309632,/*!< Baud38400 : 38400 baud.                                                 */
  UART0_BAUDRATE_BAUDRATE_Baud56000    = 15007744,/*!< Baud56000 : 56000 baud.                                                 */
  UART0_BAUDRATE_BAUDRATE_Baud57600    = 15462400,/*!< Baud57600 : 57600 baud.                                                 */
  UART0_BAUDRATE_BAUDRATE_Baud76800    = 20615168,/*!< Baud76800 : 76800 baud.                                                 */
  UART0_BAUDRATE_BAUDRATE_Baud115200   = 30924800,/*!< Baud115200 : 115200 baud.                                               */
  UART0_BAUDRATE_BAUDRATE_Baud230400   = 61845504,/*!< Baud230400 : 230400 baud.                                               */
  UART0_BAUDRATE_BAUDRATE_Baud250000   = 67108864,/*!< Baud250000 : 250000 baud.                                               */
  UART0_BAUDRATE_BAUDRATE_Baud460800   = 123695104,/*!< Baud460800 : 460800 baud.                                              */
  UART0_BAUDRATE_BAUDRATE_Baud921600   = 247386112,/*!< Baud921600 : 921600 baud.                                              */
  UART0_BAUDRATE_BAUDRATE_Baud1M       = 268435456,/*!< Baud1M : 1M baud.                                                      */
} UART0_BAUDRATE_BAUDRATE_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ===============================================  UART0 CONFIG HWFC [0..0]  ================================================ */
typedef enum {                                  /*!< UART0_CONFIG_HWFC                                                         */
  UART0_CONFIG_HWFC_Disabled           = 0,     /*!< Disabled : Hardware flow control disabled.                                */
  UART0_CONFIG_HWFC_Enabled            = 1,     /*!< Enabled : Hardware flow control enabled.                                  */
} UART0_CONFIG_HWFC_Enum;

/* ==============================================  UART0 CONFIG PARITY [1..3]  =============================================== */
typedef enum {                                  /*!< UART0_CONFIG_PARITY                                                       */
  UART0_CONFIG_PARITY_Excluded         = 0,     /*!< Excluded : Parity bit excluded.                                           */
  UART0_CONFIG_PARITY_Included         = 7,     /*!< Included : Parity bit included.                                           */
} UART0_CONFIG_PARITY_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  UART0 POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< UART0_POWER_POWER                                                         */
  UART0_POWER_POWER_Disabled           = 0,     /*!< Disabled : Module power disabled.                                         */
  UART0_POWER_POWER_Enabled            = 1,     /*!< Enabled : Module power enabled.                                           */
} UART0_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  EVENTS_READY  ====================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  SPI0 INTENSET READY [2..2]  =============================================== */
typedef enum {                                  /*!< SPI0_INTENSET_READY                                                       */
  SPI0_INTENSET_READY_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPI0_INTENSET_READY_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPI0_INTENSET_READY_R_Enum;

typedef enum {                                  /*!< SPI0_INTENSET_READY                                                       */
  SPI0_INTENSET_READY_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} SPI0_INTENSET_READY_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  SPI0 INTENCLR READY [2..2]  =============================================== */
typedef enum {                                  /*!< SPI0_INTENCLR_READY                                                       */
  SPI0_INTENCLR_READY_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPI0_INTENCLR_READY_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPI0_INTENCLR_READY_R_Enum;

typedef enum {                                  /*!< SPI0_INTENCLR_READY                                                       */
  SPI0_INTENCLR_READY_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} SPI0_INTENCLR_READY_W_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  SPI0 ENABLE ENABLE [0..2]  =============================================== */
typedef enum {                                  /*!< SPI0_ENABLE_ENABLE                                                        */
  SPI0_ENABLE_ENABLE_Disabled          = 0,     /*!< Disabled : Disabled SPI.                                                  */
  SPI0_ENABLE_ENABLE_Enabled           = 1,     /*!< Enabled : Enable SPI.                                                     */
} SPI0_ENABLE_ENABLE_Enum;

/* ========================================================  PSELSCK  ======================================================== */
/* =======================================================  PSELMOSI  ======================================================== */
/* =======================================================  PSELMISO  ======================================================== */
/* ==========================================================  RXD  ========================================================== */
/* ==========================================================  TXD  ========================================================== */
/* =======================================================  FREQUENCY  ======================================================= */
/* ===========================================  SPI0 FREQUENCY FREQUENCY [0..31]  ============================================ */
typedef enum {                                  /*!< SPI0_FREQUENCY_FREQUENCY                                                  */
  SPI0_FREQUENCY_FREQUENCY_K125        = 33554432,/*!< K125 : 125kbps.                                                         */
  SPI0_FREQUENCY_FREQUENCY_K250        = 67108864,/*!< K250 : 250kbps.                                                         */
  SPI0_FREQUENCY_FREQUENCY_K500        = 134217728,/*!< K500 : 500kbps.                                                        */
  SPI0_FREQUENCY_FREQUENCY_M1          = 268435456,/*!< M1 : 1Mbps.                                                            */
  SPI0_FREQUENCY_FREQUENCY_M2          = 536870912,/*!< M2 : 2Mbps.                                                            */
  SPI0_FREQUENCY_FREQUENCY_M4          = 1073741824,/*!< M4 : 4Mbps.                                                           */
  SPI0_FREQUENCY_FREQUENCY_M8          = -2147483648,/*!< M8 : 8Mbps.                                                          */
} SPI0_FREQUENCY_FREQUENCY_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ===============================================  SPI0 CONFIG ORDER [0..0]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_ORDER                                                         */
  SPI0_CONFIG_ORDER_MsbFirst           = 0,     /*!< MsbFirst : Most significant bit transmitted out first.                    */
  SPI0_CONFIG_ORDER_LsbFirst           = 1,     /*!< LsbFirst : Least significant bit transmitted out first.                   */
} SPI0_CONFIG_ORDER_Enum;

/* ================================================  SPI0 CONFIG CPHA [1..1]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_CPHA                                                          */
  SPI0_CONFIG_CPHA_Leading             = 0,     /*!< Leading : Sample on leading edge of the clock. Shift serial
                                                     data on trailing edge.                                                    */
  SPI0_CONFIG_CPHA_Trailing            = 1,     /*!< Trailing : Sample on trailing edge of the clock. Shift serial
                                                     data on leading edge.                                                     */
} SPI0_CONFIG_CPHA_Enum;

/* ================================================  SPI0 CONFIG CPOL [2..2]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_CPOL                                                          */
  SPI0_CONFIG_CPOL_ActiveHigh          = 0,     /*!< ActiveHigh : Active high.                                                 */
  SPI0_CONFIG_CPOL_ActiveLow           = 1,     /*!< ActiveLow : Active low.                                                   */
} SPI0_CONFIG_CPOL_Enum;

/* =========================================================  POWER  ========================================================= */
/* ================================================  SPI0 POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< SPI0_POWER_POWER                                                          */
  SPI0_POWER_POWER_Disabled            = 0,     /*!< Disabled : Module power disabled.                                         */
  SPI0_POWER_POWER_Enabled             = 1,     /*!< Enabled : Module power enabled.                                           */
} SPI0_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           TWI0                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  TASKS_STARTRX  ===================================================== */
/* =====================================================  TASKS_STARTTX  ===================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* =====================================================  TASKS_SUSPEND  ===================================================== */
/* =====================================================  TASKS_RESUME  ====================================================== */
/* ====================================================  EVENTS_STOPPED  ===================================================== */
/* ====================================================  EVENTS_RXDREADY  ==================================================== */
/* ====================================================  EVENTS_TXDSENT  ===================================================== */
/* =====================================================  EVENTS_ERROR  ====================================================== */
/* =======================================================  EVENTS_BB  ======================================================= */
/* ===================================================  EVENTS_SUSPENDED  ==================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* =============================================  TWI0 SHORTS BB_SUSPEND [0..0]  ============================================= */
typedef enum {                                  /*!< TWI0_SHORTS_BB_SUSPEND                                                    */
  TWI0_SHORTS_BB_SUSPEND_Disabled      = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TWI0_SHORTS_BB_SUSPEND_Enabled       = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TWI0_SHORTS_BB_SUSPEND_Enum;

/* ==============================================  TWI0 SHORTS BB_STOP [1..1]  =============================================== */
typedef enum {                                  /*!< TWI0_SHORTS_BB_STOP                                                       */
  TWI0_SHORTS_BB_STOP_Disabled         = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TWI0_SHORTS_BB_STOP_Enabled          = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TWI0_SHORTS_BB_STOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* =============================================  TWI0 INTENSET STOPPED [1..1]  ============================================== */
typedef enum {                                  /*!< TWI0_INTENSET_STOPPED                                                     */
  TWI0_INTENSET_STOPPED_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_STOPPED_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_STOPPED_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_STOPPED                                                     */
  TWI0_INTENSET_STOPPED_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_STOPPED_W_Enum;

/* =============================================  TWI0 INTENSET RXDREADY [2..2]  ============================================= */
typedef enum {                                  /*!< TWI0_INTENSET_RXDREADY                                                    */
  TWI0_INTENSET_RXDREADY_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_RXDREADY_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_RXDREADY_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_RXDREADY                                                    */
  TWI0_INTENSET_RXDREADY_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_RXDREADY_W_Enum;

/* =============================================  TWI0 INTENSET TXDSENT [7..7]  ============================================== */
typedef enum {                                  /*!< TWI0_INTENSET_TXDSENT                                                     */
  TWI0_INTENSET_TXDSENT_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_TXDSENT_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_TXDSENT_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_TXDSENT                                                     */
  TWI0_INTENSET_TXDSENT_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_TXDSENT_W_Enum;

/* ==============================================  TWI0 INTENSET ERROR [9..9]  =============================================== */
typedef enum {                                  /*!< TWI0_INTENSET_ERROR                                                       */
  TWI0_INTENSET_ERROR_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_ERROR_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_ERROR_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_ERROR                                                       */
  TWI0_INTENSET_ERROR_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_ERROR_W_Enum;

/* ===============================================  TWI0 INTENSET BB [14..14]  =============================================== */
typedef enum {                                  /*!< TWI0_INTENSET_BB                                                          */
  TWI0_INTENSET_BB_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_BB_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_BB_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_BB                                                          */
  TWI0_INTENSET_BB_Set                 = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_BB_W_Enum;

/* ===========================================  TWI0 INTENSET SUSPENDED [18..18]  ============================================ */
typedef enum {                                  /*!< TWI0_INTENSET_SUSPENDED                                                   */
  TWI0_INTENSET_SUSPENDED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENSET_SUSPENDED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENSET_SUSPENDED_R_Enum;

typedef enum {                                  /*!< TWI0_INTENSET_SUSPENDED                                                   */
  TWI0_INTENSET_SUSPENDED_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} TWI0_INTENSET_SUSPENDED_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* =============================================  TWI0 INTENCLR STOPPED [1..1]  ============================================== */
typedef enum {                                  /*!< TWI0_INTENCLR_STOPPED                                                     */
  TWI0_INTENCLR_STOPPED_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_STOPPED_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_STOPPED_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_STOPPED                                                     */
  TWI0_INTENCLR_STOPPED_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_STOPPED_W_Enum;

/* =============================================  TWI0 INTENCLR RXDREADY [2..2]  ============================================= */
typedef enum {                                  /*!< TWI0_INTENCLR_RXDREADY                                                    */
  TWI0_INTENCLR_RXDREADY_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_RXDREADY_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_RXDREADY_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_RXDREADY                                                    */
  TWI0_INTENCLR_RXDREADY_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_RXDREADY_W_Enum;

/* =============================================  TWI0 INTENCLR TXDSENT [7..7]  ============================================== */
typedef enum {                                  /*!< TWI0_INTENCLR_TXDSENT                                                     */
  TWI0_INTENCLR_TXDSENT_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_TXDSENT_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_TXDSENT_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_TXDSENT                                                     */
  TWI0_INTENCLR_TXDSENT_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_TXDSENT_W_Enum;

/* ==============================================  TWI0 INTENCLR ERROR [9..9]  =============================================== */
typedef enum {                                  /*!< TWI0_INTENCLR_ERROR                                                       */
  TWI0_INTENCLR_ERROR_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_ERROR_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_ERROR_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_ERROR                                                       */
  TWI0_INTENCLR_ERROR_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_ERROR_W_Enum;

/* ===============================================  TWI0 INTENCLR BB [14..14]  =============================================== */
typedef enum {                                  /*!< TWI0_INTENCLR_BB                                                          */
  TWI0_INTENCLR_BB_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_BB_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_BB_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_BB                                                          */
  TWI0_INTENCLR_BB_Clear               = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_BB_W_Enum;

/* ===========================================  TWI0 INTENCLR SUSPENDED [18..18]  ============================================ */
typedef enum {                                  /*!< TWI0_INTENCLR_SUSPENDED                                                   */
  TWI0_INTENCLR_SUSPENDED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TWI0_INTENCLR_SUSPENDED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TWI0_INTENCLR_SUSPENDED_R_Enum;

typedef enum {                                  /*!< TWI0_INTENCLR_SUSPENDED                                                   */
  TWI0_INTENCLR_SUSPENDED_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TWI0_INTENCLR_SUSPENDED_W_Enum;

/* =======================================================  ERRORSRC  ======================================================== */
/* =============================================  TWI0 ERRORSRC OVERRUN [0..0]  ============================================== */
typedef enum {                                  /*!< TWI0_ERRORSRC_OVERRUN                                                     */
  TWI0_ERRORSRC_OVERRUN_NotPresent     = 0,     /*!< NotPresent : Error not present.                                           */
  TWI0_ERRORSRC_OVERRUN_Present        = 1,     /*!< Present : Error present.                                                  */
} TWI0_ERRORSRC_OVERRUN_R_Enum;

typedef enum {                                  /*!< TWI0_ERRORSRC_OVERRUN                                                     */
  TWI0_ERRORSRC_OVERRUN_Clear          = 1,     /*!< Clear : Clear error on write.                                             */
} TWI0_ERRORSRC_OVERRUN_W_Enum;

/* ==============================================  TWI0 ERRORSRC ANACK [1..1]  =============================================== */
typedef enum {                                  /*!< TWI0_ERRORSRC_ANACK                                                       */
  TWI0_ERRORSRC_ANACK_NotPresent       = 0,     /*!< NotPresent : Error not present.                                           */
  TWI0_ERRORSRC_ANACK_Present          = 1,     /*!< Present : Error present.                                                  */
} TWI0_ERRORSRC_ANACK_R_Enum;

typedef enum {                                  /*!< TWI0_ERRORSRC_ANACK                                                       */
  TWI0_ERRORSRC_ANACK_Clear            = 1,     /*!< Clear : Clear error on write.                                             */
} TWI0_ERRORSRC_ANACK_W_Enum;

/* ==============================================  TWI0 ERRORSRC DNACK [2..2]  =============================================== */
typedef enum {                                  /*!< TWI0_ERRORSRC_DNACK                                                       */
  TWI0_ERRORSRC_DNACK_NotPresent       = 0,     /*!< NotPresent : Error not present.                                           */
  TWI0_ERRORSRC_DNACK_Present          = 1,     /*!< Present : Error present.                                                  */
} TWI0_ERRORSRC_DNACK_R_Enum;

typedef enum {                                  /*!< TWI0_ERRORSRC_DNACK                                                       */
  TWI0_ERRORSRC_DNACK_Clear            = 1,     /*!< Clear : Clear error on write.                                             */
} TWI0_ERRORSRC_DNACK_W_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  TWI0 ENABLE ENABLE [0..2]  =============================================== */
typedef enum {                                  /*!< TWI0_ENABLE_ENABLE                                                        */
  TWI0_ENABLE_ENABLE_Disabled          = 0,     /*!< Disabled : Disabled.                                                      */
  TWI0_ENABLE_ENABLE_Enabled           = 5,     /*!< Enabled : Enabled.                                                        */
} TWI0_ENABLE_ENABLE_Enum;

/* ========================================================  PSELSCL  ======================================================== */
/* ========================================================  PSELSDA  ======================================================== */
/* ==========================================================  RXD  ========================================================== */
/* ==========================================================  TXD  ========================================================== */
/* =======================================================  FREQUENCY  ======================================================= */
/* ===========================================  TWI0 FREQUENCY FREQUENCY [0..31]  ============================================ */
typedef enum {                                  /*!< TWI0_FREQUENCY_FREQUENCY                                                  */
  TWI0_FREQUENCY_FREQUENCY_K100        = 26738688,/*!< K100 : 100 kbps.                                                        */
  TWI0_FREQUENCY_FREQUENCY_K250        = 67108864,/*!< K250 : 250 kbps.                                                        */
  TWI0_FREQUENCY_FREQUENCY_K400        = 107479040,/*!< K400 : 400 kbps (actual rate 410.256 kbps).                            */
} TWI0_FREQUENCY_FREQUENCY_Enum;

/* ========================================================  ADDRESS  ======================================================== */
/* =========================================================  POWER  ========================================================= */
/* ================================================  TWI0 POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< TWI0_POWER_POWER                                                          */
  TWI0_POWER_POWER_Disabled            = 0,     /*!< Disabled : Module power disabled.                                         */
  TWI0_POWER_POWER_Enabled             = 1,     /*!< Enabled : Module power enabled.                                           */
} TWI0_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           SPIS1                                           ================ */
/* =========================================================================================================================== */

/* =====================================================  TASKS_ACQUIRE  ===================================================== */
/* =====================================================  TASKS_RELEASE  ===================================================== */
/* ======================================================  EVENTS_END  ======================================================= */
/* =====================================================  EVENTS_ENDRX  ====================================================== */
/* ====================================================  EVENTS_ACQUIRED  ==================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ============================================  SPIS1 SHORTS END_ACQUIRE [2..2]  ============================================ */
typedef enum {                                  /*!< SPIS1_SHORTS_END_ACQUIRE                                                  */
  SPIS1_SHORTS_END_ACQUIRE_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  SPIS1_SHORTS_END_ACQUIRE_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} SPIS1_SHORTS_END_ACQUIRE_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ===============================================  SPIS1 INTENSET END [1..1]  =============================================== */
typedef enum {                                  /*!< SPIS1_INTENSET_END                                                        */
  SPIS1_INTENSET_END_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENSET_END_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENSET_END_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENSET_END                                                        */
  SPIS1_INTENSET_END_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} SPIS1_INTENSET_END_W_Enum;

/* ==============================================  SPIS1 INTENSET ENDRX [4..4]  ============================================== */
typedef enum {                                  /*!< SPIS1_INTENSET_ENDRX                                                      */
  SPIS1_INTENSET_ENDRX_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENSET_ENDRX_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENSET_ENDRX_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENSET_ENDRX                                                      */
  SPIS1_INTENSET_ENDRX_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} SPIS1_INTENSET_ENDRX_W_Enum;

/* ===========================================  SPIS1 INTENSET ACQUIRED [10..10]  ============================================ */
typedef enum {                                  /*!< SPIS1_INTENSET_ACQUIRED                                                   */
  SPIS1_INTENSET_ACQUIRED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENSET_ACQUIRED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENSET_ACQUIRED_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENSET_ACQUIRED                                                   */
  SPIS1_INTENSET_ACQUIRED_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} SPIS1_INTENSET_ACQUIRED_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ===============================================  SPIS1 INTENCLR END [1..1]  =============================================== */
typedef enum {                                  /*!< SPIS1_INTENCLR_END                                                        */
  SPIS1_INTENCLR_END_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENCLR_END_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENCLR_END_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENCLR_END                                                        */
  SPIS1_INTENCLR_END_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} SPIS1_INTENCLR_END_W_Enum;

/* ==============================================  SPIS1 INTENCLR ENDRX [4..4]  ============================================== */
typedef enum {                                  /*!< SPIS1_INTENCLR_ENDRX                                                      */
  SPIS1_INTENCLR_ENDRX_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENCLR_ENDRX_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENCLR_ENDRX_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENCLR_ENDRX                                                      */
  SPIS1_INTENCLR_ENDRX_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} SPIS1_INTENCLR_ENDRX_W_Enum;

/* ===========================================  SPIS1 INTENCLR ACQUIRED [10..10]  ============================================ */
typedef enum {                                  /*!< SPIS1_INTENCLR_ACQUIRED                                                   */
  SPIS1_INTENCLR_ACQUIRED_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  SPIS1_INTENCLR_ACQUIRED_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} SPIS1_INTENCLR_ACQUIRED_R_Enum;

typedef enum {                                  /*!< SPIS1_INTENCLR_ACQUIRED                                                   */
  SPIS1_INTENCLR_ACQUIRED_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} SPIS1_INTENCLR_ACQUIRED_W_Enum;

/* ========================================================  SEMSTAT  ======================================================== */
/* =============================================  SPIS1 SEMSTAT SEMSTAT [0..1]  ============================================== */
typedef enum {                                  /*!< SPIS1_SEMSTAT_SEMSTAT                                                     */
  SPIS1_SEMSTAT_SEMSTAT_Free           = 0,     /*!< Free : Semaphore is free.                                                 */
  SPIS1_SEMSTAT_SEMSTAT_CPU            = 1,     /*!< CPU : Semaphore is assigned to the CPU.                                   */
  SPIS1_SEMSTAT_SEMSTAT_SPIS           = 2,     /*!< SPIS : Semaphore is assigned to the SPIS.                                 */
  SPIS1_SEMSTAT_SEMSTAT_CPUPending     = 3,     /*!< CPUPending : Semaphore is assigned to the SPIS, but a handover
                                                     to the CPU is pending.                                                    */
} SPIS1_SEMSTAT_SEMSTAT_Enum;

/* ========================================================  STATUS  ========================================================= */
/* =============================================  SPIS1 STATUS OVERREAD [0..0]  ============================================== */
typedef enum {                                  /*!< SPIS1_STATUS_OVERREAD                                                     */
  SPIS1_STATUS_OVERREAD_NotPresent     = 0,     /*!< NotPresent : Error not present.                                           */
  SPIS1_STATUS_OVERREAD_Present        = 1,     /*!< Present : Error present.                                                  */
} SPIS1_STATUS_OVERREAD_R_Enum;

typedef enum {                                  /*!< SPIS1_STATUS_OVERREAD                                                     */
  SPIS1_STATUS_OVERREAD_Clear          = 1,     /*!< Clear : Clear on write.                                                   */
} SPIS1_STATUS_OVERREAD_W_Enum;

/* =============================================  SPIS1 STATUS OVERFLOW [1..1]  ============================================== */
typedef enum {                                  /*!< SPIS1_STATUS_OVERFLOW                                                     */
  SPIS1_STATUS_OVERFLOW_NotPresent     = 0,     /*!< NotPresent : Error not present.                                           */
  SPIS1_STATUS_OVERFLOW_Present        = 1,     /*!< Present : Error present.                                                  */
} SPIS1_STATUS_OVERFLOW_R_Enum;

typedef enum {                                  /*!< SPIS1_STATUS_OVERFLOW                                                     */
  SPIS1_STATUS_OVERFLOW_Clear          = 1,     /*!< Clear : Clear on write.                                                   */
} SPIS1_STATUS_OVERFLOW_W_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ==============================================  SPIS1 ENABLE ENABLE [0..2]  =============================================== */
typedef enum {                                  /*!< SPIS1_ENABLE_ENABLE                                                       */
  SPIS1_ENABLE_ENABLE_Disabled         = 0,     /*!< Disabled : Disabled SPIS.                                                 */
  SPIS1_ENABLE_ENABLE_Enabled          = 2,     /*!< Enabled : Enable SPIS.                                                    */
} SPIS1_ENABLE_ENABLE_Enum;

/* ========================================================  PSELSCK  ======================================================== */
/* =======================================================  PSELMISO  ======================================================== */
/* =======================================================  PSELMOSI  ======================================================== */
/* ========================================================  PSELCSN  ======================================================== */
/* ========================================================  RXDPTR  ========================================================= */
/* =========================================================  MAXRX  ========================================================= */
/* =======================================================  AMOUNTRX  ======================================================== */
/* ========================================================  TXDPTR  ========================================================= */
/* =========================================================  MAXTX  ========================================================= */
/* =======================================================  AMOUNTTX  ======================================================== */
/* ========================================================  CONFIG  ========================================================= */
/* ===============================================  SPIS1 CONFIG ORDER [0..0]  =============================================== */
typedef enum {                                  /*!< SPIS1_CONFIG_ORDER                                                        */
  SPIS1_CONFIG_ORDER_MsbFirst          = 0,     /*!< MsbFirst : Most significant bit transmitted out first.                    */
  SPIS1_CONFIG_ORDER_LsbFirst          = 1,     /*!< LsbFirst : Least significant bit transmitted out first.                   */
} SPIS1_CONFIG_ORDER_Enum;

/* ===============================================  SPIS1 CONFIG CPHA [1..1]  ================================================ */
typedef enum {                                  /*!< SPIS1_CONFIG_CPHA                                                         */
  SPIS1_CONFIG_CPHA_Leading            = 0,     /*!< Leading : Sample on leading edge of the clock. Shift serial
                                                     data on trailing edge.                                                    */
  SPIS1_CONFIG_CPHA_Trailing           = 1,     /*!< Trailing : Sample on trailing edge of the clock. Shift serial
                                                     data on leading edge.                                                     */
} SPIS1_CONFIG_CPHA_Enum;

/* ===============================================  SPIS1 CONFIG CPOL [2..2]  ================================================ */
typedef enum {                                  /*!< SPIS1_CONFIG_CPOL                                                         */
  SPIS1_CONFIG_CPOL_ActiveHigh         = 0,     /*!< ActiveHigh : Active high.                                                 */
  SPIS1_CONFIG_CPOL_ActiveLow          = 1,     /*!< ActiveLow : Active low.                                                   */
} SPIS1_CONFIG_CPOL_Enum;

/* ==========================================================  DEF  ========================================================== */
/* ==========================================================  ORC  ========================================================== */
/* =========================================================  POWER  ========================================================= */
/* ===============================================  SPIS1 POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< SPIS1_POWER_POWER                                                         */
  SPIS1_POWER_POWER_Disabled           = 0,     /*!< Disabled : Module power disabled.                                         */
  SPIS1_POWER_POWER_Enabled            = 1,     /*!< Enabled : Module power enabled.                                           */
} SPIS1_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                          GPIOTE                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  TASKS_OUT  ======================================================= */
/* =======================================================  EVENTS_IN  ======================================================= */
/* ======================================================  EVENTS_PORT  ====================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  GPIOTE INTENSET IN0 [0..0]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENSET_IN0                                                       */
  GPIOTE_INTENSET_IN0_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENSET_IN0_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENSET_IN0_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENSET_IN0                                                       */
  GPIOTE_INTENSET_IN0_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} GPIOTE_INTENSET_IN0_W_Enum;

/* ==============================================  GPIOTE INTENSET IN1 [1..1]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENSET_IN1                                                       */
  GPIOTE_INTENSET_IN1_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENSET_IN1_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENSET_IN1_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENSET_IN1                                                       */
  GPIOTE_INTENSET_IN1_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} GPIOTE_INTENSET_IN1_W_Enum;

/* ==============================================  GPIOTE INTENSET IN2 [2..2]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENSET_IN2                                                       */
  GPIOTE_INTENSET_IN2_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENSET_IN2_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENSET_IN2_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENSET_IN2                                                       */
  GPIOTE_INTENSET_IN2_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} GPIOTE_INTENSET_IN2_W_Enum;

/* ==============================================  GPIOTE INTENSET IN3 [3..3]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENSET_IN3                                                       */
  GPIOTE_INTENSET_IN3_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENSET_IN3_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENSET_IN3_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENSET_IN3                                                       */
  GPIOTE_INTENSET_IN3_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} GPIOTE_INTENSET_IN3_W_Enum;

/* =============================================  GPIOTE INTENSET PORT [31..31]  ============================================= */
typedef enum {                                  /*!< GPIOTE_INTENSET_PORT                                                      */
  GPIOTE_INTENSET_PORT_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENSET_PORT_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENSET_PORT_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENSET_PORT                                                      */
  GPIOTE_INTENSET_PORT_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} GPIOTE_INTENSET_PORT_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  GPIOTE INTENCLR IN0 [0..0]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENCLR_IN0                                                       */
  GPIOTE_INTENCLR_IN0_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENCLR_IN0_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENCLR_IN0_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENCLR_IN0                                                       */
  GPIOTE_INTENCLR_IN0_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} GPIOTE_INTENCLR_IN0_W_Enum;

/* ==============================================  GPIOTE INTENCLR IN1 [1..1]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENCLR_IN1                                                       */
  GPIOTE_INTENCLR_IN1_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENCLR_IN1_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENCLR_IN1_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENCLR_IN1                                                       */
  GPIOTE_INTENCLR_IN1_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} GPIOTE_INTENCLR_IN1_W_Enum;

/* ==============================================  GPIOTE INTENCLR IN2 [2..2]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENCLR_IN2                                                       */
  GPIOTE_INTENCLR_IN2_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENCLR_IN2_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENCLR_IN2_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENCLR_IN2                                                       */
  GPIOTE_INTENCLR_IN2_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} GPIOTE_INTENCLR_IN2_W_Enum;

/* ==============================================  GPIOTE INTENCLR IN3 [3..3]  =============================================== */
typedef enum {                                  /*!< GPIOTE_INTENCLR_IN3                                                       */
  GPIOTE_INTENCLR_IN3_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENCLR_IN3_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENCLR_IN3_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENCLR_IN3                                                       */
  GPIOTE_INTENCLR_IN3_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} GPIOTE_INTENCLR_IN3_W_Enum;

/* =============================================  GPIOTE INTENCLR PORT [31..31]  ============================================= */
typedef enum {                                  /*!< GPIOTE_INTENCLR_PORT                                                      */
  GPIOTE_INTENCLR_PORT_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  GPIOTE_INTENCLR_PORT_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} GPIOTE_INTENCLR_PORT_R_Enum;

typedef enum {                                  /*!< GPIOTE_INTENCLR_PORT                                                      */
  GPIOTE_INTENCLR_PORT_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} GPIOTE_INTENCLR_PORT_W_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ===============================================  GPIOTE CONFIG MODE [0..1]  =============================================== */
typedef enum {                                  /*!< GPIOTE_CONFIG_MODE                                                        */
  GPIOTE_CONFIG_MODE_Disabled          = 0,     /*!< Disabled : Disabled.                                                      */
  GPIOTE_CONFIG_MODE_Event             = 1,     /*!< Event : Channel configure in event mode.                                  */
  GPIOTE_CONFIG_MODE_Task              = 3,     /*!< Task : Channel configure in task mode.                                    */
} GPIOTE_CONFIG_MODE_Enum;

/* ============================================  GPIOTE CONFIG POLARITY [16..17]  ============================================ */
typedef enum {                                  /*!< GPIOTE_CONFIG_POLARITY                                                    */
  GPIOTE_CONFIG_POLARITY_None          = 0,     /*!< None : No task or event.                                                  */
  GPIOTE_CONFIG_POLARITY_LoToHi        = 1,     /*!< LoToHi : Low to high.                                                     */
  GPIOTE_CONFIG_POLARITY_HiToLo        = 2,     /*!< HiToLo : High to low.                                                     */
  GPIOTE_CONFIG_POLARITY_Toggle        = 3,     /*!< Toggle : Toggle.                                                          */
} GPIOTE_CONFIG_POLARITY_Enum;

/* ============================================  GPIOTE CONFIG OUTINIT [20..20]  ============================================= */
typedef enum {                                  /*!< GPIOTE_CONFIG_OUTINIT                                                     */
  GPIOTE_CONFIG_OUTINIT_Low            = 0,     /*!< Low : Initial low output when in task mode.                               */
  GPIOTE_CONFIG_OUTINIT_High           = 1,     /*!< High : Initial high output when in task mode.                             */
} GPIOTE_CONFIG_OUTINIT_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  GPIOTE POWER POWER [0..0]  =============================================== */
typedef enum {                                  /*!< GPIOTE_POWER_POWER                                                        */
  GPIOTE_POWER_POWER_Disabled          = 0,     /*!< Disabled : Module power disabled.                                         */
  GPIOTE_POWER_POWER_Enabled           = 1,     /*!< Enabled : Module power enabled.                                           */
} GPIOTE_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ======================================================  EVENTS_END  ======================================================= */
/* =======================================================  INTENSET  ======================================================== */
/* ================================================  ADC INTENSET END [0..0]  ================================================ */
typedef enum {                                  /*!< ADC_INTENSET_END                                                          */
  ADC_INTENSET_END_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ADC_INTENSET_END_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ADC_INTENSET_END_R_Enum;

typedef enum {                                  /*!< ADC_INTENSET_END                                                          */
  ADC_INTENSET_END_Set                 = 1,     /*!< Set : Enable interrupt on write.                                          */
} ADC_INTENSET_END_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ================================================  ADC INTENCLR END [0..0]  ================================================ */
typedef enum {                                  /*!< ADC_INTENCLR_END                                                          */
  ADC_INTENCLR_END_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ADC_INTENCLR_END_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ADC_INTENCLR_END_R_Enum;

typedef enum {                                  /*!< ADC_INTENCLR_END                                                          */
  ADC_INTENCLR_END_Clear               = 1,     /*!< Clear : Disable interrupt on write.                                       */
} ADC_INTENCLR_END_W_Enum;

/* =========================================================  BUSY  ========================================================== */
/* =================================================  ADC BUSY BUSY [0..0]  ================================================== */
typedef enum {                                  /*!< ADC_BUSY_BUSY                                                             */
  ADC_BUSY_BUSY_Ready                  = 0,     /*!< Ready : No ongoing ADC conversion is taking place. ADC is ready.          */
  ADC_BUSY_BUSY_Busy                   = 1,     /*!< Busy : An ADC conversion is taking place. ADC is busy.                    */
} ADC_BUSY_BUSY_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  ADC ENABLE ENABLE [0..1]  ================================================ */
typedef enum {                                  /*!< ADC_ENABLE_ENABLE                                                         */
  ADC_ENABLE_ENABLE_Disabled           = 0,     /*!< Disabled : ADC is disabled.                                               */
  ADC_ENABLE_ENABLE_Enabled            = 1,     /*!< Enabled : ADC is enabled. If an analog input pin is selected
                                                     as source of the conversion, the selected pin is configured
                                                     as an analog input.                                                       */
} ADC_ENABLE_ENABLE_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* =================================================  ADC CONFIG RES [0..1]  ================================================= */
typedef enum {                                  /*!< ADC_CONFIG_RES                                                            */
  ADC_CONFIG_RES_8bit                  = 0,     /*!< 8bit : 8bit ADC resolution.                                               */
  ADC_CONFIG_RES_9bit                  = 1,     /*!< 9bit : 9bit ADC resolution.                                               */
  ADC_CONFIG_RES_10bit                 = 2,     /*!< 10bit : 10bit ADC resolution.                                             */
} ADC_CONFIG_RES_Enum;

/* ===============================================  ADC CONFIG INPSEL [2..4]  ================================================ */
typedef enum {                                  /*!< ADC_CONFIG_INPSEL                                                         */
  ADC_CONFIG_INPSEL_AnalogInputNoPrescaling = 0,/*!< AnalogInputNoPrescaling : Analog input specified by PSEL with
                                                     no prescaling used as input for the conversion.                           */
  ADC_CONFIG_INPSEL_AnalogInputTwoThirdsPrescaling = 1,/*!< AnalogInputTwoThirdsPrescaling : Analog input specified by PSEL
                                                     with 2/3 prescaling used as input for the conversion.                     */
  ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling = 2,/*!< AnalogInputOneThirdPrescaling : Analog input specified by PSEL
                                                     with 1/3 prescaling used as input for the conversion.                     */
  ADC_CONFIG_INPSEL_SupplyTwoThirdsPrescaling = 5,/*!< SupplyTwoThirdsPrescaling : Supply voltage with 2/3 prescaling
                                                     used as input for the conversion.                                         */
  ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling = 6,/*!< SupplyOneThirdPrescaling : Supply voltage with 1/3 prescaling
                                                     used as input for the conversion.                                         */
} ADC_CONFIG_INPSEL_Enum;

/* ===============================================  ADC CONFIG REFSEL [5..6]  ================================================ */
typedef enum {                                  /*!< ADC_CONFIG_REFSEL                                                         */
  ADC_CONFIG_REFSEL_VBG                = 0,     /*!< VBG : Use internal 1.2V bandgap voltage as reference for conversion.      */
  ADC_CONFIG_REFSEL_External           = 1,     /*!< External : Use external source configured by EXTREFSEL as reference
                                                     for conversion.                                                           */
  ADC_CONFIG_REFSEL_SupplyOneHalfPrescaling = 2,/*!< SupplyOneHalfPrescaling : Use supply voltage with 1/2 prescaling
                                                     as reference for conversion. Only usable when supply voltage
                                                     is between 1.7V and 2.6V.                                                 */
  ADC_CONFIG_REFSEL_SupplyOneThirdPrescaling = 3,/*!< SupplyOneThirdPrescaling : Use supply voltage with 1/3 prescaling
                                                     as reference for conversion. Only usable when supply voltage
                                                     is between 2.5V and 3.6V.                                                 */
} ADC_CONFIG_REFSEL_Enum;

/* ================================================  ADC CONFIG PSEL [8..15]  ================================================ */
typedef enum {                                  /*!< ADC_CONFIG_PSEL                                                           */
  ADC_CONFIG_PSEL_Disabled             = 0,     /*!< Disabled : Analog input pins disabled.                                    */
  ADC_CONFIG_PSEL_AnalogInput0         = 1,     /*!< AnalogInput0 : Use analog input 0 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput1         = 2,     /*!< AnalogInput1 : Use analog input 1 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput2         = 4,     /*!< AnalogInput2 : Use analog input 2 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput3         = 8,     /*!< AnalogInput3 : Use analog input 3 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput4         = 16,    /*!< AnalogInput4 : Use analog input 4 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput5         = 32,    /*!< AnalogInput5 : Use analog input 5 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput6         = 64,    /*!< AnalogInput6 : Use analog input 6 as analog input.                        */
  ADC_CONFIG_PSEL_AnalogInput7         = 128,   /*!< AnalogInput7 : Use analog input 7 as analog input.                        */
} ADC_CONFIG_PSEL_Enum;

/* =============================================  ADC CONFIG EXTREFSEL [16..17]  ============================================= */
typedef enum {                                  /*!< ADC_CONFIG_EXTREFSEL                                                      */
  ADC_CONFIG_EXTREFSEL_None            = 0,     /*!< None : Analog external reference inputs disabled.                         */
  ADC_CONFIG_EXTREFSEL_AnalogReference0 = 1,    /*!< AnalogReference0 : Use analog reference 0 as reference.                   */
  ADC_CONFIG_EXTREFSEL_AnalogReference1 = 2,    /*!< AnalogReference1 : Use analog reference 1 as reference.                   */
} ADC_CONFIG_EXTREFSEL_Enum;

/* ========================================================  RESULT  ========================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  ADC POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< ADC_POWER_POWER                                                           */
  ADC_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  ADC_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} ADC_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ======================================================  TASKS_COUNT  ====================================================== */
/* ======================================================  TASKS_CLEAR  ====================================================== */
/* ====================================================  TASKS_SHUTDOWN  ===================================================== */
/* =====================================================  TASKS_CAPTURE  ===================================================== */
/* ====================================================  EVENTS_COMPARE  ===================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ==========================================  TIMER0 SHORTS COMPARE0_CLEAR [0..0]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE0_CLEAR                                              */
  TIMER0_SHORTS_COMPARE0_CLEAR_Disabled = 0,    /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE0_CLEAR_Enabled = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE0_CLEAR_Enum;

/* ==========================================  TIMER0 SHORTS COMPARE1_CLEAR [1..1]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE1_CLEAR                                              */
  TIMER0_SHORTS_COMPARE1_CLEAR_Disabled = 0,    /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE1_CLEAR_Enabled = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE1_CLEAR_Enum;

/* ==========================================  TIMER0 SHORTS COMPARE2_CLEAR [2..2]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE2_CLEAR                                              */
  TIMER0_SHORTS_COMPARE2_CLEAR_Disabled = 0,    /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE2_CLEAR_Enabled = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE2_CLEAR_Enum;

/* ==========================================  TIMER0 SHORTS COMPARE3_CLEAR [3..3]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE3_CLEAR                                              */
  TIMER0_SHORTS_COMPARE3_CLEAR_Disabled = 0,    /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE3_CLEAR_Enabled = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE3_CLEAR_Enum;

/* ==========================================  TIMER0 SHORTS COMPARE0_STOP [8..8]  =========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE0_STOP                                               */
  TIMER0_SHORTS_COMPARE0_STOP_Disabled = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE0_STOP_Enabled  = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE0_STOP_Enum;

/* ==========================================  TIMER0 SHORTS COMPARE1_STOP [9..9]  =========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE1_STOP                                               */
  TIMER0_SHORTS_COMPARE1_STOP_Disabled = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE1_STOP_Enabled  = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE1_STOP_Enum;

/* =========================================  TIMER0 SHORTS COMPARE2_STOP [10..10]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE2_STOP                                               */
  TIMER0_SHORTS_COMPARE2_STOP_Disabled = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE2_STOP_Enabled  = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE2_STOP_Enum;

/* =========================================  TIMER0 SHORTS COMPARE3_STOP [11..11]  ========================================== */
typedef enum {                                  /*!< TIMER0_SHORTS_COMPARE3_STOP                                               */
  TIMER0_SHORTS_COMPARE3_STOP_Disabled = 0,     /*!< Disabled : Shortcut disabled.                                             */
  TIMER0_SHORTS_COMPARE3_STOP_Enabled  = 1,     /*!< Enabled : Shortcut enabled.                                               */
} TIMER0_SHORTS_COMPARE3_STOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ===========================================  TIMER0 INTENSET COMPARE0 [16..16]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE0                                                  */
  TIMER0_INTENSET_COMPARE0_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENSET_COMPARE0_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENSET_COMPARE0_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE0                                                  */
  TIMER0_INTENSET_COMPARE0_Set         = 1,     /*!< Set : Enable interrupt on write.                                          */
} TIMER0_INTENSET_COMPARE0_W_Enum;

/* ===========================================  TIMER0 INTENSET COMPARE1 [17..17]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE1                                                  */
  TIMER0_INTENSET_COMPARE1_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENSET_COMPARE1_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENSET_COMPARE1_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE1                                                  */
  TIMER0_INTENSET_COMPARE1_Set         = 1,     /*!< Set : Enable interrupt on write.                                          */
} TIMER0_INTENSET_COMPARE1_W_Enum;

/* ===========================================  TIMER0 INTENSET COMPARE2 [18..18]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE2                                                  */
  TIMER0_INTENSET_COMPARE2_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENSET_COMPARE2_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENSET_COMPARE2_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE2                                                  */
  TIMER0_INTENSET_COMPARE2_Set         = 1,     /*!< Set : Enable interrupt on write.                                          */
} TIMER0_INTENSET_COMPARE2_W_Enum;

/* ===========================================  TIMER0 INTENSET COMPARE3 [19..19]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE3                                                  */
  TIMER0_INTENSET_COMPARE3_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENSET_COMPARE3_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENSET_COMPARE3_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENSET_COMPARE3                                                  */
  TIMER0_INTENSET_COMPARE3_Set         = 1,     /*!< Set : Enable interrupt on write.                                          */
} TIMER0_INTENSET_COMPARE3_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ===========================================  TIMER0 INTENCLR COMPARE0 [16..16]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE0                                                  */
  TIMER0_INTENCLR_COMPARE0_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENCLR_COMPARE0_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENCLR_COMPARE0_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE0                                                  */
  TIMER0_INTENCLR_COMPARE0_Clear       = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TIMER0_INTENCLR_COMPARE0_W_Enum;

/* ===========================================  TIMER0 INTENCLR COMPARE1 [17..17]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE1                                                  */
  TIMER0_INTENCLR_COMPARE1_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENCLR_COMPARE1_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENCLR_COMPARE1_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE1                                                  */
  TIMER0_INTENCLR_COMPARE1_Clear       = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TIMER0_INTENCLR_COMPARE1_W_Enum;

/* ===========================================  TIMER0 INTENCLR COMPARE2 [18..18]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE2                                                  */
  TIMER0_INTENCLR_COMPARE2_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENCLR_COMPARE2_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENCLR_COMPARE2_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE2                                                  */
  TIMER0_INTENCLR_COMPARE2_Clear       = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TIMER0_INTENCLR_COMPARE2_W_Enum;

/* ===========================================  TIMER0 INTENCLR COMPARE3 [19..19]  =========================================== */
typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE3                                                  */
  TIMER0_INTENCLR_COMPARE3_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TIMER0_INTENCLR_COMPARE3_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TIMER0_INTENCLR_COMPARE3_R_Enum;

typedef enum {                                  /*!< TIMER0_INTENCLR_COMPARE3                                                  */
  TIMER0_INTENCLR_COMPARE3_Clear       = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TIMER0_INTENCLR_COMPARE3_W_Enum;

/* =========================================================  MODE  ========================================================== */
/* ================================================  TIMER0 MODE MODE [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER0_MODE_MODE                                                          */
  TIMER0_MODE_MODE_Counter             = 1,     /*!< Counter : Timer in Counter mode.                                          */
  TIMER0_MODE_MODE_Timer               = 0,     /*!< Timer : Timer in Normal mode.                                             */
} TIMER0_MODE_MODE_Enum;

/* ========================================================  BITMODE  ======================================================== */
/* =============================================  TIMER0 BITMODE BITMODE [0..1]  ============================================= */
typedef enum {                                  /*!< TIMER0_BITMODE_BITMODE                                                    */
  TIMER0_BITMODE_BITMODE_16Bit         = 0,     /*!< 16Bit : 16-bit timer behaviour.                                           */
  TIMER0_BITMODE_BITMODE_08Bit         = 1,     /*!< 08Bit : 8-bit timer behaviour.                                            */
  TIMER0_BITMODE_BITMODE_24Bit         = 2,     /*!< 24Bit : 24-bit timer behaviour.                                           */
  TIMER0_BITMODE_BITMODE_32Bit         = 3,     /*!< 32Bit : 32-bit timer behaviour.                                           */
} TIMER0_BITMODE_BITMODE_Enum;

/* =======================================================  PRESCALER  ======================================================= */
/* ==========================================================  CC  =========================================================== */
/* =========================================================  POWER  ========================================================= */
/* ===============================================  TIMER0 POWER POWER [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER0_POWER_POWER                                                        */
  TIMER0_POWER_POWER_Disabled          = 0,     /*!< Disabled : Module power disabled.                                         */
  TIMER0_POWER_POWER_Enabled           = 1,     /*!< Enabled : Module power enabled.                                           */
} TIMER0_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           RTC0                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ======================================================  TASKS_CLEAR  ====================================================== */
/* ===================================================  TASKS_TRIGOVRFLW  ==================================================== */
/* ======================================================  EVENTS_TICK  ====================================================== */
/* =====================================================  EVENTS_OVRFLW  ===================================================== */
/* ====================================================  EVENTS_COMPARE  ===================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ===============================================  RTC0 INTENSET TICK [0..0]  =============================================== */
typedef enum {                                  /*!< RTC0_INTENSET_TICK                                                        */
  RTC0_INTENSET_TICK_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_TICK_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_TICK_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_TICK                                                        */
  RTC0_INTENSET_TICK_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_TICK_W_Enum;

/* ==============================================  RTC0 INTENSET OVRFLW [1..1]  ============================================== */
typedef enum {                                  /*!< RTC0_INTENSET_OVRFLW                                                      */
  RTC0_INTENSET_OVRFLW_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_OVRFLW_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_OVRFLW_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_OVRFLW                                                      */
  RTC0_INTENSET_OVRFLW_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_OVRFLW_W_Enum;

/* ============================================  RTC0 INTENSET COMPARE0 [16..16]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENSET_COMPARE0                                                    */
  RTC0_INTENSET_COMPARE0_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_COMPARE0_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_COMPARE0_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_COMPARE0                                                    */
  RTC0_INTENSET_COMPARE0_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_COMPARE0_W_Enum;

/* ============================================  RTC0 INTENSET COMPARE1 [17..17]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENSET_COMPARE1                                                    */
  RTC0_INTENSET_COMPARE1_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_COMPARE1_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_COMPARE1_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_COMPARE1                                                    */
  RTC0_INTENSET_COMPARE1_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_COMPARE1_W_Enum;

/* ============================================  RTC0 INTENSET COMPARE2 [18..18]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENSET_COMPARE2                                                    */
  RTC0_INTENSET_COMPARE2_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_COMPARE2_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_COMPARE2_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_COMPARE2                                                    */
  RTC0_INTENSET_COMPARE2_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_COMPARE2_W_Enum;

/* ============================================  RTC0 INTENSET COMPARE3 [19..19]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENSET_COMPARE3                                                    */
  RTC0_INTENSET_COMPARE3_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENSET_COMPARE3_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENSET_COMPARE3_R_Enum;

typedef enum {                                  /*!< RTC0_INTENSET_COMPARE3                                                    */
  RTC0_INTENSET_COMPARE3_Set           = 1,     /*!< Set : Enable interrupt on write.                                          */
} RTC0_INTENSET_COMPARE3_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ===============================================  RTC0 INTENCLR TICK [0..0]  =============================================== */
typedef enum {                                  /*!< RTC0_INTENCLR_TICK                                                        */
  RTC0_INTENCLR_TICK_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_TICK_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_TICK_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_TICK                                                        */
  RTC0_INTENCLR_TICK_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_TICK_W_Enum;

/* ==============================================  RTC0 INTENCLR OVRFLW [1..1]  ============================================== */
typedef enum {                                  /*!< RTC0_INTENCLR_OVRFLW                                                      */
  RTC0_INTENCLR_OVRFLW_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_OVRFLW_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_OVRFLW_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_OVRFLW                                                      */
  RTC0_INTENCLR_OVRFLW_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_OVRFLW_W_Enum;

/* ============================================  RTC0 INTENCLR COMPARE0 [16..16]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE0                                                    */
  RTC0_INTENCLR_COMPARE0_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_COMPARE0_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_COMPARE0_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE0                                                    */
  RTC0_INTENCLR_COMPARE0_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_COMPARE0_W_Enum;

/* ============================================  RTC0 INTENCLR COMPARE1 [17..17]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE1                                                    */
  RTC0_INTENCLR_COMPARE1_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_COMPARE1_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_COMPARE1_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE1                                                    */
  RTC0_INTENCLR_COMPARE1_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_COMPARE1_W_Enum;

/* ============================================  RTC0 INTENCLR COMPARE2 [18..18]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE2                                                    */
  RTC0_INTENCLR_COMPARE2_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_COMPARE2_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_COMPARE2_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE2                                                    */
  RTC0_INTENCLR_COMPARE2_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_COMPARE2_W_Enum;

/* ============================================  RTC0 INTENCLR COMPARE3 [19..19]  ============================================ */
typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE3                                                    */
  RTC0_INTENCLR_COMPARE3_Disabled      = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RTC0_INTENCLR_COMPARE3_Enabled       = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RTC0_INTENCLR_COMPARE3_R_Enum;

typedef enum {                                  /*!< RTC0_INTENCLR_COMPARE3                                                    */
  RTC0_INTENCLR_COMPARE3_Clear         = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RTC0_INTENCLR_COMPARE3_W_Enum;

/* =========================================================  EVTEN  ========================================================= */
/* ================================================  RTC0 EVTEN TICK [0..0]  ================================================= */
typedef enum {                                  /*!< RTC0_EVTEN_TICK                                                           */
  RTC0_EVTEN_TICK_Disabled             = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_TICK_Enabled              = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_TICK_Enum;

/* ===============================================  RTC0 EVTEN OVRFLW [1..1]  ================================================ */
typedef enum {                                  /*!< RTC0_EVTEN_OVRFLW                                                         */
  RTC0_EVTEN_OVRFLW_Disabled           = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_OVRFLW_Enabled            = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_OVRFLW_Enum;

/* =============================================  RTC0 EVTEN COMPARE0 [16..16]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTEN_COMPARE0                                                       */
  RTC0_EVTEN_COMPARE0_Disabled         = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_COMPARE0_Enabled          = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_COMPARE0_Enum;

/* =============================================  RTC0 EVTEN COMPARE1 [17..17]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTEN_COMPARE1                                                       */
  RTC0_EVTEN_COMPARE1_Disabled         = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_COMPARE1_Enabled          = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_COMPARE1_Enum;

/* =============================================  RTC0 EVTEN COMPARE2 [18..18]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTEN_COMPARE2                                                       */
  RTC0_EVTEN_COMPARE2_Disabled         = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_COMPARE2_Enabled          = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_COMPARE2_Enum;

/* =============================================  RTC0 EVTEN COMPARE3 [19..19]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTEN_COMPARE3                                                       */
  RTC0_EVTEN_COMPARE3_Disabled         = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTEN_COMPARE3_Enabled          = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTEN_COMPARE3_Enum;

/* =======================================================  EVTENSET  ======================================================== */
/* ===============================================  RTC0 EVTENSET TICK [0..0]  =============================================== */
typedef enum {                                  /*!< RTC0_EVTENSET_TICK                                                        */
  RTC0_EVTENSET_TICK_Disabled          = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_TICK_Enabled           = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_TICK_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_TICK                                                        */
  RTC0_EVTENSET_TICK_Set               = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_TICK_W_Enum;

/* ==============================================  RTC0 EVTENSET OVRFLW [1..1]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTENSET_OVRFLW                                                      */
  RTC0_EVTENSET_OVRFLW_Disabled        = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_OVRFLW_Enabled         = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_OVRFLW_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_OVRFLW                                                      */
  RTC0_EVTENSET_OVRFLW_Set             = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_OVRFLW_W_Enum;

/* ============================================  RTC0 EVTENSET COMPARE0 [16..16]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE0                                                    */
  RTC0_EVTENSET_COMPARE0_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_COMPARE0_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_COMPARE0_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE0                                                    */
  RTC0_EVTENSET_COMPARE0_Set           = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_COMPARE0_W_Enum;

/* ============================================  RTC0 EVTENSET COMPARE1 [17..17]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE1                                                    */
  RTC0_EVTENSET_COMPARE1_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_COMPARE1_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_COMPARE1_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE1                                                    */
  RTC0_EVTENSET_COMPARE1_Set           = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_COMPARE1_W_Enum;

/* ============================================  RTC0 EVTENSET COMPARE2 [18..18]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE2                                                    */
  RTC0_EVTENSET_COMPARE2_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_COMPARE2_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_COMPARE2_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE2                                                    */
  RTC0_EVTENSET_COMPARE2_Set           = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_COMPARE2_W_Enum;

/* ============================================  RTC0 EVTENSET COMPARE3 [19..19]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE3                                                    */
  RTC0_EVTENSET_COMPARE3_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENSET_COMPARE3_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENSET_COMPARE3_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENSET_COMPARE3                                                    */
  RTC0_EVTENSET_COMPARE3_Set           = 1,     /*!< Set : Enable event on write.                                              */
} RTC0_EVTENSET_COMPARE3_W_Enum;

/* =======================================================  EVTENCLR  ======================================================== */
/* ===============================================  RTC0 EVTENCLR TICK [0..0]  =============================================== */
typedef enum {                                  /*!< RTC0_EVTENCLR_TICK                                                        */
  RTC0_EVTENCLR_TICK_Disabled          = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_TICK_Enabled           = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_TICK_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_TICK                                                        */
  RTC0_EVTENCLR_TICK_Clear             = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_TICK_W_Enum;

/* ==============================================  RTC0 EVTENCLR OVRFLW [1..1]  ============================================== */
typedef enum {                                  /*!< RTC0_EVTENCLR_OVRFLW                                                      */
  RTC0_EVTENCLR_OVRFLW_Disabled        = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_OVRFLW_Enabled         = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_OVRFLW_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_OVRFLW                                                      */
  RTC0_EVTENCLR_OVRFLW_Clear           = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_OVRFLW_W_Enum;

/* ============================================  RTC0 EVTENCLR COMPARE0 [16..16]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE0                                                    */
  RTC0_EVTENCLR_COMPARE0_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_COMPARE0_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_COMPARE0_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE0                                                    */
  RTC0_EVTENCLR_COMPARE0_Clear         = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_COMPARE0_W_Enum;

/* ============================================  RTC0 EVTENCLR COMPARE1 [17..17]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE1                                                    */
  RTC0_EVTENCLR_COMPARE1_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_COMPARE1_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_COMPARE1_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE1                                                    */
  RTC0_EVTENCLR_COMPARE1_Clear         = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_COMPARE1_W_Enum;

/* ============================================  RTC0 EVTENCLR COMPARE2 [18..18]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE2                                                    */
  RTC0_EVTENCLR_COMPARE2_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_COMPARE2_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_COMPARE2_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE2                                                    */
  RTC0_EVTENCLR_COMPARE2_Clear         = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_COMPARE2_W_Enum;

/* ============================================  RTC0 EVTENCLR COMPARE3 [19..19]  ============================================ */
typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE3                                                    */
  RTC0_EVTENCLR_COMPARE3_Disabled      = 0,     /*!< Disabled : Event disabled.                                                */
  RTC0_EVTENCLR_COMPARE3_Enabled       = 1,     /*!< Enabled : Event enabled.                                                  */
} RTC0_EVTENCLR_COMPARE3_R_Enum;

typedef enum {                                  /*!< RTC0_EVTENCLR_COMPARE3                                                    */
  RTC0_EVTENCLR_COMPARE3_Clear         = 1,     /*!< Clear : Disable event on write.                                           */
} RTC0_EVTENCLR_COMPARE3_W_Enum;

/* ========================================================  COUNTER  ======================================================== */
/* =======================================================  PRESCALER  ======================================================= */
/* ==========================================================  CC  =========================================================== */
/* =========================================================  POWER  ========================================================= */
/* ================================================  RTC0 POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< RTC0_POWER_POWER                                                          */
  RTC0_POWER_POWER_Disabled            = 0,     /*!< Disabled : Module power disabled.                                         */
  RTC0_POWER_POWER_Enabled             = 1,     /*!< Enabled : Module power enabled.                                           */
} RTC0_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           TEMP                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ====================================================  EVENTS_DATARDY  ===================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* =============================================  TEMP INTENSET DATARDY [0..0]  ============================================== */
typedef enum {                                  /*!< TEMP_INTENSET_DATARDY                                                     */
  TEMP_INTENSET_DATARDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TEMP_INTENSET_DATARDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TEMP_INTENSET_DATARDY_R_Enum;

typedef enum {                                  /*!< TEMP_INTENSET_DATARDY                                                     */
  TEMP_INTENSET_DATARDY_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} TEMP_INTENSET_DATARDY_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* =============================================  TEMP INTENCLR DATARDY [0..0]  ============================================== */
typedef enum {                                  /*!< TEMP_INTENCLR_DATARDY                                                     */
  TEMP_INTENCLR_DATARDY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  TEMP_INTENCLR_DATARDY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} TEMP_INTENCLR_DATARDY_R_Enum;

typedef enum {                                  /*!< TEMP_INTENCLR_DATARDY                                                     */
  TEMP_INTENCLR_DATARDY_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} TEMP_INTENCLR_DATARDY_W_Enum;

/* =========================================================  TEMP  ========================================================== */
/* =========================================================  POWER  ========================================================= */
/* ================================================  TEMP POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< TEMP_POWER_POWER                                                          */
  TEMP_POWER_POWER_Disabled            = 0,     /*!< Disabled : Module power disabled.                                         */
  TEMP_POWER_POWER_Enabled             = 1,     /*!< Enabled : Module power enabled.                                           */
} TEMP_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* =====================================================  EVENTS_VALRDY  ===================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* =============================================  RNG SHORTS VALRDY_STOP [0..0]  ============================================= */
typedef enum {                                  /*!< RNG_SHORTS_VALRDY_STOP                                                    */
  RNG_SHORTS_VALRDY_STOP_Disabled      = 0,     /*!< Disabled : Shortcut disabled.                                             */
  RNG_SHORTS_VALRDY_STOP_Enabled       = 1,     /*!< Enabled : Shortcut enabled.                                               */
} RNG_SHORTS_VALRDY_STOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  RNG INTENSET VALRDY [0..0]  =============================================== */
typedef enum {                                  /*!< RNG_INTENSET_VALRDY                                                       */
  RNG_INTENSET_VALRDY_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RNG_INTENSET_VALRDY_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RNG_INTENSET_VALRDY_R_Enum;

typedef enum {                                  /*!< RNG_INTENSET_VALRDY                                                       */
  RNG_INTENSET_VALRDY_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} RNG_INTENSET_VALRDY_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  RNG INTENCLR VALRDY [0..0]  =============================================== */
typedef enum {                                  /*!< RNG_INTENCLR_VALRDY                                                       */
  RNG_INTENCLR_VALRDY_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  RNG_INTENCLR_VALRDY_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} RNG_INTENCLR_VALRDY_R_Enum;

typedef enum {                                  /*!< RNG_INTENCLR_VALRDY                                                       */
  RNG_INTENCLR_VALRDY_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} RNG_INTENCLR_VALRDY_W_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ===============================================  RNG CONFIG DERCEN [0..0]  ================================================ */
typedef enum {                                  /*!< RNG_CONFIG_DERCEN                                                         */
  RNG_CONFIG_DERCEN_Disabled           = 0,     /*!< Disabled : Digital error correction disabled.                             */
  RNG_CONFIG_DERCEN_Enabled            = 1,     /*!< Enabled : Digital error correction enabled.                               */
} RNG_CONFIG_DERCEN_Enum;

/* =========================================================  VALUE  ========================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  RNG POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< RNG_POWER_POWER                                                           */
  RNG_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  RNG_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} RNG_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */

/* ====================================================  TASKS_STARTECB  ===================================================== */
/* =====================================================  TASKS_STOPECB  ===================================================== */
/* =====================================================  EVENTS_ENDECB  ===================================================== */
/* ====================================================  EVENTS_ERRORECB  ==================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  ECB INTENSET ENDECB [0..0]  =============================================== */
typedef enum {                                  /*!< ECB_INTENSET_ENDECB                                                       */
  ECB_INTENSET_ENDECB_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ECB_INTENSET_ENDECB_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ECB_INTENSET_ENDECB_R_Enum;

typedef enum {                                  /*!< ECB_INTENSET_ENDECB                                                       */
  ECB_INTENSET_ENDECB_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} ECB_INTENSET_ENDECB_W_Enum;

/* =============================================  ECB INTENSET ERRORECB [1..1]  ============================================== */
typedef enum {                                  /*!< ECB_INTENSET_ERRORECB                                                     */
  ECB_INTENSET_ERRORECB_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ECB_INTENSET_ERRORECB_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ECB_INTENSET_ERRORECB_R_Enum;

typedef enum {                                  /*!< ECB_INTENSET_ERRORECB                                                     */
  ECB_INTENSET_ERRORECB_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} ECB_INTENSET_ERRORECB_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  ECB INTENCLR ENDECB [0..0]  =============================================== */
typedef enum {                                  /*!< ECB_INTENCLR_ENDECB                                                       */
  ECB_INTENCLR_ENDECB_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ECB_INTENCLR_ENDECB_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ECB_INTENCLR_ENDECB_R_Enum;

typedef enum {                                  /*!< ECB_INTENCLR_ENDECB                                                       */
  ECB_INTENCLR_ENDECB_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} ECB_INTENCLR_ENDECB_W_Enum;

/* =============================================  ECB INTENCLR ERRORECB [1..1]  ============================================== */
typedef enum {                                  /*!< ECB_INTENCLR_ERRORECB                                                     */
  ECB_INTENCLR_ERRORECB_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  ECB_INTENCLR_ERRORECB_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} ECB_INTENCLR_ERRORECB_R_Enum;

typedef enum {                                  /*!< ECB_INTENCLR_ERRORECB                                                     */
  ECB_INTENCLR_ERRORECB_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} ECB_INTENCLR_ERRORECB_W_Enum;

/* ======================================================  ECBDATAPTR  ======================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  ECB POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< ECB_POWER_POWER                                                           */
  ECB_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  ECB_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} ECB_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ======================================================  EVENTS_END  ======================================================= */
/* ====================================================  EVENTS_RESOLVED  ==================================================== */
/* ==================================================  EVENTS_NOTRESOLVED  =================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ================================================  AAR INTENSET END [0..0]  ================================================ */
typedef enum {                                  /*!< AAR_INTENSET_END                                                          */
  AAR_INTENSET_END_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENSET_END_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENSET_END_R_Enum;

typedef enum {                                  /*!< AAR_INTENSET_END                                                          */
  AAR_INTENSET_END_Set                 = 1,     /*!< Set : Enable interrupt on write.                                          */
} AAR_INTENSET_END_W_Enum;

/* =============================================  AAR INTENSET RESOLVED [1..1]  ============================================== */
typedef enum {                                  /*!< AAR_INTENSET_RESOLVED                                                     */
  AAR_INTENSET_RESOLVED_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENSET_RESOLVED_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENSET_RESOLVED_R_Enum;

typedef enum {                                  /*!< AAR_INTENSET_RESOLVED                                                     */
  AAR_INTENSET_RESOLVED_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} AAR_INTENSET_RESOLVED_W_Enum;

/* ============================================  AAR INTENSET NOTRESOLVED [2..2]  ============================================ */
typedef enum {                                  /*!< AAR_INTENSET_NOTRESOLVED                                                  */
  AAR_INTENSET_NOTRESOLVED_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENSET_NOTRESOLVED_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENSET_NOTRESOLVED_R_Enum;

typedef enum {                                  /*!< AAR_INTENSET_NOTRESOLVED                                                  */
  AAR_INTENSET_NOTRESOLVED_Set         = 1,     /*!< Set : Enable interrupt on write.                                          */
} AAR_INTENSET_NOTRESOLVED_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ================================================  AAR INTENCLR END [0..0]  ================================================ */
typedef enum {                                  /*!< AAR_INTENCLR_END                                                          */
  AAR_INTENCLR_END_Disabled            = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENCLR_END_Enabled             = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENCLR_END_R_Enum;

typedef enum {                                  /*!< AAR_INTENCLR_END                                                          */
  AAR_INTENCLR_END_Clear               = 1,     /*!< Clear : Disable interrupt on write.                                       */
} AAR_INTENCLR_END_W_Enum;

/* =============================================  AAR INTENCLR RESOLVED [1..1]  ============================================== */
typedef enum {                                  /*!< AAR_INTENCLR_RESOLVED                                                     */
  AAR_INTENCLR_RESOLVED_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENCLR_RESOLVED_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENCLR_RESOLVED_R_Enum;

typedef enum {                                  /*!< AAR_INTENCLR_RESOLVED                                                     */
  AAR_INTENCLR_RESOLVED_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} AAR_INTENCLR_RESOLVED_W_Enum;

/* ============================================  AAR INTENCLR NOTRESOLVED [2..2]  ============================================ */
typedef enum {                                  /*!< AAR_INTENCLR_NOTRESOLVED                                                  */
  AAR_INTENCLR_NOTRESOLVED_Disabled    = 0,     /*!< Disabled : Interrupt disabled.                                            */
  AAR_INTENCLR_NOTRESOLVED_Enabled     = 1,     /*!< Enabled : Interrupt enabled.                                              */
} AAR_INTENCLR_NOTRESOLVED_R_Enum;

typedef enum {                                  /*!< AAR_INTENCLR_NOTRESOLVED                                                  */
  AAR_INTENCLR_NOTRESOLVED_Clear       = 1,     /*!< Clear : Disable interrupt on write.                                       */
} AAR_INTENCLR_NOTRESOLVED_W_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  AAR ENABLE ENABLE [0..1]  ================================================ */
typedef enum {                                  /*!< AAR_ENABLE_ENABLE                                                         */
  AAR_ENABLE_ENABLE_Disabled           = 0,     /*!< Disabled : Disabled AAR.                                                  */
  AAR_ENABLE_ENABLE_Enabled            = 3,     /*!< Enabled : Enable AAR.                                                     */
} AAR_ENABLE_ENABLE_Enum;

/* =========================================================  NIRK  ========================================================== */
/* ========================================================  IRKPTR  ========================================================= */
/* ========================================================  ADDRPTR  ======================================================== */
/* ======================================================  SCRATCHPTR  ======================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  AAR POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< AAR_POWER_POWER                                                           */
  AAR_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  AAR_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} AAR_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_KSGEN  ====================================================== */
/* ======================================================  TASKS_CRYPT  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ====================================================  EVENTS_ENDKSGEN  ==================================================== */
/* ====================================================  EVENTS_ENDCRYPT  ==================================================== */
/* =====================================================  EVENTS_ERROR  ====================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ===========================================  CCM SHORTS ENDKSGEN_CRYPT [0..0]  ============================================ */
typedef enum {                                  /*!< CCM_SHORTS_ENDKSGEN_CRYPT                                                 */
  CCM_SHORTS_ENDKSGEN_CRYPT_Disabled   = 0,     /*!< Disabled : Shortcut disabled.                                             */
  CCM_SHORTS_ENDKSGEN_CRYPT_Enabled    = 1,     /*!< Enabled : Shortcut enabled.                                               */
} CCM_SHORTS_ENDKSGEN_CRYPT_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* =============================================  CCM INTENSET ENDKSGEN [0..0]  ============================================== */
typedef enum {                                  /*!< CCM_INTENSET_ENDKSGEN                                                     */
  CCM_INTENSET_ENDKSGEN_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENSET_ENDKSGEN_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENSET_ENDKSGEN_R_Enum;

typedef enum {                                  /*!< CCM_INTENSET_ENDKSGEN                                                     */
  CCM_INTENSET_ENDKSGEN_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} CCM_INTENSET_ENDKSGEN_W_Enum;

/* =============================================  CCM INTENSET ENDCRYPT [1..1]  ============================================== */
typedef enum {                                  /*!< CCM_INTENSET_ENDCRYPT                                                     */
  CCM_INTENSET_ENDCRYPT_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENSET_ENDCRYPT_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENSET_ENDCRYPT_R_Enum;

typedef enum {                                  /*!< CCM_INTENSET_ENDCRYPT                                                     */
  CCM_INTENSET_ENDCRYPT_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} CCM_INTENSET_ENDCRYPT_W_Enum;

/* ===============================================  CCM INTENSET ERROR [2..2]  =============================================== */
typedef enum {                                  /*!< CCM_INTENSET_ERROR                                                        */
  CCM_INTENSET_ERROR_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENSET_ERROR_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENSET_ERROR_R_Enum;

typedef enum {                                  /*!< CCM_INTENSET_ERROR                                                        */
  CCM_INTENSET_ERROR_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} CCM_INTENSET_ERROR_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* =============================================  CCM INTENCLR ENDKSGEN [0..0]  ============================================== */
typedef enum {                                  /*!< CCM_INTENCLR_ENDKSGEN                                                     */
  CCM_INTENCLR_ENDKSGEN_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENCLR_ENDKSGEN_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENCLR_ENDKSGEN_R_Enum;

typedef enum {                                  /*!< CCM_INTENCLR_ENDKSGEN                                                     */
  CCM_INTENCLR_ENDKSGEN_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CCM_INTENCLR_ENDKSGEN_W_Enum;

/* =============================================  CCM INTENCLR ENDCRYPT [1..1]  ============================================== */
typedef enum {                                  /*!< CCM_INTENCLR_ENDCRYPT                                                     */
  CCM_INTENCLR_ENDCRYPT_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENCLR_ENDCRYPT_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENCLR_ENDCRYPT_R_Enum;

typedef enum {                                  /*!< CCM_INTENCLR_ENDCRYPT                                                     */
  CCM_INTENCLR_ENDCRYPT_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CCM_INTENCLR_ENDCRYPT_W_Enum;

/* ===============================================  CCM INTENCLR ERROR [2..2]  =============================================== */
typedef enum {                                  /*!< CCM_INTENCLR_ERROR                                                        */
  CCM_INTENCLR_ERROR_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  CCM_INTENCLR_ERROR_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} CCM_INTENCLR_ERROR_R_Enum;

typedef enum {                                  /*!< CCM_INTENCLR_ERROR                                                        */
  CCM_INTENCLR_ERROR_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} CCM_INTENCLR_ERROR_W_Enum;

/* =======================================================  MICSTATUS  ======================================================= */
/* ============================================  CCM MICSTATUS MICSTATUS [0..0]  ============================================= */
typedef enum {                                  /*!< CCM_MICSTATUS_MICSTATUS                                                   */
  CCM_MICSTATUS_MICSTATUS_CheckFailed  = 0,     /*!< CheckFailed : MIC check failed.                                           */
  CCM_MICSTATUS_MICSTATUS_CheckPassed  = 1,     /*!< CheckPassed : MIC check passed.                                           */
} CCM_MICSTATUS_MICSTATUS_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  CCM ENABLE ENABLE [0..1]  ================================================ */
typedef enum {                                  /*!< CCM_ENABLE_ENABLE                                                         */
  CCM_ENABLE_ENABLE_Disabled           = 0,     /*!< Disabled : CCM is disabled.                                               */
  CCM_ENABLE_ENABLE_Enabled            = 2,     /*!< Enabled : CCM is enabled.                                                 */
} CCM_ENABLE_ENABLE_Enum;

/* =========================================================  MODE  ========================================================== */
/* =================================================  CCM MODE MODE [0..0]  ================================================== */
typedef enum {                                  /*!< CCM_MODE_MODE                                                             */
  CCM_MODE_MODE_Encryption             = 0,     /*!< Encryption : CCM mode TX                                                  */
  CCM_MODE_MODE_Decryption             = 1,     /*!< Decryption : CCM mode TX                                                  */
} CCM_MODE_MODE_Enum;

/* ========================================================  CNFPTR  ========================================================= */
/* =========================================================  INPTR  ========================================================= */
/* ========================================================  OUTPTR  ========================================================= */
/* ======================================================  SCRATCHPTR  ======================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  CCM POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< CCM_POWER_POWER                                                           */
  CCM_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  CCM_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} CCM_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ====================================================  EVENTS_TIMEOUT  ===================================================== */
/* =======================================================  INTENSET  ======================================================== */
/* ==============================================  WDT INTENSET TIMEOUT [0..0]  ============================================== */
typedef enum {                                  /*!< WDT_INTENSET_TIMEOUT                                                      */
  WDT_INTENSET_TIMEOUT_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  WDT_INTENSET_TIMEOUT_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} WDT_INTENSET_TIMEOUT_R_Enum;

typedef enum {                                  /*!< WDT_INTENSET_TIMEOUT                                                      */
  WDT_INTENSET_TIMEOUT_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} WDT_INTENSET_TIMEOUT_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ==============================================  WDT INTENCLR TIMEOUT [0..0]  ============================================== */
typedef enum {                                  /*!< WDT_INTENCLR_TIMEOUT                                                      */
  WDT_INTENCLR_TIMEOUT_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  WDT_INTENCLR_TIMEOUT_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} WDT_INTENCLR_TIMEOUT_R_Enum;

typedef enum {                                  /*!< WDT_INTENCLR_TIMEOUT                                                      */
  WDT_INTENCLR_TIMEOUT_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} WDT_INTENCLR_TIMEOUT_W_Enum;

/* =======================================================  RUNSTATUS  ======================================================= */
/* ============================================  WDT RUNSTATUS RUNSTATUS [0..0]  ============================================= */
typedef enum {                                  /*!< WDT_RUNSTATUS_RUNSTATUS                                                   */
  WDT_RUNSTATUS_RUNSTATUS_NotRunning   = 0,     /*!< NotRunning : Watchdog timer is not running.                               */
  WDT_RUNSTATUS_RUNSTATUS_Running      = 1,     /*!< Running : Watchdog timer is running.                                      */
} WDT_RUNSTATUS_RUNSTATUS_Enum;

/* =======================================================  REQSTATUS  ======================================================= */
/* ===============================================  WDT REQSTATUS RR0 [0..0]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR0                                                         */
  WDT_REQSTATUS_RR0_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[0] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR0_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[0] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR0_Enum;

/* ===============================================  WDT REQSTATUS RR1 [1..1]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR1                                                         */
  WDT_REQSTATUS_RR1_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[1] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR1_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[1] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR1_Enum;

/* ===============================================  WDT REQSTATUS RR2 [2..2]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR2                                                         */
  WDT_REQSTATUS_RR2_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[2] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR2_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[2] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR2_Enum;

/* ===============================================  WDT REQSTATUS RR3 [3..3]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR3                                                         */
  WDT_REQSTATUS_RR3_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[3] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR3_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[3] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR3_Enum;

/* ===============================================  WDT REQSTATUS RR4 [4..4]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR4                                                         */
  WDT_REQSTATUS_RR4_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[4] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR4_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[4] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR4_Enum;

/* ===============================================  WDT REQSTATUS RR5 [5..5]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR5                                                         */
  WDT_REQSTATUS_RR5_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[5] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR5_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[5] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR5_Enum;

/* ===============================================  WDT REQSTATUS RR6 [6..6]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR6                                                         */
  WDT_REQSTATUS_RR6_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[6] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR6_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[6] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR6_Enum;

/* ===============================================  WDT REQSTATUS RR7 [7..7]  ================================================ */
typedef enum {                                  /*!< WDT_REQSTATUS_RR7                                                         */
  WDT_REQSTATUS_RR7_DisabledOrRequested = 0,    /*!< DisabledOrRequested : RR[7] register is not enabled or has already
                                                     requested reload.                                                         */
  WDT_REQSTATUS_RR7_EnabledAndUnrequested = 1,  /*!< EnabledAndUnrequested : RR[7] register is enabled and has not
                                                     jet requested.                                                            */
} WDT_REQSTATUS_RR7_Enum;

/* ==========================================================  CRV  ========================================================== */
/* =========================================================  RREN  ========================================================== */
/* ==================================================  WDT RREN RR0 [0..0]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR0                                                              */
  WDT_RREN_RR0_Disabled                = 0,     /*!< Disabled : RR[0] register is disabled.                                    */
  WDT_RREN_RR0_Enabled                 = 1,     /*!< Enabled : RR[0] register is enabled.                                      */
} WDT_RREN_RR0_Enum;

/* ==================================================  WDT RREN RR1 [1..1]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR1                                                              */
  WDT_RREN_RR1_Disabled                = 0,     /*!< Disabled : RR[1] register is disabled.                                    */
  WDT_RREN_RR1_Enabled                 = 1,     /*!< Enabled : RR[1] register is enabled.                                      */
} WDT_RREN_RR1_Enum;

/* ==================================================  WDT RREN RR2 [2..2]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR2                                                              */
  WDT_RREN_RR2_Disabled                = 0,     /*!< Disabled : RR[2] register is disabled.                                    */
  WDT_RREN_RR2_Enabled                 = 1,     /*!< Enabled : RR[2] register is enabled.                                      */
} WDT_RREN_RR2_Enum;

/* ==================================================  WDT RREN RR3 [3..3]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR3                                                              */
  WDT_RREN_RR3_Disabled                = 0,     /*!< Disabled : RR[3] register is disabled.                                    */
  WDT_RREN_RR3_Enabled                 = 1,     /*!< Enabled : RR[3] register is enabled.                                      */
} WDT_RREN_RR3_Enum;

/* ==================================================  WDT RREN RR4 [4..4]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR4                                                              */
  WDT_RREN_RR4_Disabled                = 0,     /*!< Disabled : RR[4] register is disabled.                                    */
  WDT_RREN_RR4_Enabled                 = 1,     /*!< Enabled : RR[4] register is enabled.                                      */
} WDT_RREN_RR4_Enum;

/* ==================================================  WDT RREN RR5 [5..5]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR5                                                              */
  WDT_RREN_RR5_Disabled                = 0,     /*!< Disabled : RR[5] register is disabled.                                    */
  WDT_RREN_RR5_Enabled                 = 1,     /*!< Enabled : RR[5] register is enabled.                                      */
} WDT_RREN_RR5_Enum;

/* ==================================================  WDT RREN RR6 [6..6]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR6                                                              */
  WDT_RREN_RR6_Disabled                = 0,     /*!< Disabled : RR[6] register is disabled.                                    */
  WDT_RREN_RR6_Enabled                 = 1,     /*!< Enabled : RR[6] register is enabled.                                      */
} WDT_RREN_RR6_Enum;

/* ==================================================  WDT RREN RR7 [7..7]  ================================================== */
typedef enum {                                  /*!< WDT_RREN_RR7                                                              */
  WDT_RREN_RR7_Disabled                = 0,     /*!< Disabled : RR[7] register is disabled.                                    */
  WDT_RREN_RR7_Enabled                 = 1,     /*!< Enabled : RR[7] register is enabled.                                      */
} WDT_RREN_RR7_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ================================================  WDT CONFIG SLEEP [0..0]  ================================================ */
typedef enum {                                  /*!< WDT_CONFIG_SLEEP                                                          */
  WDT_CONFIG_SLEEP_Pause               = 0,     /*!< Pause : Pause watchdog while the CPU is asleep.                           */
  WDT_CONFIG_SLEEP_Run                 = 1,     /*!< Run : Do not pause watchdog while the CPU is asleep.                      */
} WDT_CONFIG_SLEEP_Enum;

/* ================================================  WDT CONFIG HALT [3..3]  ================================================= */
typedef enum {                                  /*!< WDT_CONFIG_HALT                                                           */
  WDT_CONFIG_HALT_Pause                = 0,     /*!< Pause : Pause watchdog while the CPU is halted by the debugger.           */
  WDT_CONFIG_HALT_Run                  = 1,     /*!< Run : Do not pause watchdog while the CPU is halted by the debugger.      */
} WDT_CONFIG_HALT_Enum;

/* ==========================================================  RR  =========================================================== */
/* ===================================================  WDT RR RR [0..31]  =================================================== */
typedef enum {                                  /*!< WDT_RR_RR                                                                 */
  WDT_RR_RR_Reload                     = 1850885685,/*!< Reload : Value to request a reload of the watchdog timer.             */
} WDT_RR_RR_Enum;

/* =========================================================  POWER  ========================================================= */
/* ================================================  WDT POWER POWER [0..0]  ================================================= */
typedef enum {                                  /*!< WDT_POWER_POWER                                                           */
  WDT_POWER_POWER_Disabled             = 0,     /*!< Disabled : Module power disabled.                                         */
  WDT_POWER_POWER_Enabled              = 1,     /*!< Enabled : Module power enabled.                                           */
} WDT_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                           QDEC                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* ===================================================  TASKS_READCLRACC  ==================================================== */
/* ===================================================  EVENTS_SAMPLERDY  ==================================================== */
/* ===================================================  EVENTS_REPORTRDY  ==================================================== */
/* =====================================================  EVENTS_ACCOF  ====================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ========================================  QDEC SHORTS REPORTRDY_READCLRACC [0..0]  ======================================== */
typedef enum {                                  /*!< QDEC_SHORTS_REPORTRDY_READCLRACC                                          */
  QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled = 0,/*!< Disabled : Shortcut disabled.                                             */
  QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled = 1, /*!< Enabled : Shortcut enabled.                                               */
} QDEC_SHORTS_REPORTRDY_READCLRACC_Enum;

/* ===========================================  QDEC SHORTS SAMPLERDY_STOP [1..1]  =========================================== */
typedef enum {                                  /*!< QDEC_SHORTS_SAMPLERDY_STOP                                                */
  QDEC_SHORTS_SAMPLERDY_STOP_Disabled  = 0,     /*!< Disabled : Shortcut disabled.                                             */
  QDEC_SHORTS_SAMPLERDY_STOP_Enabled   = 1,     /*!< Enabled : Shortcut enabled.                                               */
} QDEC_SHORTS_SAMPLERDY_STOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* ============================================  QDEC INTENSET SAMPLERDY [0..0]  ============================================= */
typedef enum {                                  /*!< QDEC_INTENSET_SAMPLERDY                                                   */
  QDEC_INTENSET_SAMPLERDY_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENSET_SAMPLERDY_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENSET_SAMPLERDY_R_Enum;

typedef enum {                                  /*!< QDEC_INTENSET_SAMPLERDY                                                   */
  QDEC_INTENSET_SAMPLERDY_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} QDEC_INTENSET_SAMPLERDY_W_Enum;

/* ============================================  QDEC INTENSET REPORTRDY [1..1]  ============================================= */
typedef enum {                                  /*!< QDEC_INTENSET_REPORTRDY                                                   */
  QDEC_INTENSET_REPORTRDY_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENSET_REPORTRDY_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENSET_REPORTRDY_R_Enum;

typedef enum {                                  /*!< QDEC_INTENSET_REPORTRDY                                                   */
  QDEC_INTENSET_REPORTRDY_Set          = 1,     /*!< Set : Enable interrupt on write.                                          */
} QDEC_INTENSET_REPORTRDY_W_Enum;

/* ==============================================  QDEC INTENSET ACCOF [2..2]  =============================================== */
typedef enum {                                  /*!< QDEC_INTENSET_ACCOF                                                       */
  QDEC_INTENSET_ACCOF_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENSET_ACCOF_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENSET_ACCOF_R_Enum;

typedef enum {                                  /*!< QDEC_INTENSET_ACCOF                                                       */
  QDEC_INTENSET_ACCOF_Set              = 1,     /*!< Set : Enable interrupt on write.                                          */
} QDEC_INTENSET_ACCOF_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* ============================================  QDEC INTENCLR SAMPLERDY [0..0]  ============================================= */
typedef enum {                                  /*!< QDEC_INTENCLR_SAMPLERDY                                                   */
  QDEC_INTENCLR_SAMPLERDY_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENCLR_SAMPLERDY_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENCLR_SAMPLERDY_R_Enum;

typedef enum {                                  /*!< QDEC_INTENCLR_SAMPLERDY                                                   */
  QDEC_INTENCLR_SAMPLERDY_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} QDEC_INTENCLR_SAMPLERDY_W_Enum;

/* ============================================  QDEC INTENCLR REPORTRDY [1..1]  ============================================= */
typedef enum {                                  /*!< QDEC_INTENCLR_REPORTRDY                                                   */
  QDEC_INTENCLR_REPORTRDY_Disabled     = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENCLR_REPORTRDY_Enabled      = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENCLR_REPORTRDY_R_Enum;

typedef enum {                                  /*!< QDEC_INTENCLR_REPORTRDY                                                   */
  QDEC_INTENCLR_REPORTRDY_Clear        = 1,     /*!< Clear : Disable interrupt on write.                                       */
} QDEC_INTENCLR_REPORTRDY_W_Enum;

/* ==============================================  QDEC INTENCLR ACCOF [2..2]  =============================================== */
typedef enum {                                  /*!< QDEC_INTENCLR_ACCOF                                                       */
  QDEC_INTENCLR_ACCOF_Disabled         = 0,     /*!< Disabled : Interrupt disabled.                                            */
  QDEC_INTENCLR_ACCOF_Enabled          = 1,     /*!< Enabled : Interrupt enabled.                                              */
} QDEC_INTENCLR_ACCOF_R_Enum;

typedef enum {                                  /*!< QDEC_INTENCLR_ACCOF                                                       */
  QDEC_INTENCLR_ACCOF_Clear            = 1,     /*!< Clear : Disable interrupt on write.                                       */
} QDEC_INTENCLR_ACCOF_W_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ===============================================  QDEC ENABLE ENABLE [0..0]  =============================================== */
typedef enum {                                  /*!< QDEC_ENABLE_ENABLE                                                        */
  QDEC_ENABLE_ENABLE_Disabled          = 0,     /*!< Disabled : Disabled QDEC.                                                 */
  QDEC_ENABLE_ENABLE_Enabled           = 1,     /*!< Enabled : Enable QDEC.                                                    */
} QDEC_ENABLE_ENABLE_Enum;

/* ========================================================  LEDPOL  ========================================================= */
/* ===============================================  QDEC LEDPOL LEDPOL [0..0]  =============================================== */
typedef enum {                                  /*!< QDEC_LEDPOL_LEDPOL                                                        */
  QDEC_LEDPOL_LEDPOL_ActiveLow         = 0,     /*!< ActiveLow : LED output is active low.                                     */
  QDEC_LEDPOL_LEDPOL_ActiveHigh        = 1,     /*!< ActiveHigh : LED output is active high.                                   */
} QDEC_LEDPOL_LEDPOL_Enum;

/* =======================================================  SAMPLEPER  ======================================================= */
/* ============================================  QDEC SAMPLEPER SAMPLEPER [0..2]  ============================================ */
typedef enum {                                  /*!< QDEC_SAMPLEPER_SAMPLEPER                                                  */
  QDEC_SAMPLEPER_SAMPLEPER_128us       = 0,     /*!< 128us : 128us sample period.                                              */
  QDEC_SAMPLEPER_SAMPLEPER_256us       = 1,     /*!< 256us : 256us sample period.                                              */
  QDEC_SAMPLEPER_SAMPLEPER_512us       = 2,     /*!< 512us : 512us sample period.                                              */
  QDEC_SAMPLEPER_SAMPLEPER_1024us      = 3,     /*!< 1024us : 1024us sample period.                                            */
  QDEC_SAMPLEPER_SAMPLEPER_2048us      = 4,     /*!< 2048us : 2048us sample period.                                            */
  QDEC_SAMPLEPER_SAMPLEPER_4096us      = 5,     /*!< 4096us : 4096us sample period.                                            */
  QDEC_SAMPLEPER_SAMPLEPER_8192us      = 6,     /*!< 8192us : 8192us sample period.                                            */
  QDEC_SAMPLEPER_SAMPLEPER_16384us     = 7,     /*!< 16384us : 16384us sample period.                                          */
} QDEC_SAMPLEPER_SAMPLEPER_Enum;

/* ========================================================  SAMPLE  ========================================================= */
/* =======================================================  REPORTPER  ======================================================= */
/* ============================================  QDEC REPORTPER REPORTPER [0..2]  ============================================ */
typedef enum {                                  /*!< QDEC_REPORTPER_REPORTPER                                                  */
  QDEC_REPORTPER_REPORTPER_10Smpl      = 0,     /*!< 10Smpl : 10 samples per report.                                           */
  QDEC_REPORTPER_REPORTPER_40Smpl      = 1,     /*!< 40Smpl : 40 samples per report.                                           */
  QDEC_REPORTPER_REPORTPER_80Smpl      = 2,     /*!< 80Smpl : 80 samples per report.                                           */
  QDEC_REPORTPER_REPORTPER_120Smpl     = 3,     /*!< 120Smpl : 120 samples per report.                                         */
  QDEC_REPORTPER_REPORTPER_160Smpl     = 4,     /*!< 160Smpl : 160 samples per report.                                         */
  QDEC_REPORTPER_REPORTPER_200Smpl     = 5,     /*!< 200Smpl : 200 samples per report.                                         */
  QDEC_REPORTPER_REPORTPER_240Smpl     = 6,     /*!< 240Smpl : 240 samples per report.                                         */
  QDEC_REPORTPER_REPORTPER_280Smpl     = 7,     /*!< 280Smpl : 280 samples per report.                                         */
} QDEC_REPORTPER_REPORTPER_Enum;

/* ==========================================================  ACC  ========================================================== */
/* ========================================================  ACCREAD  ======================================================== */
/* ========================================================  PSELLED  ======================================================== */
/* =========================================================  PSELA  ========================================================= */
/* =========================================================  PSELB  ========================================================= */
/* =========================================================  DBFEN  ========================================================= */
/* ================================================  QDEC DBFEN DBFEN [0..0]  ================================================ */
typedef enum {                                  /*!< QDEC_DBFEN_DBFEN                                                          */
  QDEC_DBFEN_DBFEN_Disabled            = 0,     /*!< Disabled : Debounce input filters disabled.                               */
  QDEC_DBFEN_DBFEN_Enabled             = 1,     /*!< Enabled : Debounce input filters enabled.                                 */
} QDEC_DBFEN_DBFEN_Enum;

/* ========================================================  LEDPRE  ========================================================= */
/* ========================================================  ACCDBL  ========================================================= */
/* ======================================================  ACCDBLREAD  ======================================================= */
/* =========================================================  POWER  ========================================================= */
/* ================================================  QDEC POWER POWER [0..0]  ================================================ */
typedef enum {                                  /*!< QDEC_POWER_POWER                                                          */
  QDEC_POWER_POWER_Disabled            = 0,     /*!< Disabled : Module power disabled.                                         */
  QDEC_POWER_POWER_Enabled             = 1,     /*!< Enabled : Module power enabled.                                           */
} QDEC_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                          LPCOMP                                           ================ */
/* =========================================================================================================================== */

/* ======================================================  TASKS_START  ====================================================== */
/* ======================================================  TASKS_STOP  ======================================================= */
/* =====================================================  TASKS_SAMPLE  ====================================================== */
/* =====================================================  EVENTS_READY  ====================================================== */
/* ======================================================  EVENTS_DOWN  ====================================================== */
/* =======================================================  EVENTS_UP  ======================================================= */
/* =====================================================  EVENTS_CROSS  ====================================================== */
/* ========================================================  SHORTS  ========================================================= */
/* ===========================================  LPCOMP SHORTS READY_SAMPLE [0..0]  =========================================== */
typedef enum {                                  /*!< LPCOMP_SHORTS_READY_SAMPLE                                                */
  LPCOMP_SHORTS_READY_SAMPLE_Disabled  = 0,     /*!< Disabled : Shortcut disabled.                                             */
  LPCOMP_SHORTS_READY_SAMPLE_Enabled   = 1,     /*!< Enabled : Shortcut enabled.                                               */
} LPCOMP_SHORTS_READY_SAMPLE_Enum;

/* ============================================  LPCOMP SHORTS READY_STOP [1..1]  ============================================ */
typedef enum {                                  /*!< LPCOMP_SHORTS_READY_STOP                                                  */
  LPCOMP_SHORTS_READY_STOP_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  LPCOMP_SHORTS_READY_STOP_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} LPCOMP_SHORTS_READY_STOP_Enum;

/* ============================================  LPCOMP SHORTS DOWN_STOP [2..2]  ============================================= */
typedef enum {                                  /*!< LPCOMP_SHORTS_DOWN_STOP                                                   */
  LPCOMP_SHORTS_DOWN_STOP_Disabled     = 0,     /*!< Disabled : Shortcut disabled.                                             */
  LPCOMP_SHORTS_DOWN_STOP_Enabled      = 1,     /*!< Enabled : Shortcut enabled.                                               */
} LPCOMP_SHORTS_DOWN_STOP_Enum;

/* =============================================  LPCOMP SHORTS UP_STOP [3..3]  ============================================== */
typedef enum {                                  /*!< LPCOMP_SHORTS_UP_STOP                                                     */
  LPCOMP_SHORTS_UP_STOP_Disabled       = 0,     /*!< Disabled : Shortcut disabled.                                             */
  LPCOMP_SHORTS_UP_STOP_Enabled        = 1,     /*!< Enabled : Shortcut enabled.                                               */
} LPCOMP_SHORTS_UP_STOP_Enum;

/* ============================================  LPCOMP SHORTS CROSS_STOP [4..4]  ============================================ */
typedef enum {                                  /*!< LPCOMP_SHORTS_CROSS_STOP                                                  */
  LPCOMP_SHORTS_CROSS_STOP_Disabled    = 0,     /*!< Disabled : Shortcut disabled.                                             */
  LPCOMP_SHORTS_CROSS_STOP_Enabled     = 1,     /*!< Enabled : Shortcut enabled.                                               */
} LPCOMP_SHORTS_CROSS_STOP_Enum;

/* =======================================================  INTENSET  ======================================================== */
/* =============================================  LPCOMP INTENSET READY [0..0]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENSET_READY                                                     */
  LPCOMP_INTENSET_READY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENSET_READY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENSET_READY_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENSET_READY                                                     */
  LPCOMP_INTENSET_READY_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} LPCOMP_INTENSET_READY_W_Enum;

/* ==============================================  LPCOMP INTENSET DOWN [1..1]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENSET_DOWN                                                      */
  LPCOMP_INTENSET_DOWN_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENSET_DOWN_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENSET_DOWN_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENSET_DOWN                                                      */
  LPCOMP_INTENSET_DOWN_Set             = 1,     /*!< Set : Enable interrupt on write.                                          */
} LPCOMP_INTENSET_DOWN_W_Enum;

/* ===============================================  LPCOMP INTENSET UP [2..2]  =============================================== */
typedef enum {                                  /*!< LPCOMP_INTENSET_UP                                                        */
  LPCOMP_INTENSET_UP_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENSET_UP_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENSET_UP_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENSET_UP                                                        */
  LPCOMP_INTENSET_UP_Set               = 1,     /*!< Set : Enable interrupt on write.                                          */
} LPCOMP_INTENSET_UP_W_Enum;

/* =============================================  LPCOMP INTENSET CROSS [3..3]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENSET_CROSS                                                     */
  LPCOMP_INTENSET_CROSS_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENSET_CROSS_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENSET_CROSS_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENSET_CROSS                                                     */
  LPCOMP_INTENSET_CROSS_Set            = 1,     /*!< Set : Enable interrupt on write.                                          */
} LPCOMP_INTENSET_CROSS_W_Enum;

/* =======================================================  INTENCLR  ======================================================== */
/* =============================================  LPCOMP INTENCLR READY [0..0]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENCLR_READY                                                     */
  LPCOMP_INTENCLR_READY_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENCLR_READY_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENCLR_READY_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENCLR_READY                                                     */
  LPCOMP_INTENCLR_READY_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} LPCOMP_INTENCLR_READY_W_Enum;

/* ==============================================  LPCOMP INTENCLR DOWN [1..1]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENCLR_DOWN                                                      */
  LPCOMP_INTENCLR_DOWN_Disabled        = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENCLR_DOWN_Enabled         = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENCLR_DOWN_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENCLR_DOWN                                                      */
  LPCOMP_INTENCLR_DOWN_Clear           = 1,     /*!< Clear : Disable interrupt on write.                                       */
} LPCOMP_INTENCLR_DOWN_W_Enum;

/* ===============================================  LPCOMP INTENCLR UP [2..2]  =============================================== */
typedef enum {                                  /*!< LPCOMP_INTENCLR_UP                                                        */
  LPCOMP_INTENCLR_UP_Disabled          = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENCLR_UP_Enabled           = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENCLR_UP_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENCLR_UP                                                        */
  LPCOMP_INTENCLR_UP_Clear             = 1,     /*!< Clear : Disable interrupt on write.                                       */
} LPCOMP_INTENCLR_UP_W_Enum;

/* =============================================  LPCOMP INTENCLR CROSS [3..3]  ============================================== */
typedef enum {                                  /*!< LPCOMP_INTENCLR_CROSS                                                     */
  LPCOMP_INTENCLR_CROSS_Disabled       = 0,     /*!< Disabled : Interrupt disabled.                                            */
  LPCOMP_INTENCLR_CROSS_Enabled        = 1,     /*!< Enabled : Interrupt enabled.                                              */
} LPCOMP_INTENCLR_CROSS_R_Enum;

typedef enum {                                  /*!< LPCOMP_INTENCLR_CROSS                                                     */
  LPCOMP_INTENCLR_CROSS_Clear          = 1,     /*!< Clear : Disable interrupt on write.                                       */
} LPCOMP_INTENCLR_CROSS_W_Enum;

/* ========================================================  RESULT  ========================================================= */
/* ==============================================  LPCOMP RESULT RESULT [0..0]  ============================================== */
typedef enum {                                  /*!< LPCOMP_RESULT_RESULT                                                      */
  LPCOMP_RESULT_RESULT_Below           = 0,     /*!< Below : Input voltage is bellow the reference threshold.                  */
  LPCOMP_RESULT_RESULT_Above           = 1,     /*!< Above : Input voltage is above the reference threshold.                   */
} LPCOMP_RESULT_RESULT_Enum;

/* ========================================================  ENABLE  ========================================================= */
/* ==============================================  LPCOMP ENABLE ENABLE [0..1]  ============================================== */
typedef enum {                                  /*!< LPCOMP_ENABLE_ENABLE                                                      */
  LPCOMP_ENABLE_ENABLE_Disabled        = 0,     /*!< Disabled : Disabled LPCOMP.                                               */
  LPCOMP_ENABLE_ENABLE_Enabled         = 1,     /*!< Enabled : Enable LPCOMP.                                                  */
} LPCOMP_ENABLE_ENABLE_Enum;

/* =========================================================  PSEL  ========================================================== */
/* ================================================  LPCOMP PSEL PSEL [0..2]  ================================================ */
typedef enum {                                  /*!< LPCOMP_PSEL_PSEL                                                          */
  LPCOMP_PSEL_PSEL_AnalogInput0        = 0,     /*!< AnalogInput0 : Use analog input 0 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput1        = 1,     /*!< AnalogInput1 : Use analog input 1 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput2        = 2,     /*!< AnalogInput2 : Use analog input 2 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput3        = 3,     /*!< AnalogInput3 : Use analog input 3 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput4        = 4,     /*!< AnalogInput4 : Use analog input 4 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput5        = 5,     /*!< AnalogInput5 : Use analog input 5 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput6        = 6,     /*!< AnalogInput6 : Use analog input 6 as analog input.                        */
  LPCOMP_PSEL_PSEL_AnalogInput7        = 7,     /*!< AnalogInput7 : Use analog input 7 as analog input.                        */
} LPCOMP_PSEL_PSEL_Enum;

/* ========================================================  REFSEL  ========================================================= */
/* ==============================================  LPCOMP REFSEL REFSEL [0..2]  ============================================== */
typedef enum {                                  /*!< LPCOMP_REFSEL_REFSEL                                                      */
  LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling = 0,/*!< SupplyOneEighthPrescaling : Use supply with a 1/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling = 1,/*!< SupplyTwoEighthsPrescaling : Use supply with a 2/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling = 2,/*!< SupplyThreeEighthsPrescaling : Use supply with a 3/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling = 3,/*!< SupplyFourEighthsPrescaling : Use supply with a 4/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling = 4,/*!< SupplyFiveEighthsPrescaling : Use supply with a 5/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling = 5,/*!< SupplySixEighthsPrescaling : Use supply with a 6/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling = 6,/*!< SupplySevenEighthsPrescaling : Use supply with a 7/8 prescaler
                                                     as reference.                                                             */
  LPCOMP_REFSEL_REFSEL_ARef            = 7,     /*!< ARef : Use external analog reference as reference.                        */
} LPCOMP_REFSEL_REFSEL_Enum;

/* =======================================================  EXTREFSEL  ======================================================= */
/* ===========================================  LPCOMP EXTREFSEL EXTREFSEL [0..0]  =========================================== */
typedef enum {                                  /*!< LPCOMP_EXTREFSEL_EXTREFSEL                                                */
  LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0 = 0,/*!< AnalogReference0 : Use analog reference 0 as reference.                 */
  LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1 = 1,/*!< AnalogReference1 : Use analog reference 1 as reference.                 */
} LPCOMP_EXTREFSEL_EXTREFSEL_Enum;

/* =======================================================  ANADETECT  ======================================================= */
/* ===========================================  LPCOMP ANADETECT ANADETECT [0..1]  =========================================== */
typedef enum {                                  /*!< LPCOMP_ANADETECT_ANADETECT                                                */
  LPCOMP_ANADETECT_ANADETECT_Cross     = 0,     /*!< Cross : Generate ANADETEC on crossing, both upwards and downwards
                                                     crossing.                                                                 */
  LPCOMP_ANADETECT_ANADETECT_Up        = 1,     /*!< Up : Generate ANADETEC on upwards crossing only.                          */
  LPCOMP_ANADETECT_ANADETECT_Down      = 2,     /*!< Down : Generate ANADETEC on downwards crossing only.                      */
} LPCOMP_ANADETECT_ANADETECT_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  LPCOMP POWER POWER [0..0]  =============================================== */
typedef enum {                                  /*!< LPCOMP_POWER_POWER                                                        */
  LPCOMP_POWER_POWER_Disabled          = 0,     /*!< Disabled : Module power disabled.                                         */
  LPCOMP_POWER_POWER_Enabled           = 1,     /*!< Enabled : Module power enabled.                                           */
} LPCOMP_POWER_POWER_Enum;



/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UNUSED  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           NVMC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  READY  ========================================================= */
/* ================================================  NVMC READY READY [0..0]  ================================================ */
typedef enum {                                  /*!< NVMC_READY_READY                                                          */
  NVMC_READY_READY_Busy                = 0,     /*!< Busy : NVMC is busy (on-going write or erase operation).                  */
  NVMC_READY_READY_Ready               = 1,     /*!< Ready : NVMC is ready.                                                    */
} NVMC_READY_READY_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ================================================  NVMC CONFIG WEN [0..1]  ================================================= */
typedef enum {                                  /*!< NVMC_CONFIG_WEN                                                           */
  NVMC_CONFIG_WEN_Ren                  = 0,     /*!< Ren : Read only access.                                                   */
  NVMC_CONFIG_WEN_Wen                  = 1,     /*!< Wen : Write enabled.                                                      */
  NVMC_CONFIG_WEN_Een                  = 2,     /*!< Een : Erase enabled.                                                      */
} NVMC_CONFIG_WEN_Enum;

/* =======================================================  ERASEPAGE  ======================================================= */
/* =======================================================  ERASEPCR1  ======================================================= */
/* =======================================================  ERASEALL  ======================================================== */
/* =============================================  NVMC ERASEALL ERASEALL [0..0]  ============================================= */
typedef enum {                                  /*!< NVMC_ERASEALL_ERASEALL                                                    */
  NVMC_ERASEALL_ERASEALL_NoOperation   = 0,     /*!< NoOperation : No operation.                                               */
  NVMC_ERASEALL_ERASEALL_Erase         = 1,     /*!< Erase : Start chip erase.                                                 */
} NVMC_ERASEALL_ERASEALL_Enum;

/* =======================================================  ERASEPCR0  ======================================================= */
/* =======================================================  ERASEUICR  ======================================================= */
/* ============================================  NVMC ERASEUICR ERASEUICR [0..0]  ============================================ */
typedef enum {                                  /*!< NVMC_ERASEUICR_ERASEUICR                                                  */
  NVMC_ERASEUICR_ERASEUICR_NoOperation = 0,     /*!< NoOperation : No operation.                                               */
  NVMC_ERASEUICR_ERASEUICR_Erase       = 1,     /*!< Erase : Start UICR erase.                                                 */
} NVMC_ERASEUICR_ERASEUICR_Enum;



/* =========================================================================================================================== */
/* ================                                            PPI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CHEN  ========================================================== */
/* ==================================================  PPI CHEN CH0 [0..0]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH0                                                              */
  PPI_CHEN_CH0_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH0_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH0_Enum;

/* ==================================================  PPI CHEN CH1 [1..1]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH1                                                              */
  PPI_CHEN_CH1_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH1_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH1_Enum;

/* ==================================================  PPI CHEN CH2 [2..2]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH2                                                              */
  PPI_CHEN_CH2_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH2_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH2_Enum;

/* ==================================================  PPI CHEN CH3 [3..3]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH3                                                              */
  PPI_CHEN_CH3_Disabled                = 0,     /*!< Disabled : Channel disabled                                               */
  PPI_CHEN_CH3_Enabled                 = 1,     /*!< Enabled : Channel enabled                                                 */
} PPI_CHEN_CH3_Enum;

/* ==================================================  PPI CHEN CH4 [4..4]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH4                                                              */
  PPI_CHEN_CH4_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH4_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH4_Enum;

/* ==================================================  PPI CHEN CH5 [5..5]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH5                                                              */
  PPI_CHEN_CH5_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH5_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH5_Enum;

/* ==================================================  PPI CHEN CH6 [6..6]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH6                                                              */
  PPI_CHEN_CH6_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH6_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH6_Enum;

/* ==================================================  PPI CHEN CH7 [7..7]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH7                                                              */
  PPI_CHEN_CH7_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH7_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH7_Enum;

/* ==================================================  PPI CHEN CH8 [8..8]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH8                                                              */
  PPI_CHEN_CH8_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH8_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH8_Enum;

/* ==================================================  PPI CHEN CH9 [9..9]  ================================================== */
typedef enum {                                  /*!< PPI_CHEN_CH9                                                              */
  PPI_CHEN_CH9_Disabled                = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH9_Enabled                 = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH9_Enum;

/* ================================================  PPI CHEN CH10 [10..10]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH10                                                             */
  PPI_CHEN_CH10_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH10_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH10_Enum;

/* ================================================  PPI CHEN CH11 [11..11]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH11                                                             */
  PPI_CHEN_CH11_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH11_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH11_Enum;

/* ================================================  PPI CHEN CH12 [12..12]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH12                                                             */
  PPI_CHEN_CH12_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH12_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH12_Enum;

/* ================================================  PPI CHEN CH13 [13..13]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH13                                                             */
  PPI_CHEN_CH13_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH13_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH13_Enum;

/* ================================================  PPI CHEN CH14 [14..14]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH14                                                             */
  PPI_CHEN_CH14_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH14_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH14_Enum;

/* ================================================  PPI CHEN CH15 [15..15]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH15                                                             */
  PPI_CHEN_CH15_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH15_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH15_Enum;

/* ================================================  PPI CHEN CH20 [20..20]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH20                                                             */
  PPI_CHEN_CH20_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH20_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH20_Enum;

/* ================================================  PPI CHEN CH21 [21..21]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH21                                                             */
  PPI_CHEN_CH21_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH21_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH21_Enum;

/* ================================================  PPI CHEN CH22 [22..22]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH22                                                             */
  PPI_CHEN_CH22_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH22_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH22_Enum;

/* ================================================  PPI CHEN CH23 [23..23]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH23                                                             */
  PPI_CHEN_CH23_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH23_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH23_Enum;

/* ================================================  PPI CHEN CH24 [24..24]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH24                                                             */
  PPI_CHEN_CH24_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH24_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH24_Enum;

/* ================================================  PPI CHEN CH25 [25..25]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH25                                                             */
  PPI_CHEN_CH25_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH25_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH25_Enum;

/* ================================================  PPI CHEN CH26 [26..26]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH26                                                             */
  PPI_CHEN_CH26_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH26_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH26_Enum;

/* ================================================  PPI CHEN CH27 [27..27]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH27                                                             */
  PPI_CHEN_CH27_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH27_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH27_Enum;

/* ================================================  PPI CHEN CH28 [28..28]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH28                                                             */
  PPI_CHEN_CH28_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH28_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH28_Enum;

/* ================================================  PPI CHEN CH29 [29..29]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH29                                                             */
  PPI_CHEN_CH29_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH29_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH29_Enum;

/* ================================================  PPI CHEN CH30 [30..30]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH30                                                             */
  PPI_CHEN_CH30_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH30_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH30_Enum;

/* ================================================  PPI CHEN CH31 [31..31]  ================================================= */
typedef enum {                                  /*!< PPI_CHEN_CH31                                                             */
  PPI_CHEN_CH31_Disabled               = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHEN_CH31_Enabled                = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHEN_CH31_Enum;

/* ========================================================  CHENSET  ======================================================== */
/* ================================================  PPI CHENSET CH0 [0..0]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH0                                                           */
  PPI_CHENSET_CH0_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH0_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH0_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH0                                                           */
  PPI_CHENSET_CH0_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH0_W_Enum;

/* ================================================  PPI CHENSET CH1 [1..1]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH1                                                           */
  PPI_CHENSET_CH1_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH1_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH1_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH1                                                           */
  PPI_CHENSET_CH1_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH1_W_Enum;

/* ================================================  PPI CHENSET CH2 [2..2]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH2                                                           */
  PPI_CHENSET_CH2_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH2_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH2_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH2                                                           */
  PPI_CHENSET_CH2_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH2_W_Enum;

/* ================================================  PPI CHENSET CH3 [3..3]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH3                                                           */
  PPI_CHENSET_CH3_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH3_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH3_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH3                                                           */
  PPI_CHENSET_CH3_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH3_W_Enum;

/* ================================================  PPI CHENSET CH4 [4..4]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH4                                                           */
  PPI_CHENSET_CH4_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH4_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH4_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH4                                                           */
  PPI_CHENSET_CH4_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH4_W_Enum;

/* ================================================  PPI CHENSET CH5 [5..5]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH5                                                           */
  PPI_CHENSET_CH5_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH5_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH5_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH5                                                           */
  PPI_CHENSET_CH5_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH5_W_Enum;

/* ================================================  PPI CHENSET CH6 [6..6]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH6                                                           */
  PPI_CHENSET_CH6_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH6_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH6_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH6                                                           */
  PPI_CHENSET_CH6_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH6_W_Enum;

/* ================================================  PPI CHENSET CH7 [7..7]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH7                                                           */
  PPI_CHENSET_CH7_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH7_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH7_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH7                                                           */
  PPI_CHENSET_CH7_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH7_W_Enum;

/* ================================================  PPI CHENSET CH8 [8..8]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH8                                                           */
  PPI_CHENSET_CH8_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH8_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH8_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH8                                                           */
  PPI_CHENSET_CH8_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH8_W_Enum;

/* ================================================  PPI CHENSET CH9 [9..9]  ================================================= */
typedef enum {                                  /*!< PPI_CHENSET_CH9                                                           */
  PPI_CHENSET_CH9_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH9_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH9_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH9                                                           */
  PPI_CHENSET_CH9_Set                  = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH9_W_Enum;

/* ===============================================  PPI CHENSET CH10 [10..10]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH10                                                          */
  PPI_CHENSET_CH10_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH10_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH10_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH10                                                          */
  PPI_CHENSET_CH10_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH10_W_Enum;

/* ===============================================  PPI CHENSET CH11 [11..11]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH11                                                          */
  PPI_CHENSET_CH11_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH11_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH11_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH11                                                          */
  PPI_CHENSET_CH11_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH11_W_Enum;

/* ===============================================  PPI CHENSET CH12 [12..12]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH12                                                          */
  PPI_CHENSET_CH12_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH12_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH12_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH12                                                          */
  PPI_CHENSET_CH12_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH12_W_Enum;

/* ===============================================  PPI CHENSET CH13 [13..13]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH13                                                          */
  PPI_CHENSET_CH13_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH13_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH13_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH13                                                          */
  PPI_CHENSET_CH13_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH13_W_Enum;

/* ===============================================  PPI CHENSET CH14 [14..14]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH14                                                          */
  PPI_CHENSET_CH14_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH14_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH14_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH14                                                          */
  PPI_CHENSET_CH14_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH14_W_Enum;

/* ===============================================  PPI CHENSET CH15 [15..15]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH15                                                          */
  PPI_CHENSET_CH15_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH15_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH15_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH15                                                          */
  PPI_CHENSET_CH15_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH15_W_Enum;

/* ===============================================  PPI CHENSET CH20 [20..20]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH20                                                          */
  PPI_CHENSET_CH20_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH20_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH20_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH20                                                          */
  PPI_CHENSET_CH20_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH20_W_Enum;

/* ===============================================  PPI CHENSET CH21 [21..21]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH21                                                          */
  PPI_CHENSET_CH21_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH21_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH21_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH21                                                          */
  PPI_CHENSET_CH21_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH21_W_Enum;

/* ===============================================  PPI CHENSET CH22 [22..22]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH22                                                          */
  PPI_CHENSET_CH22_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH22_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH22_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH22                                                          */
  PPI_CHENSET_CH22_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH22_W_Enum;

/* ===============================================  PPI CHENSET CH23 [23..23]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH23                                                          */
  PPI_CHENSET_CH23_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH23_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH23_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH23                                                          */
  PPI_CHENSET_CH23_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH23_W_Enum;

/* ===============================================  PPI CHENSET CH24 [24..24]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH24                                                          */
  PPI_CHENSET_CH24_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH24_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH24_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH24                                                          */
  PPI_CHENSET_CH24_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH24_W_Enum;

/* ===============================================  PPI CHENSET CH25 [25..25]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH25                                                          */
  PPI_CHENSET_CH25_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH25_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH25_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH25                                                          */
  PPI_CHENSET_CH25_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH25_W_Enum;

/* ===============================================  PPI CHENSET CH26 [26..26]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH26                                                          */
  PPI_CHENSET_CH26_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH26_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH26_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH26                                                          */
  PPI_CHENSET_CH26_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH26_W_Enum;

/* ===============================================  PPI CHENSET CH27 [27..27]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH27                                                          */
  PPI_CHENSET_CH27_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH27_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH27_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH27                                                          */
  PPI_CHENSET_CH27_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH27_W_Enum;

/* ===============================================  PPI CHENSET CH28 [28..28]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH28                                                          */
  PPI_CHENSET_CH28_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH28_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH28_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH28                                                          */
  PPI_CHENSET_CH28_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH28_W_Enum;

/* ===============================================  PPI CHENSET CH29 [29..29]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH29                                                          */
  PPI_CHENSET_CH29_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH29_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH29_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH29                                                          */
  PPI_CHENSET_CH29_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH29_W_Enum;

/* ===============================================  PPI CHENSET CH30 [30..30]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH30                                                          */
  PPI_CHENSET_CH30_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH30_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH30_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH30                                                          */
  PPI_CHENSET_CH30_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH30_W_Enum;

/* ===============================================  PPI CHENSET CH31 [31..31]  =============================================== */
typedef enum {                                  /*!< PPI_CHENSET_CH31                                                          */
  PPI_CHENSET_CH31_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENSET_CH31_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENSET_CH31_R_Enum;

typedef enum {                                  /*!< PPI_CHENSET_CH31                                                          */
  PPI_CHENSET_CH31_Set                 = 1,     /*!< Set : Enable channel on write.                                            */
} PPI_CHENSET_CH31_W_Enum;

/* ========================================================  CHENCLR  ======================================================== */
/* ================================================  PPI CHENCLR CH0 [0..0]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH0                                                           */
  PPI_CHENCLR_CH0_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH0_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH0_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH0                                                           */
  PPI_CHENCLR_CH0_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH0_W_Enum;

/* ================================================  PPI CHENCLR CH1 [1..1]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH1                                                           */
  PPI_CHENCLR_CH1_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH1_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH1_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH1                                                           */
  PPI_CHENCLR_CH1_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH1_W_Enum;

/* ================================================  PPI CHENCLR CH2 [2..2]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH2                                                           */
  PPI_CHENCLR_CH2_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH2_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH2_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH2                                                           */
  PPI_CHENCLR_CH2_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH2_W_Enum;

/* ================================================  PPI CHENCLR CH3 [3..3]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH3                                                           */
  PPI_CHENCLR_CH3_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH3_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH3_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH3                                                           */
  PPI_CHENCLR_CH3_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH3_W_Enum;

/* ================================================  PPI CHENCLR CH4 [4..4]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH4                                                           */
  PPI_CHENCLR_CH4_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH4_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH4_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH4                                                           */
  PPI_CHENCLR_CH4_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH4_W_Enum;

/* ================================================  PPI CHENCLR CH5 [5..5]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH5                                                           */
  PPI_CHENCLR_CH5_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH5_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH5_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH5                                                           */
  PPI_CHENCLR_CH5_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH5_W_Enum;

/* ================================================  PPI CHENCLR CH6 [6..6]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH6                                                           */
  PPI_CHENCLR_CH6_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH6_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH6_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH6                                                           */
  PPI_CHENCLR_CH6_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH6_W_Enum;

/* ================================================  PPI CHENCLR CH7 [7..7]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH7                                                           */
  PPI_CHENCLR_CH7_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH7_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH7_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH7                                                           */
  PPI_CHENCLR_CH7_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH7_W_Enum;

/* ================================================  PPI CHENCLR CH8 [8..8]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH8                                                           */
  PPI_CHENCLR_CH8_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH8_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH8_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH8                                                           */
  PPI_CHENCLR_CH8_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH8_W_Enum;

/* ================================================  PPI CHENCLR CH9 [9..9]  ================================================= */
typedef enum {                                  /*!< PPI_CHENCLR_CH9                                                           */
  PPI_CHENCLR_CH9_Disabled             = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH9_Enabled              = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH9_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH9                                                           */
  PPI_CHENCLR_CH9_Clear                = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH9_W_Enum;

/* ===============================================  PPI CHENCLR CH10 [10..10]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH10                                                          */
  PPI_CHENCLR_CH10_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH10_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH10_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH10                                                          */
  PPI_CHENCLR_CH10_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH10_W_Enum;

/* ===============================================  PPI CHENCLR CH11 [11..11]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH11                                                          */
  PPI_CHENCLR_CH11_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH11_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH11_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH11                                                          */
  PPI_CHENCLR_CH11_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH11_W_Enum;

/* ===============================================  PPI CHENCLR CH12 [12..12]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH12                                                          */
  PPI_CHENCLR_CH12_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH12_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH12_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH12                                                          */
  PPI_CHENCLR_CH12_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH12_W_Enum;

/* ===============================================  PPI CHENCLR CH13 [13..13]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH13                                                          */
  PPI_CHENCLR_CH13_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH13_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH13_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH13                                                          */
  PPI_CHENCLR_CH13_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH13_W_Enum;

/* ===============================================  PPI CHENCLR CH14 [14..14]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH14                                                          */
  PPI_CHENCLR_CH14_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH14_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH14_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH14                                                          */
  PPI_CHENCLR_CH14_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH14_W_Enum;

/* ===============================================  PPI CHENCLR CH15 [15..15]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH15                                                          */
  PPI_CHENCLR_CH15_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH15_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH15_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH15                                                          */
  PPI_CHENCLR_CH15_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH15_W_Enum;

/* ===============================================  PPI CHENCLR CH20 [20..20]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH20                                                          */
  PPI_CHENCLR_CH20_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH20_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH20_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH20                                                          */
  PPI_CHENCLR_CH20_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH20_W_Enum;

/* ===============================================  PPI CHENCLR CH21 [21..21]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH21                                                          */
  PPI_CHENCLR_CH21_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH21_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH21_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH21                                                          */
  PPI_CHENCLR_CH21_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH21_W_Enum;

/* ===============================================  PPI CHENCLR CH22 [22..22]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH22                                                          */
  PPI_CHENCLR_CH22_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH22_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH22_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH22                                                          */
  PPI_CHENCLR_CH22_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH22_W_Enum;

/* ===============================================  PPI CHENCLR CH23 [23..23]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH23                                                          */
  PPI_CHENCLR_CH23_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH23_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH23_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH23                                                          */
  PPI_CHENCLR_CH23_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH23_W_Enum;

/* ===============================================  PPI CHENCLR CH24 [24..24]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH24                                                          */
  PPI_CHENCLR_CH24_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH24_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH24_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH24                                                          */
  PPI_CHENCLR_CH24_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH24_W_Enum;

/* ===============================================  PPI CHENCLR CH25 [25..25]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH25                                                          */
  PPI_CHENCLR_CH25_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH25_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH25_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH25                                                          */
  PPI_CHENCLR_CH25_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH25_W_Enum;

/* ===============================================  PPI CHENCLR CH26 [26..26]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH26                                                          */
  PPI_CHENCLR_CH26_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH26_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH26_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH26                                                          */
  PPI_CHENCLR_CH26_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH26_W_Enum;

/* ===============================================  PPI CHENCLR CH27 [27..27]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH27                                                          */
  PPI_CHENCLR_CH27_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH27_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH27_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH27                                                          */
  PPI_CHENCLR_CH27_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH27_W_Enum;

/* ===============================================  PPI CHENCLR CH28 [28..28]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH28                                                          */
  PPI_CHENCLR_CH28_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH28_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH28_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH28                                                          */
  PPI_CHENCLR_CH28_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH28_W_Enum;

/* ===============================================  PPI CHENCLR CH29 [29..29]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH29                                                          */
  PPI_CHENCLR_CH29_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH29_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH29_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH29                                                          */
  PPI_CHENCLR_CH29_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH29_W_Enum;

/* ===============================================  PPI CHENCLR CH30 [30..30]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH30                                                          */
  PPI_CHENCLR_CH30_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH30_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH30_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH30                                                          */
  PPI_CHENCLR_CH30_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH30_W_Enum;

/* ===============================================  PPI CHENCLR CH31 [31..31]  =============================================== */
typedef enum {                                  /*!< PPI_CHENCLR_CH31                                                          */
  PPI_CHENCLR_CH31_Disabled            = 0,     /*!< Disabled : Channel disabled.                                              */
  PPI_CHENCLR_CH31_Enabled             = 1,     /*!< Enabled : Channel enabled.                                                */
} PPI_CHENCLR_CH31_R_Enum;

typedef enum {                                  /*!< PPI_CHENCLR_CH31                                                          */
  PPI_CHENCLR_CH31_Clear               = 1,     /*!< Clear : Disable channel on write.                                         */
} PPI_CHENCLR_CH31_W_Enum;

/* ==========================================================  CHG  ========================================================== */
/* ==================================================  PPI CHG CH0 [0..0]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH0                                                               */
  PPI_CHG_CH0_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH0_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH0_Enum;

/* ==================================================  PPI CHG CH1 [1..1]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH1                                                               */
  PPI_CHG_CH1_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH1_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH1_Enum;

/* ==================================================  PPI CHG CH2 [2..2]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH2                                                               */
  PPI_CHG_CH2_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH2_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH2_Enum;

/* ==================================================  PPI CHG CH3 [3..3]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH3                                                               */
  PPI_CHG_CH3_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH3_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH3_Enum;

/* ==================================================  PPI CHG CH4 [4..4]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH4                                                               */
  PPI_CHG_CH4_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH4_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH4_Enum;

/* ==================================================  PPI CHG CH5 [5..5]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH5                                                               */
  PPI_CHG_CH5_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH5_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH5_Enum;

/* ==================================================  PPI CHG CH6 [6..6]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH6                                                               */
  PPI_CHG_CH6_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH6_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH6_Enum;

/* ==================================================  PPI CHG CH7 [7..7]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH7                                                               */
  PPI_CHG_CH7_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH7_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH7_Enum;

/* ==================================================  PPI CHG CH8 [8..8]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH8                                                               */
  PPI_CHG_CH8_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH8_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH8_Enum;

/* ==================================================  PPI CHG CH9 [9..9]  =================================================== */
typedef enum {                                  /*!< PPI_CHG_CH9                                                               */
  PPI_CHG_CH9_Excluded                 = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH9_Included                 = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH9_Enum;

/* =================================================  PPI CHG CH10 [10..10]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH10                                                              */
  PPI_CHG_CH10_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH10_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH10_Enum;

/* =================================================  PPI CHG CH11 [11..11]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH11                                                              */
  PPI_CHG_CH11_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH11_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH11_Enum;

/* =================================================  PPI CHG CH12 [12..12]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH12                                                              */
  PPI_CHG_CH12_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH12_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH12_Enum;

/* =================================================  PPI CHG CH13 [13..13]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH13                                                              */
  PPI_CHG_CH13_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH13_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH13_Enum;

/* =================================================  PPI CHG CH14 [14..14]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH14                                                              */
  PPI_CHG_CH14_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH14_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH14_Enum;

/* =================================================  PPI CHG CH15 [15..15]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH15                                                              */
  PPI_CHG_CH15_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH15_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH15_Enum;

/* =================================================  PPI CHG CH20 [20..20]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH20                                                              */
  PPI_CHG_CH20_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH20_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH20_Enum;

/* =================================================  PPI CHG CH21 [21..21]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH21                                                              */
  PPI_CHG_CH21_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH21_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH21_Enum;

/* =================================================  PPI CHG CH22 [22..22]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH22                                                              */
  PPI_CHG_CH22_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH22_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH22_Enum;

/* =================================================  PPI CHG CH23 [23..23]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH23                                                              */
  PPI_CHG_CH23_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH23_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH23_Enum;

/* =================================================  PPI CHG CH24 [24..24]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH24                                                              */
  PPI_CHG_CH24_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH24_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH24_Enum;

/* =================================================  PPI CHG CH25 [25..25]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH25                                                              */
  PPI_CHG_CH25_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH25_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH25_Enum;

/* =================================================  PPI CHG CH26 [26..26]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH26                                                              */
  PPI_CHG_CH26_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH26_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH26_Enum;

/* =================================================  PPI CHG CH27 [27..27]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH27                                                              */
  PPI_CHG_CH27_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH27_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH27_Enum;

/* =================================================  PPI CHG CH28 [28..28]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH28                                                              */
  PPI_CHG_CH28_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH28_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH28_Enum;

/* =================================================  PPI CHG CH29 [29..29]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH29                                                              */
  PPI_CHG_CH29_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH29_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH29_Enum;

/* =================================================  PPI CHG CH30 [30..30]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH30                                                              */
  PPI_CHG_CH30_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH30_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH30_Enum;

/* =================================================  PPI CHG CH31 [31..31]  ================================================= */
typedef enum {                                  /*!< PPI_CHG_CH31                                                              */
  PPI_CHG_CH31_Excluded                = 0,     /*!< Excluded : Channel excluded.                                              */
  PPI_CHG_CH31_Included                = 1,     /*!< Included : Channel included.                                              */
} PPI_CHG_CH31_Enum;



/* =========================================================================================================================== */
/* ================                                           FICR                                            ================ */
/* =========================================================================================================================== */

/* =====================================================  CODEPAGESIZE  ====================================================== */
/* =======================================================  CODESIZE  ======================================================== */
/* ========================================================  CLENR0  ========================================================= */
/* =========================================================  PPFC  ========================================================== */
/* =================================================  FICR PPFC PPFC [0..7]  ================================================= */
typedef enum {                                  /*!< FICR_PPFC_PPFC                                                            */
  FICR_PPFC_PPFC_NotPresent            = 255,   /*!< NotPresent : Not present.                                                 */
  FICR_PPFC_PPFC_Present               = 0,     /*!< Present : Present.                                                        */
} FICR_PPFC_PPFC_Enum;

/* ======================================================  NUMRAMBLOCK  ====================================================== */
/* =====================================================  SIZERAMBLOCKS  ===================================================== */
/* =====================================================  SIZERAMBLOCK  ====================================================== */
/* =======================================================  CONFIGID  ======================================================== */
/* =======================================================  DEVICEID  ======================================================== */
/* ==========================================================  ER  =========================================================== */
/* ==========================================================  IR  =========================================================== */
/* ====================================================  DEVICEADDRTYPE  ===================================================== */
/* =======================================  FICR DEVICEADDRTYPE DEVICEADDRTYPE [0..0]  ======================================= */
typedef enum {                                  /*!< FICR_DEVICEADDRTYPE_DEVICEADDRTYPE                                        */
  FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public = 0,/*!< Public : Public address.                                                  */
  FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random = 1,/*!< Random : Random address.                                                  */
} FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Enum;

/* ======================================================  DEVICEADDR  ======================================================= */
/* ======================================================  OVERRIDEEN  ======================================================= */
/* ===========================================  FICR OVERRIDEEN NRF_1MBIT [0..0]  ============================================ */
typedef enum {                                  /*!< FICR_OVERRIDEEN_NRF_1MBIT                                                 */
  FICR_OVERRIDEEN_NRF_1MBIT_Override   = 0,     /*!< Override : Override the default values for NRF_1Mbit mode.                */
  FICR_OVERRIDEEN_NRF_1MBIT_NotOverride = 1,    /*!< NotOverride : Do not override the default values for NRF_1Mbit
                                                     mode.                                                                     */
} FICR_OVERRIDEEN_NRF_1MBIT_Enum;

/* ===========================================  FICR OVERRIDEEN BLE_1MBIT [3..3]  ============================================ */
typedef enum {                                  /*!< FICR_OVERRIDEEN_BLE_1MBIT                                                 */
  FICR_OVERRIDEEN_BLE_1MBIT_Override   = 0,     /*!< Override : Override the default values for BLE_1Mbit mode.                */
  FICR_OVERRIDEEN_BLE_1MBIT_NotOverride = 1,    /*!< NotOverride : Do not override the default values for BLE_1Mbit
                                                     mode.                                                                     */
} FICR_OVERRIDEEN_BLE_1MBIT_Enum;

/* =======================================================  NRF_1MBIT  ======================================================= */
/* =======================================================  BLE_1MBIT  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           UICR                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CLENR0  ========================================================= */
/* ========================================================  RBPCONF  ======================================================== */
/* ================================================  UICR RBPCONF PR0 [0..7]  ================================================ */
typedef enum {                                  /*!< UICR_RBPCONF_PR0                                                          */
  UICR_RBPCONF_PR0_Disabled            = 255,   /*!< Disabled : Disabled.                                                      */
  UICR_RBPCONF_PR0_Enabled             = 0,     /*!< Enabled : Enabled.                                                        */
} UICR_RBPCONF_PR0_Enum;

/* ===============================================  UICR RBPCONF PALL [8..15]  =============================================== */
typedef enum {                                  /*!< UICR_RBPCONF_PALL                                                         */
  UICR_RBPCONF_PALL_Disabled           = 255,   /*!< Disabled : Disabled.                                                      */
  UICR_RBPCONF_PALL_Enabled            = 0,     /*!< Enabled : Enabled.                                                        */
} UICR_RBPCONF_PALL_Enum;

/* =======================================================  XTALFREQ  ======================================================== */
/* =============================================  UICR XTALFREQ XTALFREQ [0..7]  ============================================= */
typedef enum {                                  /*!< UICR_XTALFREQ_XTALFREQ                                                    */
  UICR_XTALFREQ_XTALFREQ_16MHz         = 255,   /*!< 16MHz : 16MHz Xtal is used.                                               */
  UICR_XTALFREQ_XTALFREQ_32MHz         = 0,     /*!< 32MHz : 32MHz Xtal is used.                                               */
} UICR_XTALFREQ_XTALFREQ_Enum;

/* =========================================================  FWID  ========================================================== */
/* ====================================================  BOOTLOADERADDR  ===================================================== */
/* =========================================================  NRFFW  ========================================================= */
/* =========================================================  NRFHW  ========================================================= */
/* =======================================================  CUSTOMER  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  OUT  ========================================================== */
/* =================================================  GPIO OUT PIN0 [0..0]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN0                                                             */
  GPIO_OUT_PIN0_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN0_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN0_Enum;

/* =================================================  GPIO OUT PIN1 [1..1]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN1                                                             */
  GPIO_OUT_PIN1_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN1_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN1_Enum;

/* =================================================  GPIO OUT PIN2 [2..2]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN2                                                             */
  GPIO_OUT_PIN2_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN2_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN2_Enum;

/* =================================================  GPIO OUT PIN3 [3..3]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN3                                                             */
  GPIO_OUT_PIN3_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN3_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN3_Enum;

/* =================================================  GPIO OUT PIN4 [4..4]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN4                                                             */
  GPIO_OUT_PIN4_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN4_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN4_Enum;

/* =================================================  GPIO OUT PIN5 [5..5]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN5                                                             */
  GPIO_OUT_PIN5_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN5_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN5_Enum;

/* =================================================  GPIO OUT PIN6 [6..6]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN6                                                             */
  GPIO_OUT_PIN6_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN6_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN6_Enum;

/* =================================================  GPIO OUT PIN7 [7..7]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN7                                                             */
  GPIO_OUT_PIN7_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN7_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN7_Enum;

/* =================================================  GPIO OUT PIN8 [8..8]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN8                                                             */
  GPIO_OUT_PIN8_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN8_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN8_Enum;

/* =================================================  GPIO OUT PIN9 [9..9]  ================================================== */
typedef enum {                                  /*!< GPIO_OUT_PIN9                                                             */
  GPIO_OUT_PIN9_Low                    = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN9_High                   = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN9_Enum;

/* ================================================  GPIO OUT PIN10 [10..10]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN10                                                            */
  GPIO_OUT_PIN10_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN10_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN10_Enum;

/* ================================================  GPIO OUT PIN11 [11..11]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN11                                                            */
  GPIO_OUT_PIN11_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN11_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN11_Enum;

/* ================================================  GPIO OUT PIN12 [12..12]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN12                                                            */
  GPIO_OUT_PIN12_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN12_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN12_Enum;

/* ================================================  GPIO OUT PIN13 [13..13]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN13                                                            */
  GPIO_OUT_PIN13_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN13_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN13_Enum;

/* ================================================  GPIO OUT PIN14 [14..14]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN14                                                            */
  GPIO_OUT_PIN14_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN14_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN14_Enum;

/* ================================================  GPIO OUT PIN15 [15..15]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN15                                                            */
  GPIO_OUT_PIN15_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN15_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN15_Enum;

/* ================================================  GPIO OUT PIN16 [16..16]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN16                                                            */
  GPIO_OUT_PIN16_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN16_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN16_Enum;

/* ================================================  GPIO OUT PIN17 [17..17]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN17                                                            */
  GPIO_OUT_PIN17_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN17_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN17_Enum;

/* ================================================  GPIO OUT PIN18 [18..18]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN18                                                            */
  GPIO_OUT_PIN18_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN18_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN18_Enum;

/* ================================================  GPIO OUT PIN19 [19..19]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN19                                                            */
  GPIO_OUT_PIN19_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN19_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN19_Enum;

/* ================================================  GPIO OUT PIN20 [20..20]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN20                                                            */
  GPIO_OUT_PIN20_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN20_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN20_Enum;

/* ================================================  GPIO OUT PIN21 [21..21]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN21                                                            */
  GPIO_OUT_PIN21_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN21_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN21_Enum;

/* ================================================  GPIO OUT PIN22 [22..22]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN22                                                            */
  GPIO_OUT_PIN22_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN22_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN22_Enum;

/* ================================================  GPIO OUT PIN23 [23..23]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN23                                                            */
  GPIO_OUT_PIN23_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN23_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN23_Enum;

/* ================================================  GPIO OUT PIN24 [24..24]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN24                                                            */
  GPIO_OUT_PIN24_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN24_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN24_Enum;

/* ================================================  GPIO OUT PIN25 [25..25]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN25                                                            */
  GPIO_OUT_PIN25_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN25_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN25_Enum;

/* ================================================  GPIO OUT PIN26 [26..26]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN26                                                            */
  GPIO_OUT_PIN26_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN26_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN26_Enum;

/* ================================================  GPIO OUT PIN27 [27..27]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN27                                                            */
  GPIO_OUT_PIN27_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN27_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN27_Enum;

/* ================================================  GPIO OUT PIN28 [28..28]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN28                                                            */
  GPIO_OUT_PIN28_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN28_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN28_Enum;

/* ================================================  GPIO OUT PIN29 [29..29]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN29                                                            */
  GPIO_OUT_PIN29_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN29_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN29_Enum;

/* ================================================  GPIO OUT PIN30 [30..30]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN30                                                            */
  GPIO_OUT_PIN30_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN30_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN30_Enum;

/* ================================================  GPIO OUT PIN31 [31..31]  ================================================ */
typedef enum {                                  /*!< GPIO_OUT_PIN31                                                            */
  GPIO_OUT_PIN31_Low                   = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUT_PIN31_High                  = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUT_PIN31_Enum;

/* ========================================================  OUTSET  ========================================================= */
/* ================================================  GPIO OUTSET PIN0 [0..0]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN0                                                          */
  GPIO_OUTSET_PIN0_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN0_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN0_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN0                                                          */
  GPIO_OUTSET_PIN0_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN0_W_Enum;

/* ================================================  GPIO OUTSET PIN1 [1..1]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN1                                                          */
  GPIO_OUTSET_PIN1_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN1_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN1_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN1                                                          */
  GPIO_OUTSET_PIN1_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN1_W_Enum;

/* ================================================  GPIO OUTSET PIN2 [2..2]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN2                                                          */
  GPIO_OUTSET_PIN2_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN2_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN2_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN2                                                          */
  GPIO_OUTSET_PIN2_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN2_W_Enum;

/* ================================================  GPIO OUTSET PIN3 [3..3]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN3                                                          */
  GPIO_OUTSET_PIN3_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN3_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN3_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN3                                                          */
  GPIO_OUTSET_PIN3_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN3_W_Enum;

/* ================================================  GPIO OUTSET PIN4 [4..4]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN4                                                          */
  GPIO_OUTSET_PIN4_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN4_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN4_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN4                                                          */
  GPIO_OUTSET_PIN4_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN4_W_Enum;

/* ================================================  GPIO OUTSET PIN5 [5..5]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN5                                                          */
  GPIO_OUTSET_PIN5_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN5_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN5_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN5                                                          */
  GPIO_OUTSET_PIN5_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN5_W_Enum;

/* ================================================  GPIO OUTSET PIN6 [6..6]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN6                                                          */
  GPIO_OUTSET_PIN6_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN6_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN6_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN6                                                          */
  GPIO_OUTSET_PIN6_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN6_W_Enum;

/* ================================================  GPIO OUTSET PIN7 [7..7]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN7                                                          */
  GPIO_OUTSET_PIN7_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN7_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN7_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN7                                                          */
  GPIO_OUTSET_PIN7_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN7_W_Enum;

/* ================================================  GPIO OUTSET PIN8 [8..8]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN8                                                          */
  GPIO_OUTSET_PIN8_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN8_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN8_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN8                                                          */
  GPIO_OUTSET_PIN8_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN8_W_Enum;

/* ================================================  GPIO OUTSET PIN9 [9..9]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTSET_PIN9                                                          */
  GPIO_OUTSET_PIN9_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN9_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN9_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN9                                                          */
  GPIO_OUTSET_PIN9_Set                 = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN9_W_Enum;

/* ==============================================  GPIO OUTSET PIN10 [10..10]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN10                                                         */
  GPIO_OUTSET_PIN10_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN10_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN10_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN10                                                         */
  GPIO_OUTSET_PIN10_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN10_W_Enum;

/* ==============================================  GPIO OUTSET PIN11 [11..11]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN11                                                         */
  GPIO_OUTSET_PIN11_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN11_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN11_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN11                                                         */
  GPIO_OUTSET_PIN11_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN11_W_Enum;

/* ==============================================  GPIO OUTSET PIN12 [12..12]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN12                                                         */
  GPIO_OUTSET_PIN12_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN12_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN12_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN12                                                         */
  GPIO_OUTSET_PIN12_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN12_W_Enum;

/* ==============================================  GPIO OUTSET PIN13 [13..13]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN13                                                         */
  GPIO_OUTSET_PIN13_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN13_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN13_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN13                                                         */
  GPIO_OUTSET_PIN13_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN13_W_Enum;

/* ==============================================  GPIO OUTSET PIN14 [14..14]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN14                                                         */
  GPIO_OUTSET_PIN14_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN14_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN14_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN14                                                         */
  GPIO_OUTSET_PIN14_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN14_W_Enum;

/* ==============================================  GPIO OUTSET PIN15 [15..15]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN15                                                         */
  GPIO_OUTSET_PIN15_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN15_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN15_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN15                                                         */
  GPIO_OUTSET_PIN15_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN15_W_Enum;

/* ==============================================  GPIO OUTSET PIN16 [16..16]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN16                                                         */
  GPIO_OUTSET_PIN16_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN16_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN16_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN16                                                         */
  GPIO_OUTSET_PIN16_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN16_W_Enum;

/* ==============================================  GPIO OUTSET PIN17 [17..17]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN17                                                         */
  GPIO_OUTSET_PIN17_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN17_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN17_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN17                                                         */
  GPIO_OUTSET_PIN17_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN17_W_Enum;

/* ==============================================  GPIO OUTSET PIN18 [18..18]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN18                                                         */
  GPIO_OUTSET_PIN18_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN18_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN18_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN18                                                         */
  GPIO_OUTSET_PIN18_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN18_W_Enum;

/* ==============================================  GPIO OUTSET PIN19 [19..19]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN19                                                         */
  GPIO_OUTSET_PIN19_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN19_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN19_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN19                                                         */
  GPIO_OUTSET_PIN19_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN19_W_Enum;

/* ==============================================  GPIO OUTSET PIN20 [20..20]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN20                                                         */
  GPIO_OUTSET_PIN20_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN20_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN20_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN20                                                         */
  GPIO_OUTSET_PIN20_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN20_W_Enum;

/* ==============================================  GPIO OUTSET PIN21 [21..21]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN21                                                         */
  GPIO_OUTSET_PIN21_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN21_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN21_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN21                                                         */
  GPIO_OUTSET_PIN21_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN21_W_Enum;

/* ==============================================  GPIO OUTSET PIN22 [22..22]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN22                                                         */
  GPIO_OUTSET_PIN22_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN22_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN22_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN22                                                         */
  GPIO_OUTSET_PIN22_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN22_W_Enum;

/* ==============================================  GPIO OUTSET PIN23 [23..23]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN23                                                         */
  GPIO_OUTSET_PIN23_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN23_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN23_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN23                                                         */
  GPIO_OUTSET_PIN23_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN23_W_Enum;

/* ==============================================  GPIO OUTSET PIN24 [24..24]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN24                                                         */
  GPIO_OUTSET_PIN24_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN24_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN24_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN24                                                         */
  GPIO_OUTSET_PIN24_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN24_W_Enum;

/* ==============================================  GPIO OUTSET PIN25 [25..25]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN25                                                         */
  GPIO_OUTSET_PIN25_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN25_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN25_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN25                                                         */
  GPIO_OUTSET_PIN25_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN25_W_Enum;

/* ==============================================  GPIO OUTSET PIN26 [26..26]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN26                                                         */
  GPIO_OUTSET_PIN26_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN26_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN26_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN26                                                         */
  GPIO_OUTSET_PIN26_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN26_W_Enum;

/* ==============================================  GPIO OUTSET PIN27 [27..27]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN27                                                         */
  GPIO_OUTSET_PIN27_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN27_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN27_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN27                                                         */
  GPIO_OUTSET_PIN27_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN27_W_Enum;

/* ==============================================  GPIO OUTSET PIN28 [28..28]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN28                                                         */
  GPIO_OUTSET_PIN28_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN28_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN28_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN28                                                         */
  GPIO_OUTSET_PIN28_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN28_W_Enum;

/* ==============================================  GPIO OUTSET PIN29 [29..29]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN29                                                         */
  GPIO_OUTSET_PIN29_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN29_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN29_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN29                                                         */
  GPIO_OUTSET_PIN29_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN29_W_Enum;

/* ==============================================  GPIO OUTSET PIN30 [30..30]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN30                                                         */
  GPIO_OUTSET_PIN30_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN30_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN30_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN30                                                         */
  GPIO_OUTSET_PIN30_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN30_W_Enum;

/* ==============================================  GPIO OUTSET PIN31 [31..31]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTSET_PIN31                                                         */
  GPIO_OUTSET_PIN31_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTSET_PIN31_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTSET_PIN31_R_Enum;

typedef enum {                                  /*!< GPIO_OUTSET_PIN31                                                         */
  GPIO_OUTSET_PIN31_Set                = 1,     /*!< Set : Set pin driver high.                                                */
} GPIO_OUTSET_PIN31_W_Enum;

/* ========================================================  OUTCLR  ========================================================= */
/* ================================================  GPIO OUTCLR PIN0 [0..0]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN0                                                          */
  GPIO_OUTCLR_PIN0_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN0_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN0_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN0                                                          */
  GPIO_OUTCLR_PIN0_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN0_W_Enum;

/* ================================================  GPIO OUTCLR PIN1 [1..1]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN1                                                          */
  GPIO_OUTCLR_PIN1_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN1_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN1_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN1                                                          */
  GPIO_OUTCLR_PIN1_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN1_W_Enum;

/* ================================================  GPIO OUTCLR PIN2 [2..2]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN2                                                          */
  GPIO_OUTCLR_PIN2_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN2_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN2_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN2                                                          */
  GPIO_OUTCLR_PIN2_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN2_W_Enum;

/* ================================================  GPIO OUTCLR PIN3 [3..3]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN3                                                          */
  GPIO_OUTCLR_PIN3_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN3_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN3_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN3                                                          */
  GPIO_OUTCLR_PIN3_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN3_W_Enum;

/* ================================================  GPIO OUTCLR PIN4 [4..4]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN4                                                          */
  GPIO_OUTCLR_PIN4_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN4_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN4_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN4                                                          */
  GPIO_OUTCLR_PIN4_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN4_W_Enum;

/* ================================================  GPIO OUTCLR PIN5 [5..5]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN5                                                          */
  GPIO_OUTCLR_PIN5_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN5_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN5_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN5                                                          */
  GPIO_OUTCLR_PIN5_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN5_W_Enum;

/* ================================================  GPIO OUTCLR PIN6 [6..6]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN6                                                          */
  GPIO_OUTCLR_PIN6_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN6_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN6_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN6                                                          */
  GPIO_OUTCLR_PIN6_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN6_W_Enum;

/* ================================================  GPIO OUTCLR PIN7 [7..7]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN7                                                          */
  GPIO_OUTCLR_PIN7_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN7_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN7_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN7                                                          */
  GPIO_OUTCLR_PIN7_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN7_W_Enum;

/* ================================================  GPIO OUTCLR PIN8 [8..8]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN8                                                          */
  GPIO_OUTCLR_PIN8_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN8_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN8_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN8                                                          */
  GPIO_OUTCLR_PIN8_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN8_W_Enum;

/* ================================================  GPIO OUTCLR PIN9 [9..9]  ================================================ */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN9                                                          */
  GPIO_OUTCLR_PIN9_Low                 = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN9_High                = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN9_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN9                                                          */
  GPIO_OUTCLR_PIN9_Clear               = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN9_W_Enum;

/* ==============================================  GPIO OUTCLR PIN10 [10..10]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN10                                                         */
  GPIO_OUTCLR_PIN10_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN10_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN10_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN10                                                         */
  GPIO_OUTCLR_PIN10_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN10_W_Enum;

/* ==============================================  GPIO OUTCLR PIN11 [11..11]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN11                                                         */
  GPIO_OUTCLR_PIN11_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN11_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN11_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN11                                                         */
  GPIO_OUTCLR_PIN11_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN11_W_Enum;

/* ==============================================  GPIO OUTCLR PIN12 [12..12]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN12                                                         */
  GPIO_OUTCLR_PIN12_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN12_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN12_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN12                                                         */
  GPIO_OUTCLR_PIN12_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN12_W_Enum;

/* ==============================================  GPIO OUTCLR PIN13 [13..13]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN13                                                         */
  GPIO_OUTCLR_PIN13_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN13_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN13_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN13                                                         */
  GPIO_OUTCLR_PIN13_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN13_W_Enum;

/* ==============================================  GPIO OUTCLR PIN14 [14..14]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN14                                                         */
  GPIO_OUTCLR_PIN14_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN14_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN14_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN14                                                         */
  GPIO_OUTCLR_PIN14_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN14_W_Enum;

/* ==============================================  GPIO OUTCLR PIN15 [15..15]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN15                                                         */
  GPIO_OUTCLR_PIN15_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN15_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN15_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN15                                                         */
  GPIO_OUTCLR_PIN15_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN15_W_Enum;

/* ==============================================  GPIO OUTCLR PIN16 [16..16]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN16                                                         */
  GPIO_OUTCLR_PIN16_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN16_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN16_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN16                                                         */
  GPIO_OUTCLR_PIN16_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN16_W_Enum;

/* ==============================================  GPIO OUTCLR PIN17 [17..17]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN17                                                         */
  GPIO_OUTCLR_PIN17_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN17_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN17_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN17                                                         */
  GPIO_OUTCLR_PIN17_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN17_W_Enum;

/* ==============================================  GPIO OUTCLR PIN18 [18..18]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN18                                                         */
  GPIO_OUTCLR_PIN18_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN18_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN18_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN18                                                         */
  GPIO_OUTCLR_PIN18_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN18_W_Enum;

/* ==============================================  GPIO OUTCLR PIN19 [19..19]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN19                                                         */
  GPIO_OUTCLR_PIN19_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN19_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN19_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN19                                                         */
  GPIO_OUTCLR_PIN19_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN19_W_Enum;

/* ==============================================  GPIO OUTCLR PIN20 [20..20]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN20                                                         */
  GPIO_OUTCLR_PIN20_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN20_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN20_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN20                                                         */
  GPIO_OUTCLR_PIN20_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN20_W_Enum;

/* ==============================================  GPIO OUTCLR PIN21 [21..21]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN21                                                         */
  GPIO_OUTCLR_PIN21_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN21_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN21_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN21                                                         */
  GPIO_OUTCLR_PIN21_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN21_W_Enum;

/* ==============================================  GPIO OUTCLR PIN22 [22..22]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN22                                                         */
  GPIO_OUTCLR_PIN22_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN22_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN22_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN22                                                         */
  GPIO_OUTCLR_PIN22_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN22_W_Enum;

/* ==============================================  GPIO OUTCLR PIN23 [23..23]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN23                                                         */
  GPIO_OUTCLR_PIN23_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN23_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN23_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN23                                                         */
  GPIO_OUTCLR_PIN23_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN23_W_Enum;

/* ==============================================  GPIO OUTCLR PIN24 [24..24]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN24                                                         */
  GPIO_OUTCLR_PIN24_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN24_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN24_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN24                                                         */
  GPIO_OUTCLR_PIN24_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN24_W_Enum;

/* ==============================================  GPIO OUTCLR PIN25 [25..25]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN25                                                         */
  GPIO_OUTCLR_PIN25_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN25_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN25_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN25                                                         */
  GPIO_OUTCLR_PIN25_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN25_W_Enum;

/* ==============================================  GPIO OUTCLR PIN26 [26..26]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN26                                                         */
  GPIO_OUTCLR_PIN26_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN26_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN26_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN26                                                         */
  GPIO_OUTCLR_PIN26_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN26_W_Enum;

/* ==============================================  GPIO OUTCLR PIN27 [27..27]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN27                                                         */
  GPIO_OUTCLR_PIN27_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN27_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN27_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN27                                                         */
  GPIO_OUTCLR_PIN27_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN27_W_Enum;

/* ==============================================  GPIO OUTCLR PIN28 [28..28]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN28                                                         */
  GPIO_OUTCLR_PIN28_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN28_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN28_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN28                                                         */
  GPIO_OUTCLR_PIN28_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN28_W_Enum;

/* ==============================================  GPIO OUTCLR PIN29 [29..29]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN29                                                         */
  GPIO_OUTCLR_PIN29_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN29_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN29_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN29                                                         */
  GPIO_OUTCLR_PIN29_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN29_W_Enum;

/* ==============================================  GPIO OUTCLR PIN30 [30..30]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN30                                                         */
  GPIO_OUTCLR_PIN30_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN30_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN30_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN30                                                         */
  GPIO_OUTCLR_PIN30_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN30_W_Enum;

/* ==============================================  GPIO OUTCLR PIN31 [31..31]  =============================================== */
typedef enum {                                  /*!< GPIO_OUTCLR_PIN31                                                         */
  GPIO_OUTCLR_PIN31_Low                = 0,     /*!< Low : Pin driver is low.                                                  */
  GPIO_OUTCLR_PIN31_High               = 1,     /*!< High : Pin driver is high.                                                */
} GPIO_OUTCLR_PIN31_R_Enum;

typedef enum {                                  /*!< GPIO_OUTCLR_PIN31                                                         */
  GPIO_OUTCLR_PIN31_Clear              = 1,     /*!< Clear : Set pin driver low.                                               */
} GPIO_OUTCLR_PIN31_W_Enum;

/* ==========================================================  IN  =========================================================== */
/* ==================================================  GPIO IN PIN0 [0..0]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN0                                                              */
  GPIO_IN_PIN0_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN0_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN0_Enum;

/* ==================================================  GPIO IN PIN1 [1..1]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN1                                                              */
  GPIO_IN_PIN1_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN1_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN1_Enum;

/* ==================================================  GPIO IN PIN2 [2..2]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN2                                                              */
  GPIO_IN_PIN2_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN2_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN2_Enum;

/* ==================================================  GPIO IN PIN3 [3..3]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN3                                                              */
  GPIO_IN_PIN3_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN3_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN3_Enum;

/* ==================================================  GPIO IN PIN4 [4..4]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN4                                                              */
  GPIO_IN_PIN4_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN4_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN4_Enum;

/* ==================================================  GPIO IN PIN5 [5..5]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN5                                                              */
  GPIO_IN_PIN5_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN5_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN5_Enum;

/* ==================================================  GPIO IN PIN6 [6..6]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN6                                                              */
  GPIO_IN_PIN6_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN6_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN6_Enum;

/* ==================================================  GPIO IN PIN7 [7..7]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN7                                                              */
  GPIO_IN_PIN7_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN7_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN7_Enum;

/* ==================================================  GPIO IN PIN8 [8..8]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN8                                                              */
  GPIO_IN_PIN8_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN8_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN8_Enum;

/* ==================================================  GPIO IN PIN9 [9..9]  ================================================== */
typedef enum {                                  /*!< GPIO_IN_PIN9                                                              */
  GPIO_IN_PIN9_Low                     = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN9_High                    = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN9_Enum;

/* ================================================  GPIO IN PIN10 [10..10]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN10                                                             */
  GPIO_IN_PIN10_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN10_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN10_Enum;

/* ================================================  GPIO IN PIN11 [11..11]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN11                                                             */
  GPIO_IN_PIN11_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN11_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN11_Enum;

/* ================================================  GPIO IN PIN12 [12..12]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN12                                                             */
  GPIO_IN_PIN12_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN12_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN12_Enum;

/* ================================================  GPIO IN PIN13 [13..13]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN13                                                             */
  GPIO_IN_PIN13_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN13_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN13_Enum;

/* ================================================  GPIO IN PIN14 [14..14]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN14                                                             */
  GPIO_IN_PIN14_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN14_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN14_Enum;

/* ================================================  GPIO IN PIN15 [15..15]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN15                                                             */
  GPIO_IN_PIN15_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN15_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN15_Enum;

/* ================================================  GPIO IN PIN16 [16..16]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN16                                                             */
  GPIO_IN_PIN16_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN16_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN16_Enum;

/* ================================================  GPIO IN PIN17 [17..17]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN17                                                             */
  GPIO_IN_PIN17_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN17_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN17_Enum;

/* ================================================  GPIO IN PIN18 [18..18]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN18                                                             */
  GPIO_IN_PIN18_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN18_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN18_Enum;

/* ================================================  GPIO IN PIN19 [19..19]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN19                                                             */
  GPIO_IN_PIN19_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN19_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN19_Enum;

/* ================================================  GPIO IN PIN20 [20..20]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN20                                                             */
  GPIO_IN_PIN20_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN20_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN20_Enum;

/* ================================================  GPIO IN PIN21 [21..21]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN21                                                             */
  GPIO_IN_PIN21_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN21_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN21_Enum;

/* ================================================  GPIO IN PIN22 [22..22]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN22                                                             */
  GPIO_IN_PIN22_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN22_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN22_Enum;

/* ================================================  GPIO IN PIN23 [23..23]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN23                                                             */
  GPIO_IN_PIN23_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN23_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN23_Enum;

/* ================================================  GPIO IN PIN24 [24..24]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN24                                                             */
  GPIO_IN_PIN24_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN24_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN24_Enum;

/* ================================================  GPIO IN PIN25 [25..25]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN25                                                             */
  GPIO_IN_PIN25_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN25_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN25_Enum;

/* ================================================  GPIO IN PIN26 [26..26]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN26                                                             */
  GPIO_IN_PIN26_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN26_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN26_Enum;

/* ================================================  GPIO IN PIN27 [27..27]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN27                                                             */
  GPIO_IN_PIN27_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN27_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN27_Enum;

/* ================================================  GPIO IN PIN28 [28..28]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN28                                                             */
  GPIO_IN_PIN28_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN28_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN28_Enum;

/* ================================================  GPIO IN PIN29 [29..29]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN29                                                             */
  GPIO_IN_PIN29_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN29_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN29_Enum;

/* ================================================  GPIO IN PIN30 [30..30]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN30                                                             */
  GPIO_IN_PIN30_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN30_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN30_Enum;

/* ================================================  GPIO IN PIN31 [31..31]  ================================================= */
typedef enum {                                  /*!< GPIO_IN_PIN31                                                             */
  GPIO_IN_PIN31_Low                    = 0,     /*!< Low : Pin input is low.                                                   */
  GPIO_IN_PIN31_High                   = 1,     /*!< High : Pin input is high.                                                 */
} GPIO_IN_PIN31_Enum;

/* ==========================================================  DIR  ========================================================== */
/* =================================================  GPIO DIR PIN0 [0..0]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN0                                                             */
  GPIO_DIR_PIN0_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN0_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN0_Enum;

/* =================================================  GPIO DIR PIN1 [1..1]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN1                                                             */
  GPIO_DIR_PIN1_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN1_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN1_Enum;

/* =================================================  GPIO DIR PIN2 [2..2]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN2                                                             */
  GPIO_DIR_PIN2_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN2_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN2_Enum;

/* =================================================  GPIO DIR PIN3 [3..3]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN3                                                             */
  GPIO_DIR_PIN3_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN3_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN3_Enum;

/* =================================================  GPIO DIR PIN4 [4..4]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN4                                                             */
  GPIO_DIR_PIN4_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN4_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN4_Enum;

/* =================================================  GPIO DIR PIN5 [5..5]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN5                                                             */
  GPIO_DIR_PIN5_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN5_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN5_Enum;

/* =================================================  GPIO DIR PIN6 [6..6]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN6                                                             */
  GPIO_DIR_PIN6_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN6_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN6_Enum;

/* =================================================  GPIO DIR PIN7 [7..7]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN7                                                             */
  GPIO_DIR_PIN7_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN7_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN7_Enum;

/* =================================================  GPIO DIR PIN8 [8..8]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN8                                                             */
  GPIO_DIR_PIN8_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN8_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN8_Enum;

/* =================================================  GPIO DIR PIN9 [9..9]  ================================================== */
typedef enum {                                  /*!< GPIO_DIR_PIN9                                                             */
  GPIO_DIR_PIN9_Input                  = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN9_Output                 = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN9_Enum;

/* ================================================  GPIO DIR PIN10 [10..10]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN10                                                            */
  GPIO_DIR_PIN10_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN10_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN10_Enum;

/* ================================================  GPIO DIR PIN11 [11..11]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN11                                                            */
  GPIO_DIR_PIN11_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN11_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN11_Enum;

/* ================================================  GPIO DIR PIN12 [12..12]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN12                                                            */
  GPIO_DIR_PIN12_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN12_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN12_Enum;

/* ================================================  GPIO DIR PIN13 [13..13]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN13                                                            */
  GPIO_DIR_PIN13_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN13_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN13_Enum;

/* ================================================  GPIO DIR PIN14 [14..14]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN14                                                            */
  GPIO_DIR_PIN14_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN14_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN14_Enum;

/* ================================================  GPIO DIR PIN15 [15..15]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN15                                                            */
  GPIO_DIR_PIN15_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN15_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN15_Enum;

/* ================================================  GPIO DIR PIN16 [16..16]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN16                                                            */
  GPIO_DIR_PIN16_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN16_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN16_Enum;

/* ================================================  GPIO DIR PIN17 [17..17]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN17                                                            */
  GPIO_DIR_PIN17_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN17_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN17_Enum;

/* ================================================  GPIO DIR PIN18 [18..18]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN18                                                            */
  GPIO_DIR_PIN18_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN18_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN18_Enum;

/* ================================================  GPIO DIR PIN19 [19..19]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN19                                                            */
  GPIO_DIR_PIN19_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN19_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN19_Enum;

/* ================================================  GPIO DIR PIN20 [20..20]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN20                                                            */
  GPIO_DIR_PIN20_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN20_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN20_Enum;

/* ================================================  GPIO DIR PIN21 [21..21]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN21                                                            */
  GPIO_DIR_PIN21_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN21_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN21_Enum;

/* ================================================  GPIO DIR PIN22 [22..22]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN22                                                            */
  GPIO_DIR_PIN22_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN22_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN22_Enum;

/* ================================================  GPIO DIR PIN23 [23..23]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN23                                                            */
  GPIO_DIR_PIN23_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN23_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN23_Enum;

/* ================================================  GPIO DIR PIN24 [24..24]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN24                                                            */
  GPIO_DIR_PIN24_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN24_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN24_Enum;

/* ================================================  GPIO DIR PIN25 [25..25]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN25                                                            */
  GPIO_DIR_PIN25_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN25_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN25_Enum;

/* ================================================  GPIO DIR PIN26 [26..26]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN26                                                            */
  GPIO_DIR_PIN26_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN26_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN26_Enum;

/* ================================================  GPIO DIR PIN27 [27..27]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN27                                                            */
  GPIO_DIR_PIN27_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN27_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN27_Enum;

/* ================================================  GPIO DIR PIN28 [28..28]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN28                                                            */
  GPIO_DIR_PIN28_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN28_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN28_Enum;

/* ================================================  GPIO DIR PIN29 [29..29]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN29                                                            */
  GPIO_DIR_PIN29_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN29_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN29_Enum;

/* ================================================  GPIO DIR PIN30 [30..30]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN30                                                            */
  GPIO_DIR_PIN30_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN30_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN30_Enum;

/* ================================================  GPIO DIR PIN31 [31..31]  ================================================ */
typedef enum {                                  /*!< GPIO_DIR_PIN31                                                            */
  GPIO_DIR_PIN31_Input                 = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIR_PIN31_Output                = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIR_PIN31_Enum;

/* ========================================================  DIRSET  ========================================================= */
/* ================================================  GPIO DIRSET PIN0 [0..0]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN0                                                          */
  GPIO_DIRSET_PIN0_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN0_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN0_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN0                                                          */
  GPIO_DIRSET_PIN0_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN0_W_Enum;

/* ================================================  GPIO DIRSET PIN1 [1..1]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN1                                                          */
  GPIO_DIRSET_PIN1_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN1_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN1_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN1                                                          */
  GPIO_DIRSET_PIN1_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN1_W_Enum;

/* ================================================  GPIO DIRSET PIN2 [2..2]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN2                                                          */
  GPIO_DIRSET_PIN2_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN2_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN2_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN2                                                          */
  GPIO_DIRSET_PIN2_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN2_W_Enum;

/* ================================================  GPIO DIRSET PIN3 [3..3]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN3                                                          */
  GPIO_DIRSET_PIN3_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN3_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN3_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN3                                                          */
  GPIO_DIRSET_PIN3_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN3_W_Enum;

/* ================================================  GPIO DIRSET PIN4 [4..4]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN4                                                          */
  GPIO_DIRSET_PIN4_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN4_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN4_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN4                                                          */
  GPIO_DIRSET_PIN4_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN4_W_Enum;

/* ================================================  GPIO DIRSET PIN5 [5..5]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN5                                                          */
  GPIO_DIRSET_PIN5_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN5_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN5_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN5                                                          */
  GPIO_DIRSET_PIN5_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN5_W_Enum;

/* ================================================  GPIO DIRSET PIN6 [6..6]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN6                                                          */
  GPIO_DIRSET_PIN6_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN6_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN6_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN6                                                          */
  GPIO_DIRSET_PIN6_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN6_W_Enum;

/* ================================================  GPIO DIRSET PIN7 [7..7]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN7                                                          */
  GPIO_DIRSET_PIN7_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN7_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN7_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN7                                                          */
  GPIO_DIRSET_PIN7_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN7_W_Enum;

/* ================================================  GPIO DIRSET PIN8 [8..8]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN8                                                          */
  GPIO_DIRSET_PIN8_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN8_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN8_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN8                                                          */
  GPIO_DIRSET_PIN8_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN8_W_Enum;

/* ================================================  GPIO DIRSET PIN9 [9..9]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRSET_PIN9                                                          */
  GPIO_DIRSET_PIN9_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN9_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN9_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN9                                                          */
  GPIO_DIRSET_PIN9_Set                 = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN9_W_Enum;

/* ==============================================  GPIO DIRSET PIN10 [10..10]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN10                                                         */
  GPIO_DIRSET_PIN10_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN10_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN10_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN10                                                         */
  GPIO_DIRSET_PIN10_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN10_W_Enum;

/* ==============================================  GPIO DIRSET PIN11 [11..11]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN11                                                         */
  GPIO_DIRSET_PIN11_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN11_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN11_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN11                                                         */
  GPIO_DIRSET_PIN11_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN11_W_Enum;

/* ==============================================  GPIO DIRSET PIN12 [12..12]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN12                                                         */
  GPIO_DIRSET_PIN12_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN12_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN12_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN12                                                         */
  GPIO_DIRSET_PIN12_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN12_W_Enum;

/* ==============================================  GPIO DIRSET PIN13 [13..13]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN13                                                         */
  GPIO_DIRSET_PIN13_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN13_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN13_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN13                                                         */
  GPIO_DIRSET_PIN13_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN13_W_Enum;

/* ==============================================  GPIO DIRSET PIN14 [14..14]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN14                                                         */
  GPIO_DIRSET_PIN14_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN14_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN14_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN14                                                         */
  GPIO_DIRSET_PIN14_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN14_W_Enum;

/* ==============================================  GPIO DIRSET PIN15 [15..15]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN15                                                         */
  GPIO_DIRSET_PIN15_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN15_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN15_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN15                                                         */
  GPIO_DIRSET_PIN15_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN15_W_Enum;

/* ==============================================  GPIO DIRSET PIN16 [16..16]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN16                                                         */
  GPIO_DIRSET_PIN16_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN16_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN16_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN16                                                         */
  GPIO_DIRSET_PIN16_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN16_W_Enum;

/* ==============================================  GPIO DIRSET PIN17 [17..17]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN17                                                         */
  GPIO_DIRSET_PIN17_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN17_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN17_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN17                                                         */
  GPIO_DIRSET_PIN17_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN17_W_Enum;

/* ==============================================  GPIO DIRSET PIN18 [18..18]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN18                                                         */
  GPIO_DIRSET_PIN18_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN18_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN18_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN18                                                         */
  GPIO_DIRSET_PIN18_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN18_W_Enum;

/* ==============================================  GPIO DIRSET PIN19 [19..19]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN19                                                         */
  GPIO_DIRSET_PIN19_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN19_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN19_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN19                                                         */
  GPIO_DIRSET_PIN19_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN19_W_Enum;

/* ==============================================  GPIO DIRSET PIN20 [20..20]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN20                                                         */
  GPIO_DIRSET_PIN20_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN20_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN20_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN20                                                         */
  GPIO_DIRSET_PIN20_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN20_W_Enum;

/* ==============================================  GPIO DIRSET PIN21 [21..21]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN21                                                         */
  GPIO_DIRSET_PIN21_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN21_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN21_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN21                                                         */
  GPIO_DIRSET_PIN21_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN21_W_Enum;

/* ==============================================  GPIO DIRSET PIN22 [22..22]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN22                                                         */
  GPIO_DIRSET_PIN22_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN22_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN22_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN22                                                         */
  GPIO_DIRSET_PIN22_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN22_W_Enum;

/* ==============================================  GPIO DIRSET PIN23 [23..23]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN23                                                         */
  GPIO_DIRSET_PIN23_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN23_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN23_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN23                                                         */
  GPIO_DIRSET_PIN23_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN23_W_Enum;

/* ==============================================  GPIO DIRSET PIN24 [24..24]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN24                                                         */
  GPIO_DIRSET_PIN24_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN24_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN24_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN24                                                         */
  GPIO_DIRSET_PIN24_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN24_W_Enum;

/* ==============================================  GPIO DIRSET PIN25 [25..25]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN25                                                         */
  GPIO_DIRSET_PIN25_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN25_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN25_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN25                                                         */
  GPIO_DIRSET_PIN25_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN25_W_Enum;

/* ==============================================  GPIO DIRSET PIN26 [26..26]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN26                                                         */
  GPIO_DIRSET_PIN26_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN26_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN26_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN26                                                         */
  GPIO_DIRSET_PIN26_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN26_W_Enum;

/* ==============================================  GPIO DIRSET PIN27 [27..27]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN27                                                         */
  GPIO_DIRSET_PIN27_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN27_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN27_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN27                                                         */
  GPIO_DIRSET_PIN27_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN27_W_Enum;

/* ==============================================  GPIO DIRSET PIN28 [28..28]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN28                                                         */
  GPIO_DIRSET_PIN28_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN28_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN28_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN28                                                         */
  GPIO_DIRSET_PIN28_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN28_W_Enum;

/* ==============================================  GPIO DIRSET PIN29 [29..29]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN29                                                         */
  GPIO_DIRSET_PIN29_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN29_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN29_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN29                                                         */
  GPIO_DIRSET_PIN29_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN29_W_Enum;

/* ==============================================  GPIO DIRSET PIN30 [30..30]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN30                                                         */
  GPIO_DIRSET_PIN30_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN30_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN30_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN30                                                         */
  GPIO_DIRSET_PIN30_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN30_W_Enum;

/* ==============================================  GPIO DIRSET PIN31 [31..31]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRSET_PIN31                                                         */
  GPIO_DIRSET_PIN31_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRSET_PIN31_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRSET_PIN31_R_Enum;

typedef enum {                                  /*!< GPIO_DIRSET_PIN31                                                         */
  GPIO_DIRSET_PIN31_Set                = 1,     /*!< Set : Set pin as output.                                                  */
} GPIO_DIRSET_PIN31_W_Enum;

/* ========================================================  DIRCLR  ========================================================= */
/* ================================================  GPIO DIRCLR PIN0 [0..0]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN0                                                          */
  GPIO_DIRCLR_PIN0_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN0_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN0_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN0                                                          */
  GPIO_DIRCLR_PIN0_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN0_W_Enum;

/* ================================================  GPIO DIRCLR PIN1 [1..1]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN1                                                          */
  GPIO_DIRCLR_PIN1_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN1_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN1_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN1                                                          */
  GPIO_DIRCLR_PIN1_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN1_W_Enum;

/* ================================================  GPIO DIRCLR PIN2 [2..2]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN2                                                          */
  GPIO_DIRCLR_PIN2_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN2_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN2_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN2                                                          */
  GPIO_DIRCLR_PIN2_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN2_W_Enum;

/* ================================================  GPIO DIRCLR PIN3 [3..3]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN3                                                          */
  GPIO_DIRCLR_PIN3_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN3_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN3_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN3                                                          */
  GPIO_DIRCLR_PIN3_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN3_W_Enum;

/* ================================================  GPIO DIRCLR PIN4 [4..4]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN4                                                          */
  GPIO_DIRCLR_PIN4_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN4_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN4_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN4                                                          */
  GPIO_DIRCLR_PIN4_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN4_W_Enum;

/* ================================================  GPIO DIRCLR PIN5 [5..5]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN5                                                          */
  GPIO_DIRCLR_PIN5_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN5_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN5_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN5                                                          */
  GPIO_DIRCLR_PIN5_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN5_W_Enum;

/* ================================================  GPIO DIRCLR PIN6 [6..6]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN6                                                          */
  GPIO_DIRCLR_PIN6_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN6_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN6_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN6                                                          */
  GPIO_DIRCLR_PIN6_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN6_W_Enum;

/* ================================================  GPIO DIRCLR PIN7 [7..7]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN7                                                          */
  GPIO_DIRCLR_PIN7_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN7_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN7_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN7                                                          */
  GPIO_DIRCLR_PIN7_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN7_W_Enum;

/* ================================================  GPIO DIRCLR PIN8 [8..8]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN8                                                          */
  GPIO_DIRCLR_PIN8_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN8_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN8_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN8                                                          */
  GPIO_DIRCLR_PIN8_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN8_W_Enum;

/* ================================================  GPIO DIRCLR PIN9 [9..9]  ================================================ */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN9                                                          */
  GPIO_DIRCLR_PIN9_Input               = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN9_Output              = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN9_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN9                                                          */
  GPIO_DIRCLR_PIN9_Clear               = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN9_W_Enum;

/* ==============================================  GPIO DIRCLR PIN10 [10..10]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN10                                                         */
  GPIO_DIRCLR_PIN10_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN10_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN10_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN10                                                         */
  GPIO_DIRCLR_PIN10_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN10_W_Enum;

/* ==============================================  GPIO DIRCLR PIN11 [11..11]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN11                                                         */
  GPIO_DIRCLR_PIN11_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN11_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN11_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN11                                                         */
  GPIO_DIRCLR_PIN11_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN11_W_Enum;

/* ==============================================  GPIO DIRCLR PIN12 [12..12]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN12                                                         */
  GPIO_DIRCLR_PIN12_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN12_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN12_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN12                                                         */
  GPIO_DIRCLR_PIN12_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN12_W_Enum;

/* ==============================================  GPIO DIRCLR PIN13 [13..13]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN13                                                         */
  GPIO_DIRCLR_PIN13_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN13_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN13_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN13                                                         */
  GPIO_DIRCLR_PIN13_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN13_W_Enum;

/* ==============================================  GPIO DIRCLR PIN14 [14..14]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN14                                                         */
  GPIO_DIRCLR_PIN14_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN14_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN14_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN14                                                         */
  GPIO_DIRCLR_PIN14_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN14_W_Enum;

/* ==============================================  GPIO DIRCLR PIN15 [15..15]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN15                                                         */
  GPIO_DIRCLR_PIN15_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN15_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN15_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN15                                                         */
  GPIO_DIRCLR_PIN15_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN15_W_Enum;

/* ==============================================  GPIO DIRCLR PIN16 [16..16]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN16                                                         */
  GPIO_DIRCLR_PIN16_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN16_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN16_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN16                                                         */
  GPIO_DIRCLR_PIN16_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN16_W_Enum;

/* ==============================================  GPIO DIRCLR PIN17 [17..17]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN17                                                         */
  GPIO_DIRCLR_PIN17_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN17_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN17_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN17                                                         */
  GPIO_DIRCLR_PIN17_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN17_W_Enum;

/* ==============================================  GPIO DIRCLR PIN18 [18..18]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN18                                                         */
  GPIO_DIRCLR_PIN18_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN18_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN18_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN18                                                         */
  GPIO_DIRCLR_PIN18_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN18_W_Enum;

/* ==============================================  GPIO DIRCLR PIN19 [19..19]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN19                                                         */
  GPIO_DIRCLR_PIN19_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN19_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN19_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN19                                                         */
  GPIO_DIRCLR_PIN19_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN19_W_Enum;

/* ==============================================  GPIO DIRCLR PIN20 [20..20]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN20                                                         */
  GPIO_DIRCLR_PIN20_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN20_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN20_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN20                                                         */
  GPIO_DIRCLR_PIN20_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN20_W_Enum;

/* ==============================================  GPIO DIRCLR PIN21 [21..21]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN21                                                         */
  GPIO_DIRCLR_PIN21_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN21_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN21_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN21                                                         */
  GPIO_DIRCLR_PIN21_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN21_W_Enum;

/* ==============================================  GPIO DIRCLR PIN22 [22..22]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN22                                                         */
  GPIO_DIRCLR_PIN22_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN22_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN22_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN22                                                         */
  GPIO_DIRCLR_PIN22_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN22_W_Enum;

/* ==============================================  GPIO DIRCLR PIN23 [23..23]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN23                                                         */
  GPIO_DIRCLR_PIN23_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN23_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN23_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN23                                                         */
  GPIO_DIRCLR_PIN23_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN23_W_Enum;

/* ==============================================  GPIO DIRCLR PIN24 [24..24]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN24                                                         */
  GPIO_DIRCLR_PIN24_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN24_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN24_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN24                                                         */
  GPIO_DIRCLR_PIN24_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN24_W_Enum;

/* ==============================================  GPIO DIRCLR PIN25 [25..25]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN25                                                         */
  GPIO_DIRCLR_PIN25_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN25_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN25_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN25                                                         */
  GPIO_DIRCLR_PIN25_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN25_W_Enum;

/* ==============================================  GPIO DIRCLR PIN26 [26..26]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN26                                                         */
  GPIO_DIRCLR_PIN26_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN26_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN26_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN26                                                         */
  GPIO_DIRCLR_PIN26_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN26_W_Enum;

/* ==============================================  GPIO DIRCLR PIN27 [27..27]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN27                                                         */
  GPIO_DIRCLR_PIN27_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN27_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN27_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN27                                                         */
  GPIO_DIRCLR_PIN27_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN27_W_Enum;

/* ==============================================  GPIO DIRCLR PIN28 [28..28]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN28                                                         */
  GPIO_DIRCLR_PIN28_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN28_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN28_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN28                                                         */
  GPIO_DIRCLR_PIN28_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN28_W_Enum;

/* ==============================================  GPIO DIRCLR PIN29 [29..29]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN29                                                         */
  GPIO_DIRCLR_PIN29_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN29_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN29_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN29                                                         */
  GPIO_DIRCLR_PIN29_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN29_W_Enum;

/* ==============================================  GPIO DIRCLR PIN30 [30..30]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN30                                                         */
  GPIO_DIRCLR_PIN30_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN30_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN30_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN30                                                         */
  GPIO_DIRCLR_PIN30_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN30_W_Enum;

/* ==============================================  GPIO DIRCLR PIN31 [31..31]  =============================================== */
typedef enum {                                  /*!< GPIO_DIRCLR_PIN31                                                         */
  GPIO_DIRCLR_PIN31_Input              = 0,     /*!< Input : Pin set as input.                                                 */
  GPIO_DIRCLR_PIN31_Output             = 1,     /*!< Output : Pin set as output.                                               */
} GPIO_DIRCLR_PIN31_R_Enum;

typedef enum {                                  /*!< GPIO_DIRCLR_PIN31                                                         */
  GPIO_DIRCLR_PIN31_Clear              = 1,     /*!< Clear : Set pin as input.                                                 */
} GPIO_DIRCLR_PIN31_W_Enum;

/* ========================================================  PIN_CNF  ======================================================== */
/* ================================================  GPIO PIN_CNF DIR [0..0]  ================================================ */
typedef enum {                                  /*!< GPIO_PIN_CNF_DIR                                                          */
  GPIO_PIN_CNF_DIR_Input               = 0,     /*!< Input : Configure pin as an input pin.                                    */
  GPIO_PIN_CNF_DIR_Output              = 1,     /*!< Output : Configure pin as an output pin.                                  */
} GPIO_PIN_CNF_DIR_Enum;

/* ===============================================  GPIO PIN_CNF INPUT [1..1]  =============================================== */
typedef enum {                                  /*!< GPIO_PIN_CNF_INPUT                                                        */
  GPIO_PIN_CNF_INPUT_Connect           = 0,     /*!< Connect : Connect input pin.                                              */
  GPIO_PIN_CNF_INPUT_Disconnect        = 1,     /*!< Disconnect : Disconnect input pin.                                        */
} GPIO_PIN_CNF_INPUT_Enum;

/* ===============================================  GPIO PIN_CNF PULL [2..3]  ================================================ */
typedef enum {                                  /*!< GPIO_PIN_CNF_PULL                                                         */
  GPIO_PIN_CNF_PULL_Disabled           = 0,     /*!< Disabled : No pull.                                                       */
  GPIO_PIN_CNF_PULL_Pulldown           = 1,     /*!< Pulldown : Pulldown on pin.                                               */
  GPIO_PIN_CNF_PULL_Pullup             = 3,     /*!< Pullup : Pullup on pin.                                                   */
} GPIO_PIN_CNF_PULL_Enum;

/* ==============================================  GPIO PIN_CNF DRIVE [8..10]  =============================================== */
typedef enum {                                  /*!< GPIO_PIN_CNF_DRIVE                                                        */
  GPIO_PIN_CNF_DRIVE_S0S1              = 0,     /*!< S0S1 : Standard '0', Standard '1'.                                        */
  GPIO_PIN_CNF_DRIVE_H0S1              = 1,     /*!< H0S1 : High '0', Standard '1'.                                            */
  GPIO_PIN_CNF_DRIVE_S0H1              = 2,     /*!< S0H1 : Standard '0', High '1'.                                            */
  GPIO_PIN_CNF_DRIVE_H0H1              = 3,     /*!< H0H1 : High '0', High '1'.                                                */
  GPIO_PIN_CNF_DRIVE_D0S1              = 4,     /*!< D0S1 : Disconnected '0', Standard '1'.                                    */
  GPIO_PIN_CNF_DRIVE_D0H1              = 5,     /*!< D0H1 : Disconnected '0', High '1'.                                        */
  GPIO_PIN_CNF_DRIVE_S0D1              = 6,     /*!< S0D1 : Standard '0', Disconnected '1'.                                    */
  GPIO_PIN_CNF_DRIVE_H0D1              = 7,     /*!< H0D1 : High '0', Disconnected '1'.                                        */
} GPIO_PIN_CNF_DRIVE_Enum;

/* ==============================================  GPIO PIN_CNF SENSE [16..17]  ============================================== */
typedef enum {                                  /*!< GPIO_PIN_CNF_SENSE                                                        */
  GPIO_PIN_CNF_SENSE_Disabled          = 0,     /*!< Disabled : Disabled.                                                      */
  GPIO_PIN_CNF_SENSE_High              = 2,     /*!< High : Wakeup on high level.                                              */
  GPIO_PIN_CNF_SENSE_Low               = 3,     /*!< Low : Wakeup on low level.                                                */
} GPIO_PIN_CNF_SENSE_Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* NRF51_H */


/** @} */ /* End of group nrf51 */

/** @} */ /* End of group Nordic Semiconductor */
