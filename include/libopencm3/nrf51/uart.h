#ifndef LIBOPENCM3_NRF51_UART_H
#define LIBOPENCM3_NRF51_UART_H

#include <libopencm3/cm3/common.h>

/* NRF51 uart register addresses */
enum
{
/* \TODO	- define the base APB offset value (0x40000000) somewhere else, in a common header, used by all peripherals */
	UART_BASE_ADDRESS		= 0x40002000,
	/* Task registers offsets */
	UART_STARTRX_TASK_REG_OFFSET	= 0,
	UART_STOPRX_TASK_REG_OFFSET	= 4,
	UART_STARTTX_TASK_REG_OFFSET	= 8,
	UART_STOPTX_TASK_REG_OFFSET	= 12,
	UART_SUSPEND_TASK_REG_OFFSET	= 0x1c,
	/* Event registers offsets */
	UART_CTS_EVENT_REG_OFFSET	= 0x100,
	UART_NCTS_EVENT_REG_OFFSET	= 0x104,
	UART_RXDRDY_EVENT_REG_OFFSET	= 0x108,
	UART_TXDRDY_EVENT_REG_OFFSET	= 0x11c,
	UART_ERROR_EVENT_REG_OFFSET	= 0x124,
	UART_RXTO_EVENT_REG_OFFSET	= 0x144,
	/* Regular registers offsets */
	UART_INTEN_REG_OFFSET		= 0x300,
	UART_INTENSET_REG_OFFSET	= 0x304,
	UART_INTENCLR_REG_OFFSET	= 0x308,
	UART_ERRORSRC_REG_OFFSET	= 0x480,
	UART_ENABLE_REG_OFFSET		= 0x500,
	UART_PSELRTS_REG_OFFSET		= 0x508,
	UART_PSELTXD_REG_OFFSET		= 0x50c,
	UART_PSELCTS_REG_OFFSET		= 0x510,
	UART_PSELRXD_REG_OFFSET		= 0x514,
	UART_RXD_REG_OFFSET		= 0x518,
	UART_TXD_REG_OFFSET		= 0x51c,
	UART_BAUDRATE_REG_OFFSET	= 0x524,
	UART_CONFIG_REG_OFFSET		= 0x56c,
		/* CONFIG register bitfield offsets (offset in bits in the CONFIG register) */
		UART_CONFIG_HW_FLOW_CONTROL_OFFSET = 0,
		UART_CONFIG_PARITY_BIT_GENERATION_OFFSET = 1,
};

/* Hardware instantiation id of the uart peripheral */
/* \TODO	- define the base APB offset value (0x40000000) somewhere else, in a common header, used by all peripherals */
enum
{
	NRF51_UART_INSTANTIATION_ID = (UART_BASE_ADDRESS - 0x40000000) >> 12,
};


/* Task registers */
#define UART_STARTRX_TASK	MMIO32(UART_BASE_ADDRESS + UART_STARTRX_TASK_REG_OFFSET)
#define UART_STOPRX_TASK	MMIO32(UART_BASE_ADDRESS + UART_STOPRX_TASK_REG_OFFSET)
#define UART_STARTTX_TASK	MMIO32(UART_BASE_ADDRESS + UART_STARTTX_TASK_REG_OFFSET)
#define UART_STOPTX_TASK	MMIO32(UART_BASE_ADDRESS + UART_STOPTX_TASK_REG_OFFSET)
#define UART_SUSPEND_TASK	MMIO32(UART_BASE_ADDRESS + UART_SUSPEND_TASK_REG_OFFSET)

/* Event registers */
#define UART_CTS_EVENT		MMIO32(UART_BASE_ADDRESS + UART_CTS_EVENT_REG_OFFSET)
#define UART_NCTS_EVENT		MMIO32(UART_BASE_ADDRESS + UART_NCTS_EVENT_REG_OFFSET)
#define UART_RXDRDY_EVENT	MMIO32(UART_BASE_ADDRESS + UART_RXDRDY_EVENT_REG_OFFSET)
#define UART_TXDRDY_EVENT	MMIO32(UART_BASE_ADDRESS + UART_TXDRDY_EVENT_REG_OFFSET)
#define UART_ERROR_EVENT	MMIO32(UART_BASE_ADDRESS + UART_ERROR_EVENT_REG_OFFSET)
#define UART_RXTO_EVENT		MMIO32(UART_BASE_ADDRESS + UART_RXTO_EVENT_REG_OFFSET)

/* Regular registers */
#define UART_INTEN		MMIO32(UART_BASE_ADDRESS + UART_INTEN_REG_OFFSET)
#define UART_INTENSET		MMIO32(UART_BASE_ADDRESS + UART_INTENSET_REG_OFFSET)
#define UART_INTENCLR		MMIO32(UART_BASE_ADDRESS + UART_INTENCLR_REG_OFFSET)
#define UART_ERRORSRC		MMIO32(UART_BASE_ADDRESS + UART_ERRORSRC_REG_OFFSET)
#define UART_ENABLE		MMIO32(UART_BASE_ADDRESS + UART_ENABLE_REG_OFFSET)
#define UART_PSELRTS		MMIO32(UART_BASE_ADDRESS + UART_PSELRTS_REG_OFFSET)
#define UART_PSELTXD		MMIO32(UART_BASE_ADDRESS + UART_PSELTXD_REG_OFFSET)
#define UART_PSELCTS		MMIO32(UART_BASE_ADDRESS + UART_PSELCTS_REG_OFFSET)
#define UART_PSELRXD		MMIO32(UART_BASE_ADDRESS + UART_PSELRXD_REG_OFFSET)
#define UART_RXD		MMIO32(UART_BASE_ADDRESS + UART_RXD_REG_OFFSET)
#define UART_TXD		MMIO32(UART_BASE_ADDRESS + UART_TXD_REG_OFFSET)
#define UART_BAUDRATE		MMIO32(UART_BASE_ADDRESS + UART_BAUDRATE_REG_OFFSET)
#define UART_CONFIG		MMIO32(UART_BASE_ADDRESS + UART_CONFIG_REG_OFFSET)

/* Bit definitions common for the INTEN, INTENSET and INTENCLR registers */
enum UART_INTERRUPT_BITS_ENUM
{
	UART_CTS_INTERRUPT_BIT		= 1 << 0,
	UART_NCTS_INTERRUPT_BIT		= 1 << 1,
	UART_RXDRDY_INTERRUPT_BIT	= 1 << 2,
	UART_TXDRDY_INTERRUPT_BIT	= 1 << 7,
	UART_ERROR_INTERRUPT_BIT	= 1 << 9,
	UART_RXTO_INTERRUPT_BIT		= 1 << 17,
};

/* UART error source bits, in register ERRORSRC */
enum UART_ERROR_SOURCE_BITS_ENUM
{
	UART_OVERRUN_ERRORR_BIT	= 1 << 0,
	UART_PARITY_ERROR_BIT	= 1 << 1,
	UART_FRAMING_ERROR_BIT	= 1 << 2,
	UART_BREAK_ERROR_BIT	= 1 << 3,
};

/* Values for the ENABLE register */
enum UART_ENABLE_REGISTER_VALUES_ENUM
{
	UART_PERIPHERAL_DISABLE		= 0,
	UART_PERIPHERAL_ENABLE		= 4,
};

/* Values for the UART pin selection registers - PSELRTS, PSELTXD, PSELCTS, PSELRXD */
enum UART_PINSEL_VALUES_ENUM
{
	/* Values 0 to 31 - gpio number */

	/* Value of 0xffffffff - disconnect pin, do not use signal */
	UART_PINSEL_DISABLE_PIN		= 0xffffffff,
};

/* Defined baudrates values, must be programmed in the BAUDRATE registers */
enum UART_BAUDRATE_ENUM
{
	BAUD_1200	= 0x0004f000,
	BAUD_2400	= 0x0009d000,
	BAUD_4800	= 0x0013b000,
	BAUD_9600	= 0x00275000,
	BAUD_14400	= 0x003b0000,
	BAUD_19200	= 0x004ea000,
	BAUD_28800	= 0x0075f000,
	BAUD_31250	= 0x00800000,
	BAUD_38400	= 0x009d5000,
	BAUD_56000	= 0x00e50000,
	BAUD_57600	= 0x00ebf000,
	BAUD_76800	= 0x013a9000,
	BAUD_115200	= 0x01d7e000,
	BAUD_230400	= 0x03afb000,
	BAUD_250000	= 0x04000000,
	BAUD_460800	= 0x075f7000,
	BAUD_921600	= 0x0ebedfa4,
	BAUD_1M		= 0x10000000,
};

/* Values for the ENABLE register */
enum UART_CONFIG_REGISTER_VALUES_ENUM
{
	UART_HW_FLOW_CONTROL_DISABLED		= 0,
	UART_HW_FLOW_CONTROL_ENABLED		= 1,
	UART_PARITY_BIT_GENERATION_DISABLED	= 0,
	UART_PARITY_BIT_GENERATION_ENABLED	= 7,
};

#endif /* LIBOPENCM3_NRF51_UART_H */
